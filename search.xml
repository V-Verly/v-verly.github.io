<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>「CodeForces-504E」Misha and LCP on Tree(SA+树链剖分)</title>
      <link href="/2020/10/20/Codeforces-504E/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://codeforces.com/problemset/problem/504/E" target="_blank" rel="noopener">CodeForces-504E」Misha and LCP on Tree</a><br>给定一棵 n 个节点的树，每个节点有一个小写字母。每组询问为树上 a -&gt; b 和 c -&gt; d 组成的字符串的最长公共前缀长度</p></blockquote><a id="more"></a><p>谁能想到！我还有会写树剖的一天</p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一棵$n$个节点的树，每个节点有一个小写字母。<br>有$m$组询问，每组询问为树上$$ a \to ba→b$$ 和$$ c \to dc→d$$ 组成的字符串的最长公共前缀。<br>$n \le 3 \times 10^5，m \le 10^6$。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>对于每个询问，可以把查询的链看作是$O(logn)$个区间拼接起来，对于区间从前往后依次查询lcp即可。<br>处理出树剖后的串做lcp查询，哈希/SA/SAM都可以。<br>SA就根据树剖的dfn建串，正反拼接一下（分别对应路径从根到叶子和从叶子到根的情况），对每个询问找到dfn的pos处理查询即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; edge[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sz[maxn], bel[maxn], fa[maxn], id[maxn], idR[maxn], dep[maxn], tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">sz[u] = <span class="number">1</span>, fa[u] = pre, dep[u] = dep[pre] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;v : edge[u]) <span class="keyword">if</span>(v != pre) sz[u] += dfs(v, u); </span><br><span class="line"><span class="keyword">return</span> sz[u];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">bel[u] = num, id[u] = ++ tot, idR[tot] = u;</span><br><span class="line"><span class="keyword">int</span> idx = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;v : edge[u]) <span class="keyword">if</span>(v != fa[u] &amp;&amp; (idx == <span class="number">-1</span> || sz[idx] &lt; sz[v])) idx = v;</span><br><span class="line"><span class="keyword">if</span>(idx == <span class="number">-1</span>) <span class="keyword">return</span>;</span><br><span class="line">dfs2(idx, num);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;v : edge[u]) <span class="keyword">if</span>(v != fa[u] &amp;&amp; v != idx) dfs2(v, v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SA</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N maxn &lt;&lt; 1</span></span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> sa[N], t[N], t2[N], c[N], n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_sa</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> *x = t, *y = t2;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i ++) c[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++) c[x[i] = s[i]] ++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i ++) c[i] += c[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i --) sa[-- c[x[i]]] = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = n - k; i &lt; n; i ++) y[p ++] = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++) <span class="keyword">if</span>(sa[i] &gt;= k) y[p ++] = sa[i] - k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i ++) c[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++) c[x[y[i]]] ++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i ++) c[i] += c[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i --) sa[-- c[x[y[i]]]] = y[i];</span><br><span class="line">swap(x, y);</span><br><span class="line">p = <span class="number">1</span>; x[sa[<span class="number">0</span>]] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i ++)</span><br><span class="line">x[sa[i]] = y[sa[i - <span class="number">1</span>]] == y[sa[i]] &amp;&amp; y[sa[i - <span class="number">1</span>] + k] == y[sa[i] + k] ? p - <span class="number">1</span> : p ++;</span><br><span class="line"><span class="keyword">if</span>(p &gt;= n) <span class="keyword">break</span>;</span><br><span class="line">m = p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rk[N], height[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getHeight</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) rk[sa[i]] = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, k = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(k) k --;</span><br><span class="line"><span class="keyword">int</span> j = sa[rk[i] - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">while</span>(s[i + k] == s[j + k]) k ++;</span><br><span class="line">height[rk[i]] = k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[N][<span class="number">20</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RMQ</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) dp[i][<span class="number">0</span>] = height[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; j) &lt; N; j ++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= n; i ++)</span><br><span class="line">dp[i][j] = min(dp[i][j - <span class="number">1</span>], dp[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span> &lt;&lt; (k + <span class="number">1</span>) &lt;= r - l + <span class="number">1</span>) k ++;</span><br><span class="line"><span class="keyword">return</span> min(dp[l][k], dp[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> _lcp(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(x == y) <span class="keyword">return</span> n - x + <span class="number">1</span>;</span><br><span class="line">x = rk[x - <span class="number">1</span>], y = rk[y - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(x &gt; y) swap(x, y);</span><br><span class="line"><span class="keyword">return</span> query(x + <span class="number">1</span>, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lcp</span><span class="params">(<span class="keyword">int</span> l1, <span class="keyword">int</span> r1, <span class="keyword">int</span> l2, <span class="keyword">int</span> r2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = min(<span class="built_in">abs</span>(r1 - l1) + <span class="number">1</span>, <span class="built_in">abs</span>(r2 - l2) + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(l1 &lt;= r1 &amp;&amp; l2 &lt;= r2) <span class="keyword">return</span> min(len, _lcp(l1, l2)); </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(l1 &lt;= r1 &amp;&amp; l2 &gt; r2) <span class="keyword">return</span> min(len, _lcp(l1, n - l2 + <span class="number">1</span>));</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(l1 &gt; r1 &amp;&amp; l2 &lt;= r2) <span class="keyword">return</span> min(len, _lcp(n - l1 + <span class="number">1</span>, l2));</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> min(len, _lcp(n - l1 + <span class="number">1</span>, n - l2 + <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="built_in">string</span> str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">n = str.length();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++) s[i] = str[i]; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++) s[i + n] = str[n - i - <span class="number">1</span>];</span><br><span class="line">n *= <span class="number">2</span>;</span><br><span class="line">build_sa(n + <span class="number">1</span>, <span class="number">130</span>);</span><br><span class="line">getHeight();</span><br><span class="line">RMQ();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> N</span></span><br><span class="line">&#125;sa;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Seg</span> &#123;</span> <span class="keyword">int</span> l, r; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;Seg&gt; cal(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;Seg&gt; res, res2;</span><br><span class="line"><span class="keyword">while</span>(bel[u] != bel[v])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[bel[u]] &gt; dep[bel[v]]) res.push_back(&#123;id[u], id[bel[u]]&#125;), u = fa[bel[u]]; </span><br><span class="line"><span class="keyword">else</span> res2.push_back(&#123;id[bel[v]], id[v]&#125;), v = fa[bel[v]]; </span><br><span class="line">&#125;</span><br><span class="line">res.push_back(&#123;id[u], id[v]&#125;);</span><br><span class="line">reverse(res2.begin(), res2.end());</span><br><span class="line"><span class="keyword">for</span>(Seg x : res2) res.push_back(x);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lcp</span><span class="params">(<span class="built_in">vector</span>&lt;Seg&gt; a, <span class="built_in">vector</span>&lt;Seg&gt; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt; a.size() &amp;&amp; j &lt; b.size())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> t = sa.lcp(a[i].l, a[i].r, b[j].l, b[j].r);</span><br><span class="line"><span class="keyword">if</span>(!t) <span class="keyword">return</span> res;</span><br><span class="line">res += t;</span><br><span class="line"><span class="keyword">if</span>(a[i].l &lt;= a[i].r)</span><br><span class="line">&#123;</span><br><span class="line">a[i].l += t;</span><br><span class="line"><span class="keyword">if</span>(a[i].l &gt; a[i].r) i ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">a[i].l -= t;</span><br><span class="line"><span class="keyword">if</span>(a[i].l &lt; a[i].r) i ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(b[j].l &lt;= b[j].r)</span><br><span class="line">&#123;</span><br><span class="line">b[j].l += t;</span><br><span class="line"><span class="keyword">if</span>(b[j].l &gt; b[j].r) j ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">b[j].l -= t;</span><br><span class="line"><span class="keyword">if</span>(b[j].l &lt; b[j].r) j ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">edge[u].push_back(v);</span><br><span class="line">edge[v].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">1</span>, <span class="number">0</span>); dfs2(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">string</span> str = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) str += s[idR[i]];</span><br><span class="line">sa.init(str);</span><br><span class="line"><span class="keyword">int</span> q, l1, r1, l2, r2;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</span><br><span class="line"><span class="keyword">while</span>(q --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>, &amp;l1, &amp;r1, &amp;l2, &amp;r2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, lcp(cal(l1, r1), cal(l2, r2)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> String </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树链剖分 </tag>
            
            <tag> 后缀数组 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Codeforces Round 628 (Div. 2)</title>
      <link href="/2020/03/17/Codeforces%20Round%20628%20(Div.%202)/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://codeforces.com/contest/1325" target="_blank" rel="noopener">Codeforces Round #628 (Div. 2)</a><br>久违的(?)更新<br>实习offer疑似要因为实习时间太短告吹了，只能打打cf维持生活这样子</p></blockquote><a id="more"></a><hr><h2 id="A-EhAb-AnD-gCd"><a href="#A-EhAb-AnD-gCd" class="headerlink" title="A. EhAb AnD gCd"></a>A. EhAb AnD gCd</h2><p>给一个数x，找到满足$GCD(a,b)+LCM(a,b)=x$的数对a,b</p><p>很显然是1+(x-1)嘛</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line"><span class="keyword">while</span>(t --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, <span class="number">1</span>, x - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="B-CopyCopyCopyCopyCopy"><a href="#B-CopyCopyCopyCopyCopy" class="headerlink" title="B. CopyCopyCopyCopyCopy"></a>B. CopyCopyCopyCopyCopy</h2><p>把长度为n的序列复制n次，问它的最长上升子序列长度。</p><p>第i组有效的是第i个大的数，所以答案是序列里不同数字的个数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line"><span class="keyword">while</span>(t --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) st.insert(a[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,(<span class="keyword">int</span>)st.size());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="C-Ehab-and-Path-etic-MEXs"><a href="#C-Ehab-and-Path-etic-MEXs" class="headerlink" title="C. Ehab and Path-etic MEXs"></a>C. Ehab and Path-etic MEXs</h2><p>给树上每条边一个0~n-2的不重复权值，怎么使树上所有路径的MEX最大值最小。</p><p>我的思路是把最小值赋给叶子的父边，这样在叶子个数超过3（也就是不是链的情况）时，MEX的最大值不会超过2。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> de[maxn], pos[maxn];</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; edge[maxn];</span><br><span class="line"><span class="keyword">int</span> res[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">edge[i] = make_pair(u, v);</span><br><span class="line">de[u] ++, de[v] ++;</span><br><span class="line">pos[u] = i, pos[v] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mex = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(res, <span class="number">0xff</span>, <span class="keyword">sizeof</span> res);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(de[i] == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(res[pos[i]] == <span class="number">-1</span>) res[pos[i]] = mex ++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(res[i] == <span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, mex ++);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="D-Ehab-the-Xorcist"><a href="#D-Ehab-the-Xorcist" class="headerlink" title="D. Ehab the Xorcist"></a>D. Ehab the Xorcist</h2><p>给定两个非负整数$u$,$v$，求一个元素个数最少的数组，满足它们的异或和为$u$,和为$v$.</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>先特判u=0或者u=v的情况。当v&gt;u或者<code>(v-u)%2==1</code>时无解。</p><p>对于<code>(v-u)%2==0</code>的情况，如果<code>u&amp;((v-u)&gt;&gt;1)==0</code>，答案就是<code>u^((v-u)&gt;&gt;1),(v-u)&gt;&gt;1)</code>，否则就是<code>u,(v-u)&gt;&gt;1,(v-u)&gt;&gt;1</code>，因为前者将a[0]和a[1]合并之后不影响它们的和。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll u, v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;u, &amp;v);</span><br><span class="line"><span class="keyword">if</span>(u &gt; v) <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line"><span class="keyword">if</span>(u == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(v == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(v % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n%lld %lld\n"</span>, <span class="number">2</span>, v / <span class="number">2</span>, v / <span class="number">2</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(u == v) <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">printf</span>(<span class="string">"%d\n%lld\n"</span>, <span class="number">1</span>, u);</span><br><span class="line"><span class="keyword">if</span>((v - u) % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">ll tmp = v - u;</span><br><span class="line">tmp /= <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>((u &amp; tmp) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="number">2</span>);</span><br><span class="line">ll res1 = u, res2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(ll i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i ++) <span class="keyword">if</span>((tmp &gt;&gt; i) &amp; <span class="number">1</span>) </span><br><span class="line">&#123;</span><br><span class="line">(res1 ^= (<span class="number">1l</span>l &lt;&lt; i));</span><br><span class="line">(res2 ^= (<span class="number">1l</span>l &lt;&lt; i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>, res1, res2);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"3\n%lld %lld %lld\n"</span>, u, tmp, tmp);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="E-Ehab’s-REAL-Number-Theory-Problem"><a href="#E-Ehab’s-REAL-Number-Theory-Problem" class="headerlink" title="E. Ehab’s REAL Number Theory Problem"></a>E. Ehab’s REAL Number Theory Problem</h2><p>给定一个长度为$n(1 \le n \le 10^5)$的数组，元素大小满足$(1 \le a_i \le 10^6)$且元素的因数个数不超过7.找出最小的子集大小，满足子集中元素的积是一个完全平方数。</p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>首先对元素做预处理，只留下满足<code>cnt%2==1</code>的质数（因为平方数不影响答案）。</p><p>特判预处理后存在元素为1或者两个元素相等的情况。</p><p>考虑元素的因数个数不超过7这个条件，说明元素本身只有最多2个质因数（如果质因数为3，因数个数等于8）。</p><p>对于元素的质因数p,q（如果小于2，令其它为1）建图，连边p-q，边表示某个元素。对于图上的路径s-t，除了起点s和终点t，其它质数都出现了两次。所以答案就是这张图上的最小环，枚举起点，用BFS树求解即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> a[maxn], dis[maxm];</span><br><span class="line"><span class="keyword">bool</span> vis[maxm];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; edge[maxm];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>; j * j &lt;= a[i]; j ++) <span class="keyword">while</span>(a[i] % (j * j) == <span class="number">0</span>) a[i] /= j * j;</span><br><span class="line">&#125;</span><br><span class="line">sort(a + <span class="number">1</span>, a + <span class="number">1</span> + n);</span><br><span class="line"><span class="keyword">if</span>(a[<span class="number">1</span>] == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">puts</span>(<span class="string">"1"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i ++)</span><br><span class="line"><span class="keyword">if</span>(a[i] == a[i + <span class="number">1</span>]) <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">puts</span>(<span class="string">"2"</span>);</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; val;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>; j * j &lt;= a[i]; j ++) <span class="keyword">if</span>(a[i] % j == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">tmp.push_back(j);</span><br><span class="line"><span class="keyword">while</span>(a[i] % j == <span class="number">0</span>) a[i] /= j; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a[i] &gt; <span class="number">1</span>) tmp.push_back(a[i]); </span><br><span class="line"><span class="keyword">while</span>(tmp.size() &lt; <span class="number">2</span>) tmp.push_back(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> u = tmp[<span class="number">0</span>], v = tmp[<span class="number">1</span>];</span><br><span class="line">edge[u].push_back(v);</span><br><span class="line">edge[v].push_back(u);</span><br><span class="line">val.insert(u);</span><br><span class="line">val.insert(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> res = inf;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!edge[i].size()) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> v : val) vis[v] = <span class="literal">false</span>, dis[v] = inf;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">que.push(i); </span><br><span class="line">vis[i] = <span class="literal">true</span>, dis[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!que.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u = que.front(); </span><br><span class="line">que.pop();</span><br><span class="line">vis[u] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> v : edge[u])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[v] &gt; dis[u] + <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">dis[v] = dis[u] + <span class="number">1</span>;</span><br><span class="line">vis[v] = <span class="literal">true</span>;</span><br><span class="line">que.push(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(vis[v])</span><br><span class="line">res = min(res, dis[u] + dis[v] + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, res == inf ? <span class="number">-1</span> : res);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="F-Ehab’s-Last-Theorem"><a href="#F-Ehab’s-Last-Theorem" class="headerlink" title="F. Ehab’s Last Theorem"></a>F. Ehab’s Last Theorem</h2><p>给定一张n个点的图，保证至少存在以下一种情况:</p><ul><li><p>存在一个恰好有$\lceil\sqrt{n}\rceil$个点的独立集</p></li><li><p>存在一个至少有$\lceil\sqrt{n}\rceil$个点的环</p></li></ul><p>找到上述其中一种的任意一个合法解并输出。</p><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p>对于情况2，只需要dfs树找到图的最大环。如果不满足条件，对dfs树上的节点01染色，保证取一个点就不取连向它的所有点来求独立集。</p><p>赛中没调出来还越写越丑，码力属实不大行。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; edge[maxn];</span><br><span class="line"><span class="keyword">int</span> dep[maxn], pre[maxn], lim;</span><br><span class="line"><span class="keyword">bool</span> mark[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dep[u] = dep[pre[u]] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> v:edge[u])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(v == pre[u]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(!dep[v]) pre[v] = u, dfs(v);</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[u] - dep[v] + <span class="number">1</span> &gt;= lim)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"2\n%d\n%d "</span>, dep[u] - dep[v] + <span class="number">1</span>, u);</span><br><span class="line"><span class="keyword">int</span> now = u;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">now = pre[now];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, now);</span><br><span class="line">&#125;<span class="keyword">while</span>(now != v);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!mark[u]) <span class="keyword">for</span>(<span class="keyword">auto</span> v : edge[u]) mark[v] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">lim = <span class="built_in">sqrt</span>(n);</span><br><span class="line"><span class="keyword">while</span>(lim * lim &lt; n) lim ++;</span><br><span class="line"><span class="keyword">while</span>(m --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">edge[u].push_back(v);</span><br><span class="line">edge[v].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line">pre[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">dfs(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"1\n"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; lim; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!mark[i]) </span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, i);</span><br><span class="line">lim --;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Codeforces Round </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Note of C++</title>
      <link href="/2020/02/29/CPP-Note/"/>
      <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「CodeForces-1253F」Cheap Robot(最小瓶颈路)</title>
      <link href="/2019/11/22/Codeforces-1253F/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://codeforces.com/contest/1253/problem/F" target="_blank" rel="noopener">F - Cheap Robot</a><br>给定一个无向图，其中1-k为充电桩。经过长度为w的边会消耗w的电量，可在任意充电桩充满电。q次询问，每次询问从一个充电桩到另一个充电桩所需要的最小电池容量。</p></blockquote><a id="more"></a><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个无向图，其中1-k为充电桩。经过长度为w的边会消耗w的电量，可在任意充电桩充满电。q次询问，每次询问从一个充电桩到另一个充电桩所需要的最小电池容量。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>对于任意一个非充电桩的点，其必须满足以下两个条件：</p><ol><li>在这个点的电量必须能够到达最近的充电桩；</li><li>从这个点到最近的充电桩后返回这个点，它的总电量不能减少；</li></ol><p>考虑将原图缩为k个联通块，构建一张新图。</p><p>对于原图建立超级源点，点1-k向0点连边，求出距离每个非关键点最近的充电桩，以及它到最近充电桩的距离$dis[i]$。</p><p>对图上的两个非关键点$(u,v)$，点$u$能到达点$v$当且仅当电量$c$满足$(c-dis[u])-w≥dis[v]$，即$c≥dis[u]+dis[v]+w$。</p><p>对原图上的每条边更新，如果两个点$(u,v)$不属于同一个联通块，在$(belong[u],belong[v])$加边，边权为$dis[u]+dis[v]+w$。</p><p>建完新图之后，问题转化为<a href="https://loj.ac/problem/136" target="_blank" rel="noopener">最小瓶颈路</a>模板题。即给定一个k个节点m条边的图，回答q个询问，要求寻找从$s$到$t$的一条路径，使得路径上权值最大的一条边权值最小。 </p><p>这个问题离线用MST上LCA搞一下就好。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span> + <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> head[maxn], dis[maxn], cnt, n, k;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span> <span class="keyword">int</span> nex, to, w; &#125; edge[<span class="number">2</span> * maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span>&#123;</span> </span><br><span class="line"><span class="keyword">int</span> u, v, w;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> E oth) <span class="keyword">const</span> &#123; <span class="keyword">return</span> w &lt; oth.w; &#125;</span><br><span class="line">&#125; es[maxn];</span><br><span class="line"><span class="keyword">int</span> bel[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> pre[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x == pre[x] ? x : pre[x] = Find(pre[x]); &#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">edge[++ cnt] = &#123; head[u], v, w &#125;;</span><br><span class="line">head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dij</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">priority_queue&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt;, greater&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; &gt; que;</span><br><span class="line"><span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dis);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i ++) bel[i] = i, dis[i] = <span class="number">0</span>, que.push(&#123;<span class="number">0</span>, i&#125;);</span><br><span class="line"><span class="keyword">while</span>(!que.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> f = que.top(); que.pop();</span><br><span class="line"><span class="keyword">int</span> u = f.second, d = f.first;</span><br><span class="line"><span class="keyword">if</span>(d != dis[u]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = edge[i].nex)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v = edge[i].to, w = edge[i].w;</span><br><span class="line"><span class="keyword">if</span>(dis[u] + w &lt; dis[v]) </span><br><span class="line">&#123;</span><br><span class="line">bel[v] = bel[u];</span><br><span class="line">dis[v] = dis[u] + w;</span><br><span class="line">que.push(&#123;dis[v], v&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> val[maxn &lt;&lt; <span class="number">1</span>], idx;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">G[u].push_back(v);</span><br><span class="line">pre[v] = u;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> dep[maxn &lt;&lt; <span class="number">1</span>], fa[maxn &lt;&lt; <span class="number">1</span>][<span class="number">30</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dep[u] = dep[pre] + <span class="number">1</span>, fa[u][<span class="number">0</span>] = pre;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; i) &lt;= idx; i ++) fa[u][i] = fa[fa[u][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> v : G[u]) <span class="keyword">if</span>(v != pre) dfs(v, u);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[u] &lt; dep[v]) swap(u, v);</span><br><span class="line"><span class="keyword">int</span> d = dep[u] - dep[v];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; (<span class="number">1</span> &lt;&lt; i) &lt;= d; i ++) <span class="keyword">if</span>((<span class="number">1</span> &lt;&lt; i) &amp; d) u = fa[u][i];</span><br><span class="line"><span class="keyword">if</span>(u == v) <span class="keyword">return</span> u;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">22</span>; i &gt;= <span class="number">0</span>; i --) <span class="keyword">if</span>(fa[u][i] != fa[v][i]) u = fa[u][i], v = fa[v][i];</span><br><span class="line"><span class="keyword">return</span> fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m, q, u, v, w;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld%lld"</span>, &amp;n, &amp;m, &amp;k, &amp;q);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">es[i] = &#123; u, v, w &#125;;</span><br><span class="line">add(u, v, w);</span><br><span class="line">add(v, u, w);</span><br><span class="line">&#125;</span><br><span class="line">dij();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++) <span class="keyword">if</span>(bel[es[i].u] != bel[es[i].v]) es[i].w = es[i].w + dis[es[i].u] + dis[es[i].v];</span><br><span class="line">sort(es + <span class="number">1</span>, es + m + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * n; i ++) pre[i] = i;</span><br><span class="line">idx = k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u = bel[es[i].u], v = bel[es[i].v], w = es[i].w;</span><br><span class="line"><span class="keyword">int</span> fx = Find(u), fy = Find(v);</span><br><span class="line"><span class="keyword">if</span>(fx == fy) <span class="keyword">continue</span>;</span><br><span class="line">idx ++;</span><br><span class="line">merge(idx, fx);</span><br><span class="line">merge(idx, fy);</span><br><span class="line">val[idx] = w;</span><br><span class="line"><span class="keyword">if</span>(idx == <span class="number">2</span> * k - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">dfs(idx, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span>(q --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;u, &amp;v);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, val[LCA(u, v)] ? val[LCA(u, v)] : <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Graph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 缩点 </tag>
            
            <tag> 最小瓶颈路 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「CodeForces-1252L」Road Construction(二分图最大匹配)</title>
      <link href="/2019/11/01/Codeforces-1252L/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://codeforces.com/contest/1252/problem/L" target="_blank" rel="noopener">L - Road Construction</a><br>给定一棵基环树上的边，每一条边可以被指定类的工人维修，求能使树上点联通的维修方案</p></blockquote><a id="more"></a><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一棵基环树上的边，每一条边可以被指定类的工人维修，求能使树上点联通的维修方案。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>如果对于边和工人一一连边，边数可能达到$NK$，考虑简化边数。</p><p>对于每组边对应的类型数$M_i$，有$\sum_{i=1}^n M_i&lt;=10000$，所以让树边与工人类型数连边，并对每种类型的工人计数，连向汇点即可。</p><p>对于一棵基环树，要选$n-1$条边使其联通，假设其环上有k条边，必须选择“环上的k-1条边”和“环外的所有边”。dfs求出基环树上的环，存储“环外的边”为A集合，“环上的边”为B集合。</p><p>首先对起点向A集合中的点连边，判断是否全部匹配；再对起点向B集合中的点连边，判断总的流量是否$&gt;=n-1$即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">10000</span> + <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="keyword">int</span> pre[maxn], id[maxn];</span><br><span class="line"><span class="keyword">int</span> dfn[maxn], cnt;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; edge[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A, B;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; tag;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dfn[u] = ++ cnt;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> x : edge[u])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v = x.first;</span><br><span class="line"><span class="keyword">if</span>(v == pre[u]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(dfn[v])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dfn[v] &lt; dfn[u]) <span class="keyword">continue</span>;</span><br><span class="line">B.push_back(x.second);</span><br><span class="line"><span class="keyword">for</span>(; v != u; v = pre[v]) B.push_back(id[v]);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">pre[v] = u;</span><br><span class="line">id[v] = x.second;</span><br><span class="line">dfs(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_V = <span class="number">10000</span> + <span class="number">2000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> res[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Dinic</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span> <span class="keyword">int</span> to, cap, rev; &#125; ;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; G[MAX_V];</span><br><span class="line"><span class="keyword">int</span> level[MAX_V];</span><br><span class="line"><span class="keyword">int</span> iter[MAX_V];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to, <span class="keyword">int</span> cap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">G[from].push_back((edge)&#123;to, cap, (<span class="keyword">int</span>)G[to].size()&#125;);</span><br><span class="line">G[to].push_back((edge)&#123;from, <span class="number">0</span>, (<span class="keyword">int</span>)G[from].size() - <span class="number">1</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(level, <span class="number">-1</span>, <span class="keyword">sizeof</span> level);</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">level[s] = <span class="number">0</span>;</span><br><span class="line">que.push(s);</span><br><span class="line"><span class="keyword">while</span>(!que.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v = que.front(); que.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[v].size(); i ++)</span><br><span class="line">&#123;</span><br><span class="line">edge &amp;e = G[v][i];</span><br><span class="line"><span class="keyword">if</span>(e.cap &gt; <span class="number">0</span> &amp;&amp; level[e.to] &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">level[e.to] = level[v] + <span class="number">1</span>;</span><br><span class="line">que.push(e.to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> t, <span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(v == t) <span class="keyword">return</span> f;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> &amp;i = iter[v]; i &lt; G[v].size(); i ++)</span><br><span class="line">&#123;</span><br><span class="line">edge &amp;e = G[v][i];</span><br><span class="line"><span class="keyword">if</span>(e.cap &gt; <span class="number">0</span> &amp;&amp; level[v] &lt; level[e.to])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> d = dfs(e.to, t, min(f, e.cap));</span><br><span class="line"><span class="keyword">if</span>(d &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">e.cap -= d;</span><br><span class="line">G[e.to][e.rev].cap += d;</span><br><span class="line"><span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max_flow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> flow = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;;)</span><br><span class="line">&#123;</span><br><span class="line">bfs(s);</span><br><span class="line"><span class="keyword">if</span>(level[t] &lt; <span class="number">0</span>) <span class="keyword">return</span> flow;</span><br><span class="line"><span class="built_in">memset</span>(iter, <span class="number">0</span>, <span class="keyword">sizeof</span> iter);</span><br><span class="line"><span class="keyword">int</span> f;</span><br><span class="line"><span class="keyword">while</span>((f = dfs(s, t, inf)) &gt; <span class="number">0</span>) flow += f;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getans</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> e : G[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(e.to &lt;= n) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(e.cap == <span class="number">0</span>) res[i] = e.to - n;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;dinic;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; P[maxm];</span><br><span class="line"><span class="keyword">int</span> pos[maxm];</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; e[maxn];</span><br><span class="line"><span class="keyword">int</span> ans[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</span><br><span class="line"><span class="keyword">int</span> S = <span class="number">0</span>, T;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u, k, x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;k);</span><br><span class="line">edge[i].push_back(&#123;u, i&#125;);</span><br><span class="line">edge[u].push_back(&#123;i, i&#125;);</span><br><span class="line">e[i] = make_pair(i, u);</span><br><span class="line"><span class="keyword">while</span>(k --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line"><span class="keyword">if</span>(!tag[x]) tag[x] = ++ tot;</span><br><span class="line">dinic.add(i, tag[x] + n, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> v : B) vis[v] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="keyword">if</span>(!vis[i]) A.push_back(i);</span><br><span class="line">T = n + tot + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line"><span class="keyword">if</span>(!tag[x]) <span class="keyword">continue</span>;</span><br><span class="line">P[tag[x]].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; i ++) dinic.add(n + i, T, (<span class="keyword">int</span>)P[i].size());</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> x : A) dinic.add(S, x, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> cur = dinic.max_flow(S, T);</span><br><span class="line"><span class="keyword">if</span>(cur &lt; A.size()) <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> x : B) dinic.add(S, x, <span class="number">1</span>);</span><br><span class="line">cur += dinic.max_flow(S, T);</span><br><span class="line"><span class="keyword">if</span>(cur &lt; n - <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">dinic.getans();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(pos[res[i]] == P[res[i]].size()) <span class="keyword">continue</span>;</span><br><span class="line">ans[P[res[i]][pos[res[i]]]] = i;</span><br><span class="line">pos[res[i]] ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i ++) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ans[i] == <span class="number">0</span>) <span class="built_in">puts</span>(<span class="string">"0 0"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, e[ans[i]].first, e[ans[i]].second);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Graph </category>
          
          <category> Network Flow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dinic </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「BZOJ-3926」[Zjoi2015]诸神眷顾的幻想乡(后缀自动机)</title>
      <link href="/2019/10/31/BZOJ-3926/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3926" target="_blank" rel="noopener">BZOJ3122-[Zjoi2015]诸神眷顾的幻想乡</a></p></blockquote><a id="more"></a><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>写了cls的题当然要写题解辣！</p><p>题意相当于给了你一棵点数为$n$的树，每个点上有一个(a-j)的字符，求这颗树上所有本质不同字符串的个数（一条路径上起点与终点相反的两个串视为不同）。</p><p>由于所给的树叶子节点不超过20个，考虑以每一个叶子节点为起点进行dfs，建立广义后缀自动机，即在父节点的状态后加入子节点，然后求本质不同的字符串个数即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> col[maxn], in[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> last = <span class="number">1</span>, cnt = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> ch[maxn &lt;&lt; <span class="number">1</span>][<span class="number">10</span>], fa[maxn &lt;&lt; <span class="number">1</span>], len[maxn &lt;&lt; <span class="number">1</span>], pos[maxn];</span><br><span class="line"><span class="keyword">int</span> sz[maxn &lt;&lt; <span class="number">1</span>], a[maxn &lt;&lt; <span class="number">1</span>], c[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> p = last, np = ++ cnt;</span><br><span class="line">last = np, len[np] = len[p] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(; p &amp;&amp; !ch[p][c]; p = fa[p]) ch[p][c] = np;</span><br><span class="line"><span class="keyword">if</span>(!p) fa[np] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> q = ch[p][c];</span><br><span class="line"><span class="keyword">if</span>(len[p] + <span class="number">1</span> == len[q]) fa[np] = q;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> nq = ++ cnt;</span><br><span class="line">len[nq] = len[p] + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(ch[nq], ch[q], <span class="keyword">sizeof</span> ch[q]);</span><br><span class="line">fa[nq] = fa[q], fa[q] = fa[np] = nq;</span><br><span class="line"><span class="keyword">for</span>(; ch[p][c] == q; p = fa[p]) ch[p][c] = nq;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> np;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pre, <span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">last = p;</span><br><span class="line"><span class="keyword">int</span> q = ins(col[u]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[u].size(); i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v = G[u][i];</span><br><span class="line"><span class="keyword">if</span>(v == pre) <span class="keyword">continue</span>;</span><br><span class="line">dfs(v, u, q);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;c);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;col[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">G[u].push_back(v), G[v].push_back(u);</span><br><span class="line">in[u] ++; in[v] ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="keyword">if</span>(in[i] == <span class="number">1</span>) dfs(i, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i ++) ans += len[i] - len[fa[i]];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> String </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SAM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「CodeForces-1250E」The Coronation(2-SAT)</title>
      <link href="/2019/10/29/Codeforces-1250E/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="https://codeforces.com/contest/1250/problem/E" target="_blank" rel="noopener">「CodeForces-1250E」The Coronation</a></p><p>给定一系列01串，求翻转次数最小的情况下，令任意两个串有至少k位相同的合法方案</p></blockquote><a id="more"></a><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定$n$个长度为$m$的01串，可以对任意串进行翻转，求满足任意两个串至少有k位相同的翻转方案，并使翻转次数最小。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>2-SAT问题。</p><p>设串不翻转为0，翻转为1，则对于任意两个串都有如下四种情况：</p><ol><li>a,b和a,rev(b)相同位数均大于等于k，此时a,b相互之间没有限制；</li><li>a,b相同之间位数大于等于k，a,rev(b)之间相同位数小于k，此时a,b必须相同，即XOR(a,b)=0;</li><li>a,b相同之间位数小于等于k，a,rev(b)之间相同位数大于k，此时a,b必须相反，即XOR(a,b)=1;</li><li>a,b和a,rev(b)相同位数均小于k，即无论怎么翻转都不能使a,b两者匹配；</li></ol><p>一旦出现4，整组情况一定是无解的。</p><p>相当于原串所代表的点形成若干个联通块，每一个联通块中的元素颜色是相互联系的（即如果翻转一个，必须翻转该块中的所有元素）。</p><p>建完图后对点$i$和点$i+n$进行dfs，因为图的两侧完全对称，一定会搜出一组点完全相反的两种染色方案，只要选择翻转次数较小的那一组即可。注意在dfs时需要判奇环，如果出现奇环则无解。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span> + <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line">ll id[maxn];</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> res[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">getid</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i ++)<span class="keyword">if</span>(s[i] - <span class="string">'0'</span>) res += (<span class="number">1l</span>l &lt;&lt; (len - i - <span class="number">1</span>));</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">check</span><span class="params">(ll a, ll b)</span> </span>&#123; <span class="keyword">return</span> m - __builtin_popcountll(a ^ b); &#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; g[a].push_back(b);  &#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">XOR</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(c == <span class="number">0</span>) add(a, b), add(a + n, b + n), add(b, a), add(b + n, a + n);</span><br><span class="line"><span class="keyword">else</span> add(a, b + n), add(a + n, b), add(b, a + n), add(b + n, a);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= (n &lt;&lt; <span class="number">1</span>); i ++) vis[i] = res[i] =  <span class="number">0</span>, g[i].clear();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vis[u] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">res.push_back(u);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> v : g[u]) <span class="keyword">if</span>(!vis[v]) t += dfs(v, res);</span><br><span class="line"><span class="keyword">return</span> t + (u &gt; n);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> _;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;_);</span><br><span class="line"><span class="keyword">while</span>(_ --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">id[i] = getid(s, m);</span><br><span class="line">reverse(s, s + m);</span><br><span class="line">id[i + n] = getid(s, m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(check(id[i], id[j]) &lt; k &amp;&amp; check(id[i], id[j + n]) &lt; k) flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(check(id[i], id[j]) &gt;= k &amp;&amp; check(id[i], id[j + n]) &lt; k) XOR(i, j, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(check(id[i], id[j + n]) &gt;= k &amp;&amp; check(id[i], id[j]) &lt; k) XOR(i, j, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="keyword">if</span>(!vis[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A, B;</span><br><span class="line"><span class="keyword">int</span> a = dfs(i, A);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> j : A) <span class="keyword">if</span>(j == i + n) flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">int</span> b = dfs(i + n, B);</span><br><span class="line"><span class="keyword">if</span>(a &lt; b) &#123; <span class="keyword">for</span>(<span class="keyword">auto</span> i : A) <span class="keyword">if</span>(i &gt; n) ans.push_back(i - n); &#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="keyword">for</span>(<span class="keyword">auto</span> i : B) <span class="keyword">if</span>(i &gt; n) ans.push_back(i - n); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flag) &#123; <span class="built_in">printf</span>(<span class="string">"-1\n"</span>); <span class="keyword">continue</span>; &#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans.size());</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i : ans) <span class="built_in">printf</span>(<span class="string">"%d "</span>, i);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Graph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2-SAT </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「2018 EC-Final」J - Philosophical … Balance(SAM+纳什均衡)</title>
      <link href="/2019/10/15/GYM-102056/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="https://codeforces.com/gym/102056/problem/J" target="_blank" rel="noopener">「 2018-2019 ACM-ICPC, Asia East Continent Finals 」J - Philosophical … Balance</a></p></blockquote><a id="more"></a><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给一个字符串，先手给串的每一个位置赋一个值$p_i$并保证$p_i \ge 0, \sum_{i=1}^n p_i = 1$，后手选择一个子串$j$。有式子$\sum_{k=1}^n p_k \mathrm{lcp}(s_k,s_j)$，先手想使其尽可能大，后手想使其尽可能小。先手要如何操作才能使这个值最大，求这个最大值。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>看了<a href="https://www.cnblogs.com/mangoyang/p/10476902.html" target="_blank" rel="noopener">这篇题解</a>，网友是真的牛逼（战术后仰）</p><p>将原串反向，建立后缀自动机。<br>对于反串的后缀树，此时后手如果选择某个子树$u$中选择串$s_j$，在$p$固定的情况下要使lcp最小，显然最优解为选择子树的根。</p><p>在后缀自动机的suffix link树中，如果当前state为np节点，则直接取当前节点的len作为答案。否则需要合并若干子树的答案，答案为一个纳什均衡的模型，即每个子节点的贡献相等。那么该点的贡献为$len[u]+x$，其中$len[u]$一定会取到，$x$为纳什均衡下可以取到的最大值，推一下子树的$x$得到$x = \frac{1}{\sum \frac{1}{f_i}}$，那么在suffix link树上dfs即可求出答案。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SuffixAutomation</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> last, cnt;</span><br><span class="line"><span class="keyword">int</span> ch[maxn &lt;&lt; <span class="number">1</span>][<span class="number">26</span>], fa[maxn &lt;&lt; <span class="number">1</span>], len[maxn &lt;&lt; <span class="number">1</span>], pos[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> sz[maxn &lt;&lt; <span class="number">1</span>], a[maxn &lt;&lt; <span class="number">1</span>], c[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i ++) g[i].clear();</span><br><span class="line">    last = cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(ch[<span class="number">1</span>], <span class="number">0</span>, <span class="keyword">sizeof</span> ch[<span class="number">1</span>]);</span><br><span class="line">    fa[<span class="number">1</span>] = len[<span class="number">1</span>] = sz[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="keyword">inline</span> <span class="title">newnode</span><span class="params">(<span class="keyword">int</span> idx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">++cnt;</span><br><span class="line"><span class="built_in">memset</span>(ch[cnt], <span class="number">0</span>, <span class="keyword">sizeof</span> ch[cnt]);</span><br><span class="line">fa[cnt] = len[cnt] = sz[cnt] = <span class="number">0</span>;</span><br><span class="line">pos[cnt] = idx;</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> p = last , np = newnode(pos[last] + <span class="number">1</span>);</span><br><span class="line">last = np, len[np] = len[p] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(; p &amp;&amp; !ch[p][c]; p = fa[p]) ch[p][c] = np;</span><br><span class="line"><span class="keyword">if</span>(!p) fa[np] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> q = ch[p][c];</span><br><span class="line"><span class="keyword">if</span>(len[p] + <span class="number">1</span> == len[q]) fa[np] = q;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> nq = newnode(pos[p] + <span class="number">1</span>);</span><br><span class="line">len[nq] = len[p] + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(ch[nq], ch[q], <span class="keyword">sizeof</span> ch[q]);</span><br><span class="line">fa[nq] = fa[q], fa[q] = fa[np] = nq;</span><br><span class="line"><span class="keyword">for</span>(; ch[p][c] == q; p = fa[p]) ch[p][c] = nq;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        sz[np] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">suffixTree</span><span class="params">()</span> </span>&#123; <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= cnt; i ++) g[fa[i]].push_back(i); &#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(sz[u]) <span class="keyword">return</span> l;</span><br><span class="line">    <span class="keyword">double</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v : g[u]) res += <span class="number">1.0</span> / dfs(v, len[v] - len[u]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.0</span> / res + l;</span><br><span class="line">&#125;</span><br><span class="line">&#125;sam;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;_);</span><br><span class="line">    <span class="keyword">while</span>(_ --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">        sam.init();</span><br><span class="line">        <span class="keyword">int</span> n = <span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i --) sam.ins(s[i] - <span class="string">'a'</span>);</span><br><span class="line">        sam.suffixTree();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.10f\n"</span>, sam.dfs(<span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> String </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博弈 </tag>
            
            <tag> 后缀自动机 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「UOJ-171」【WC2016】挑战NPC(一般图匹配带花树)</title>
      <link href="/2019/10/15/UOJ-171/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://uoj.ac/problem/171" target="_blank" rel="noopener">「UOJ-171」【WC2016】挑战NPC</a></p></blockquote><a id="more"></a><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>有$n$个球和$m$个筐，每个球可以放入与其连边的某个筐，每个筐最多放三个球。将所有球放入筐中，筐中不超过一个球时称为「半满」，需要使半满的框数最多，并输出其中一种方案数。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>把一个筐拆成三个点，三个点之间两两连边。将可以放入某个框中的球向框的三个点连边，跑一遍带花树，$n-maxmatch$即为最大值。</p><p>因为对于某一个筐的三个点来说：球数为0时最大匹配为1，球数为1时最大匹配为2，球数为2和3时最大匹配为2。</p><p>那么对于这个筐，它对答案的贡献即为（最大匹配数-球数），输出方案即可。</p><p>注意求解时要先匹配球，否则会先匹配同一个筐与筐之间的连边，这样求出的方案就不对了orz。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; edge[maxn];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, pre[maxn], type[maxn], link[maxn], nex[maxn], vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[u].push_back(v);</span><br><span class="line">    edge[v].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == pre[x] ? x : pre[x] = Find(pre[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">combine</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> lca)</span>    <span class="comment">//如果找到奇环，对当前点x和找到的</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (x != lca)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = link[x], v = nex[u];</span><br><span class="line">        <span class="keyword">if</span> (Find(v) != lca) nex[v] = u;</span><br><span class="line">        <span class="keyword">if</span> (type[u] == <span class="number">1</span>) type[u] = <span class="number">2</span>, que.push(u);</span><br><span class="line">        pre[Find(x)] = Find(u);</span><br><span class="line">        pre[Find(u)] = Find(v);</span><br><span class="line">        x = v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contrack</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lca = x;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i; i = nex[link[i]])</span><br><span class="line">    &#123;</span><br><span class="line">        i = Find(i);</span><br><span class="line">        vis[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = y; i; i = nex[link[i]])</span><br><span class="line">    &#123;</span><br><span class="line">        i = Find(i);</span><br><span class="line">        <span class="keyword">if</span> (vis[i])</span><br><span class="line">        &#123;</span><br><span class="line">            lca = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (lca != Find(x)) nex[x] = y;</span><br><span class="line">    <span class="keyword">if</span> (lca != Find(y)) nex[y] = x;</span><br><span class="line">    combine(x, lca);</span><br><span class="line">    combine(y, lca);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(type, <span class="number">0</span>, <span class="keyword">sizeof</span>(type));</span><br><span class="line">    <span class="built_in">memset</span>(nex, <span class="number">0</span>, <span class="keyword">sizeof</span>(nex));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) pre[i] = i;</span><br><span class="line">    <span class="keyword">while</span> (!que.empty()) que.pop();</span><br><span class="line">    que.push(s);</span><br><span class="line">    type[s] = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (!que.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x = que.front();</span><br><span class="line">        que.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; edge[x].size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> y = edge[x][i];</span><br><span class="line">            <span class="keyword">if</span> (Find(x) == Find(y) || link[x] == y || type[y] == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (type[y] == <span class="number">2</span>) contrack(x, y);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (link[y])</span><br><span class="line">            &#123;</span><br><span class="line">                nex[y] = x;</span><br><span class="line">                type[y] = <span class="number">1</span>;</span><br><span class="line">                type[link[y]] = <span class="number">2</span>;</span><br><span class="line">                que.push(link[y]);</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                nex[y] = x;</span><br><span class="line">                <span class="keyword">int</span> pos = y, u = nex[pos], v = link[u];</span><br><span class="line">                <span class="keyword">while</span> (pos)</span><br><span class="line">                &#123;</span><br><span class="line">                    link[pos] = u;</span><br><span class="line">                    link[u] = pos;</span><br><span class="line">                    pos = v;</span><br><span class="line">                    u = nex[pos];</span><br><span class="line">                    v = link[u];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxmatch</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i --) <span class="keyword">if</span> (!link[i]) bfs(i);</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i --) <span class="keyword">if</span> (link[i]) ans++;</span><br><span class="line">    <span class="keyword">return</span> ans / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) edge[i].clear();</span><br><span class="line">    <span class="built_in">memset</span>(link, <span class="number">0</span>, <span class="keyword">sizeof</span>(link));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;_);</span><br><span class="line">    <span class="keyword">while</span>(_ --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> N, m, e;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;N, &amp;m, &amp;e);</span><br><span class="line">        n = <span class="number">3</span> * m + N;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span> * m; i += <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            add(i, i + <span class="number">1</span>);</span><br><span class="line">            add(i, i + <span class="number">2</span>);</span><br><span class="line">            add(i + <span class="number">1</span>, i + <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="keyword">while</span>(e --)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">            add(u + <span class="number">3</span> * m, (v - <span class="number">1</span>) * <span class="number">3</span> + <span class="number">1</span>);</span><br><span class="line">            add(u + <span class="number">3</span> * m, (v - <span class="number">1</span>) * <span class="number">3</span> + <span class="number">2</span>);</span><br><span class="line">            add(u + <span class="number">3</span> * m, (v - <span class="number">1</span>) * <span class="number">3</span> + <span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, maxmatch() - N);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> + <span class="number">3</span> * m; i &lt;= n; i ++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, (link[i] - <span class="number">1</span>) / <span class="number">3</span> + <span class="number">1</span>, <span class="string">" \n"</span>[i == n]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Graph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 一般图匹配 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「CodeForces-919E」Congruence Equation(费马小定理)</title>
      <link href="/2019/08/29/Codeforces-919E/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="https://codeforces.com/contest/919/problem/E" target="_blank" rel="noopener">「CodeForces-919E」Congruence Equation</a></p><p>给定a,b,n,p，求关于n的方程n⋅a^n≡b(mod p)在[1,x]中整数解的数量</p></blockquote><a id="more"></a><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>对原式$k \cdot a^k \equiv b \quad (\textrm{mod}\;p)$，考虑消去指数。由费马小定理，对质数$p$，有$a^{(p-1)} \equiv 1 \quad (\textrm{mod}\;p)$。</p><p>令$k=x\cdot(p-1)+y$，则原式转化为</p><p>$$(x\cdot(p-1)+y)\cdot a^{x\cdot(p-1)+y} \equiv b \quad (\textrm{mod}\;p)$$</p><p>$$(x\cdot(p-1)+y)\cdot a^{y} \equiv b \quad (\textrm{mod}\;p)$$</p><p>$$x\cdot(p-1)+y \equiv b \cdot a^{-y}\quad (\textrm{mod}\ p)$$</p><p>$$x\equiv y-b \cdot a^{-y}\quad (\textrm{mod}\ p)$$</p><p>问题转化为求$x\equiv y-b \cdot a^{-y}\quad (\textrm{mod}\ p)$在$(x\cdot(p-1)+y)∈[1,n]$中解的个数。</p><p>枚举$y∈[0,p-2]$，计算$x$的个数，其中若$x,y$均为0时$n=0$，需要减去。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line">ll a, b, n, p;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">inv</span><span class="params">(ll a, ll n = p - <span class="number">2</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(; n; n &gt;&gt;= <span class="number">1</span>, (a *= a) %= p) <span class="keyword">if</span>(n &amp; <span class="number">1</span>) (res *= a) %= p;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; p &gt;&gt; n;</span><br><span class="line">    ll inva = inv(a), res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; p - <span class="number">1</span>; y ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// x = y - b * a ^ (-y) + k * p</span></span><br><span class="line">        ll x = (y - b + p) % p;</span><br><span class="line">        <span class="keyword">if</span>(y &lt;= n &amp;&amp; (n - y) / (p - <span class="number">1</span>) &gt;= x)</span><br><span class="line">        &#123;</span><br><span class="line">            res += ((n - y) / (p - <span class="number">1</span>) - x) / p + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(x == <span class="number">0</span> &amp;&amp; y == <span class="number">0</span>) res --;</span><br><span class="line">        &#125;</span><br><span class="line">        (b *= inva) %= p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 费马小定理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「UVALive-7264」Kejin Game(最小割)</title>
      <link href="/2019/08/22/UVALive-7264/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=5276" target="_blank" rel="noopener">「LA-7264」Kejin Game</a><br>最小割模型，到达给定点所需的最小花费</p></blockquote><a id="more"></a><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>游戏内有一个技能树（为DAG），每个技能有一些前置技能，必须先学习完前置技能才能学习当前技能。</p><p>你是一个氪金玩家。你可以选择氪金跳过所有前置技能直接学习某个技能；或者氪金切断A到B的边，使技能A不再是B的前置技能（也就意味着学习技能B不再需要先学技能A），并且在学习完所有仍然存在的前置技能（可能为0）后，花费正常的价格学习当前技能。</p><p>求习得某个技能$S$所需的最小花费。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>对于技能$i$，有两种方式习得该技能：</p><ol><li>直接氪金习得该技能</li><li>切断一些前置技能的边，习得剩下的前置技能(同样可以通过1,2两种方式)，并且花费正常价格学习当前技能</li></ol><p>考虑拆点，令点$i+n$为学习技能$i$的最小花费。</p><p>对$i$和$i+n$连边，容量为氪金学习该技能的花费；</p><p>对$S$和$i$连边，容量为正常价格学习该技能的花费；</p><p>对$j+n$和$i$连边，其中$j$为$i$的前置技能，容量为切断$j-i$的花费。</p><p>那么$S$到$i+n$的最小割即为”氪金直接学习当前技能“与”切断一部分前置技能，学习剩下的前置技能，正常学习当前技能“的花费当中的较小值。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_V = <span class="number">1000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用于表示边的结构体（终点，流量，反向边）</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> to, cap, rev;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; G[MAX_V];<span class="comment">//图的邻接表表示</span></span><br><span class="line"><span class="keyword">int</span> level[MAX_V];<span class="comment">//顶点到源点的距离标号</span></span><br><span class="line"><span class="keyword">int</span> iter[MAX_V];<span class="comment">//当前弧</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to, <span class="keyword">int</span> cap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">G[from].push_back((edge)&#123;to, cap, G[to].size()&#125;);</span><br><span class="line">G[to].push_back((edge)&#123;from, <span class="number">0</span>, G[from].size() - <span class="number">1</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算从源点出发的距离标号</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(level, <span class="number">-1</span>, <span class="keyword">sizeof</span>(level));</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">level[s] = <span class="number">0</span>;</span><br><span class="line">que.push(s);</span><br><span class="line"><span class="keyword">while</span>(!que.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v = que.front(); que.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[v].size(); i++)</span><br><span class="line">&#123;</span><br><span class="line">edge &amp;e = G[v][i];</span><br><span class="line"><span class="keyword">if</span>(e.cap &gt; <span class="number">0</span> &amp;&amp; level[e.to] &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">level[e.to] = level[v] + <span class="number">1</span>;</span><br><span class="line">que.push(e.to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过DFS寻找增广路</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> t, <span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(v == t) <span class="keyword">return</span> f;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> &amp;i = iter[v]; i&lt;G[v].size(); i++)</span><br><span class="line">&#123;</span><br><span class="line">edge &amp;e = G[v][i];</span><br><span class="line"><span class="keyword">if</span>(e.cap &gt; <span class="number">0</span> &amp;&amp; level[v] &lt; level[e.to])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> d = dfs(e.to, t, min(f, e.cap));</span><br><span class="line"><span class="keyword">if</span>(d &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">e.cap -= d;</span><br><span class="line">G[e.to][e.rev].cap += d;</span><br><span class="line"><span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求解从s到t的最大流</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max_flow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> flow = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;;)</span><br><span class="line">&#123;</span><br><span class="line">bfs(s);</span><br><span class="line"><span class="keyword">if</span>(level[t] &lt; <span class="number">0</span>) <span class="keyword">return</span> flow;</span><br><span class="line"><span class="built_in">memset</span>(iter, <span class="number">0</span>, <span class="keyword">sizeof</span>(iter));</span><br><span class="line"><span class="keyword">int</span> f;</span><br><span class="line"><span class="keyword">while</span>((f = dfs(s,t,INF)) &gt; <span class="number">0</span>) flow += f;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _, n, m, p, a, b, c;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;_);</span><br><span class="line">    <span class="keyword">while</span>(_ --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;p);</span><br><span class="line">        <span class="keyword">int</span> S = <span class="number">0</span>, T = <span class="number">2</span> * n + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= T; i ++) G[i].clear();</span><br><span class="line">        <span class="keyword">while</span>(m --)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">            add(a + n, b, c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;c), add(S, i, c);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;c), add(i, i + n, c);</span><br><span class="line">        add(p + n, T, INF);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, max_flow(S, T));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Graph </category>
          
          <category> Network Flow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最小割 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「HDU-6661」Acesrc and String Theory (后缀数组)</title>
      <link href="/2019/08/21/HDU-6661/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6661" target="_blank" rel="noopener">「HDU-6661」Acesrc and String Theory</a><br>给定一个串，问由k个循环节组成的子串数量</p></blockquote><a id="more"></a><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>考虑找到一个由循环节构成的联通块。枚举循环节长度$i∈(1,n/2)$，找到区间$[L,R]$为某个循环节长度为$i$的极大循环节（向右能够扩展的长度小于$i$），求得$extR=lcp(s(L),s(R+1))$为该串可以向右扩展的最大长度，并翻转原串求出向左扩展的最大长度$extL=lcp(revs(n+1-R), revs(n+1-L+1))$，那么求出的块为$[l,r]$为$[L-extL,R+extR]$。当前块对答案的贡献为“长度为$r-l+1$的串中长度为$k×i$的子串个数”，即$(r-l+1)-k×i+1$。</p><p>当$k=1​$时需要特判。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SA</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> s[maxn];</span><br><span class="line">    <span class="keyword">int</span> sa[maxn], t[maxn], t2[maxn], c[maxn], n;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build_sa</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> *x = t, *y = t2;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) c[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) c[x[i] = s[i]]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) c[i] += c[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) sa[--c[x[i]]] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = n - k; i &lt; n; i++) y[p++] = i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">if</span>(sa[i] &gt;= k) y[p++] = sa[i] - k;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) c[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) c[x[y[i]]]++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) c[i] += c[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) sa[--c[x[y[i]]]] = y[i];</span><br><span class="line">            swap(x, y);</span><br><span class="line">            p = <span class="number">1</span>; x[sa[<span class="number">0</span>]] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">                x[sa[i]] = y[sa[i - <span class="number">1</span>]] == y[sa[i]] &amp;&amp; y[sa[i - <span class="number">1</span>] + k] == y[sa[i] + k] ? p - <span class="number">1</span> : p++;</span><br><span class="line">            <span class="keyword">if</span>(p &gt;= n) <span class="keyword">break</span>;</span><br><span class="line">            m = p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> rk[maxn], height[maxn];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getHeight</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) rk[sa[i]] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, k = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(k) k--;</span><br><span class="line">            <span class="keyword">int</span> j = sa[rk[i] - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">while</span>(s[i + k] == s[j + k]) k++;</span><br><span class="line">            height[rk[i]] = k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt; <span class="number">0</span>; i --) rk[i] = rk[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> dp[maxn][<span class="number">21</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">RMQ</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) dp[i][<span class="number">0</span>] = height[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; j) &lt; maxn; j ++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= n; i ++)</span><br><span class="line">                dp[i][j] = min(dp[i][j - <span class="number">1</span>], dp[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((<span class="number">1</span> &lt;&lt; (k + <span class="number">1</span>)) &lt;= r - l + <span class="number">1</span>) k ++;</span><br><span class="line">        <span class="keyword">return</span> min(dp[l][k], dp[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lcp</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x = rk[x], y = rk[y];</span><br><span class="line">        <span class="keyword">if</span>(x &gt; y) swap(x, y);</span><br><span class="line">        <span class="keyword">return</span> query(x + <span class="number">1</span>, y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;A, B;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> exR = A.lcp(l, r + <span class="number">1</span>), exL = B.lcp(n + <span class="number">1</span> - r, n + <span class="number">1</span> - l + <span class="number">1</span>);</span><br><span class="line">    l -= exL, r += exR;</span><br><span class="line">    <span class="keyword">return</span> max(<span class="number">0</span>, r - l + <span class="number">1</span> - p * k + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;_);</span><br><span class="line">    <span class="keyword">while</span>(_ --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%s"</span>, &amp;k, A.s);</span><br><span class="line">        n = <span class="built_in">strlen</span>(A.s);</span><br><span class="line">        <span class="keyword">if</span>(k == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, <span class="number">1l</span>l * n * (n + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        reverse_copy(A.s, A.s + n, B.s); A.n = B.n = n;</span><br><span class="line">        A.build_sa(n + <span class="number">1</span>, <span class="number">130</span>), B.build_sa(n + <span class="number">1</span>, <span class="number">130</span>);</span><br><span class="line">        A.getHeight(), B.getHeight();</span><br><span class="line">        A.RMQ(), B.RMQ();</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n / <span class="number">2</span>; i ++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> last = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j += i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(A.lcp(last, j) &gt;= i) <span class="keyword">continue</span>;</span><br><span class="line">                ans += work(last, j - <span class="number">1</span>, i);</span><br><span class="line">                <span class="keyword">if</span>(j + i - <span class="number">1</span> &lt;= n) last = j;</span><br><span class="line">                <span class="keyword">else</span> last = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(last) ans += work(last, n, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> String </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后缀数组 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「LightOJ-1428」Melody Comparison(后缀数组)</title>
      <link href="/2019/08/14/Lightoj-1428/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://lightoj.com/volume_showproblem.php?problem=1428" target="_blank" rel="noopener">「LightOJ-1428」Melody Comparison</a><br>给定串A和串B，求串A本质不同且不包含串B的子串个数。</p></blockquote><a id="more"></a><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>KMP预处理出串A的每个后缀向右延伸的最远的不包含串B的位置<code>rmax[i]</code>。那么对于后缀<code>sa[i]</code>，它的不包含串B的前缀个数为<code>rmax[sa[i]]</code>个。因为要求本质不同的子串个数，需要减去当前后缀和上一个后缀相同的前缀个数<code>height[i]</code>。答案即为$ans=\sum_{i=1}^nrmax[sa[i]]-min(height[i],rmax[i])$。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e4</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[maxn], b[maxn];</span><br><span class="line"><span class="keyword">int</span> sa[maxn], t[maxn], t2[maxn], c[maxn], n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_sa</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *x = t, *y = t2;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) c[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) c[x[i] = s[i]]++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) c[i] += c[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) sa[--c[x[i]]] = i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n - k; i &lt; n; i++) y[p++] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">if</span>(sa[i] &gt;= k) y[p++] = sa[i] - k;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) c[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) c[x[y[i]]]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) c[i] += c[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) sa[--c[x[y[i]]]] = y[i];</span><br><span class="line">        swap(x, y);</span><br><span class="line">        p = <span class="number">1</span>; x[sa[<span class="number">0</span>]] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">            x[sa[i]] = y[sa[i - <span class="number">1</span>]] == y[sa[i]] &amp;&amp; y[sa[i - <span class="number">1</span>] + k] == y[sa[i] + k] ? p - <span class="number">1</span> : p++;</span><br><span class="line">        <span class="keyword">if</span>(p &gt;= n) <span class="keyword">break</span>;</span><br><span class="line">        m = p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rk[maxn], height[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getHeight</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) rk[sa[i]] = i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, k = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k) k--;</span><br><span class="line">        <span class="keyword">int</span> j = sa[rk[i] - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span>(s[i + k] == s[j + k]) k++;</span><br><span class="line">        height[rk[i]] = k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--) ++sa[i], rk[i] = rk[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rmax[maxn], nex[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getNext</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">strlen</span>(b), i = <span class="number">0</span>, j = <span class="number">-1</span>;</span><br><span class="line">    nex[i] = j;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(j == <span class="number">-1</span> || b[i] == b[j]) nex[++ i] = ++ j;</span><br><span class="line">        <span class="keyword">else</span> j = nex[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KMP</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">strlen</span>(s), m = <span class="built_in">strlen</span>(b), i = <span class="number">0</span>, j = <span class="number">0</span>, pos = <span class="number">1</span>;</span><br><span class="line">    getNext();</span><br><span class="line">    <span class="keyword">while</span>(i &lt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(j == <span class="number">-1</span> || s[i] == b[j]) i ++, j ++;</span><br><span class="line">        <span class="keyword">else</span> j = nex[j];</span><br><span class="line">        <span class="keyword">if</span>(j == m)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> p = pos; p &lt;= i - m + <span class="number">1</span>; p ++) rmax[p] = i - p;</span><br><span class="line">            j = nex[j], pos = i - m + <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(pos &lt;= n) rmax[pos] = n - pos + <span class="number">1</span>, pos ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> _ = <span class="number">1</span>; _ &lt;= T; _ ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s%s"</span>, s, b);</span><br><span class="line">        n = <span class="built_in">strlen</span>(s);</span><br><span class="line">        KMP();</span><br><span class="line">        build_sa(n + <span class="number">1</span>, <span class="number">130</span>);</span><br><span class="line">        getHeight();</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) res += rmax[sa[i]] - min(rmax[sa[i]], height[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: %lld\n"</span>, _, res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> String </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KMP </tag>
            
            <tag> 后缀数组 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「BZOJ-3105」[cqoi2013]新Nim游戏(博弈+线性基)</title>
      <link href="/2019/08/03/BZOJ-3105/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3105" target="_blank" rel="noopener">BZOJ3105-[cqoi2013]新Nim游戏</a><br>有n堆火柴堆，先手和后手可以依次取走若干堆火柴堆（不能全部取走），然后进行Nim游戏，先手如何取才能保证必胜，并在保证胜利的情况下使他取的火柴总数最小。</p></blockquote><a id="more"></a><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><blockquote><p>标准的Nim游戏中，只要是所有火柴堆的火柴数目异或值为0，那么先手必败，否则先手必胜。</p></blockquote><p>在取完前两轮后这个游戏就是个标准的Nim博弈。那么在先手取完后，后手一定会取走若干个火柴堆，使剩下的异或和为0。</p><p>那么对于先手，应该取走若干个火柴堆，使剩下的火柴堆不存在异或和为0的子集，也就是使剩下的火柴堆成为一个线性极大无关组。</p><p>又因为要使先手所取的火柴总数最小，我们把火柴堆从大到小排序，依次插入线性基，不能插入线性基的元素就是先手要取的火柴堆。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> d[<span class="number">32</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">31</span>; i &gt;= <span class="number">0</span>; i --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((x &gt;&gt; i) &amp; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(d[i]) x ^= d[i];</span><br><span class="line">            <span class="keyword">else</span> &#123; d[i] = x; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, a[<span class="number">105</span>];</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    sort(a, a + n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i --) <span class="keyword">if</span>(!ins(a[i])) res += a[i];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性基 </tag>
            
            <tag> 博弈 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「BZOJ-4568」[Scoi2016]幸运数字(倍增+线性基)</title>
      <link href="/2019/08/02/BZOJ-4568/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4568" target="_blank" rel="noopener">BZOJ4568-[Scoi2016]幸运数字</a><br>在树上路径(u,v)之间选择一些点的权值，使异或和最大</p></blockquote><a id="more"></a><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>对于树上的每一个点，维护log(n)个线性基，L[u][i]表示从它自身到它上跳$2^i$倍祖先的线性基，在对LCA做预处理的时候预处理出单个节点的倍增线性基。查询LCA时每次上跳都对答案插入当前节点上跳$2^i$倍的线性基，最后要单独插入点$a[v]$的值。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e4</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; edge[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, dep[maxn], fa[maxn][<span class="number">20</span>]; ll a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinearBasis</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ll d[<span class="number">64</span>], tot;</span><br><span class="line"></span><br><span class="line">    LinearBasis()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="keyword">sizeof</span> d);</span><br><span class="line">        tot = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">63</span>; i &gt;= <span class="number">0</span>; i --) <span class="keyword">if</span>((x &gt;&gt; i) &amp; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(d[i]) x ^= d[i];</span><br><span class="line">            <span class="keyword">else</span> &#123; d[i] = x; tot ++; <span class="keyword">return</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ll <span class="title">max_xor</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">63</span>; i &gt;= <span class="number">0</span>; i --) <span class="keyword">if</span>((ans ^ d[i]) &gt; ans) ans ^= d[i];</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(LinearBasis &amp;a)</span> </span>&#123; <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">63</span>; i &gt;= <span class="number">0</span>; i --) <span class="keyword">if</span>(a.d[i]) ins(a.d[i]); &#125;</span><br><span class="line">&#125;L[maxn][<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="function">LinearBasis <span class="title">merge</span><span class="params">(<span class="keyword">const</span> LinearBasis &amp;a, <span class="keyword">const</span> LinearBasis &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LinearBasis res = a;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">63</span>; i &gt;= <span class="number">0</span>; i --) <span class="keyword">if</span>(b.d[i]) res.ins(b.d[i]);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dep[u] = dep[pre] + <span class="number">1</span>, fa[u][<span class="number">0</span>] = pre;</span><br><span class="line">    L[u][<span class="number">0</span>].ins(a[pre]); L[u][<span class="number">0</span>].ins(a[u]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; i) &lt;= n; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        fa[u][i] = fa[fa[u][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">        L[u][i].Merge(L[u][i - <span class="number">1</span>]);</span><br><span class="line">        L[u][i].Merge(L[fa[u][i - <span class="number">1</span>]][i - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; edge[u].size(); i ++) &#123;<span class="keyword">int</span> v = edge[u][i]; <span class="keyword">if</span>(v != pre) dfs(v, u); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LinearBasis <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinearBasis res;</span><br><span class="line">    <span class="keyword">if</span>(dep[u] &lt; dep[v]) swap(u, v);</span><br><span class="line">    <span class="keyword">int</span> d = dep[u] - dep[v];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; (<span class="number">1</span> &lt;&lt; i) &lt;= d; i ++) <span class="keyword">if</span>((<span class="number">1</span> &lt;&lt; i) &amp; d) res.Merge(L[u][i]), u = fa[u][i];</span><br><span class="line">    <span class="keyword">if</span>(u == v) &#123; res.ins(a[v]); <span class="keyword">return</span> res; &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">19</span>; i &gt;= <span class="number">0</span>; i --) <span class="keyword">if</span>(fa[u][i] != fa[v][i]) res.Merge(L[u][i]), res.Merge(L[v][i]), u = fa[u][i], v = fa[v][i];</span><br><span class="line">    res.Merge(L[u][<span class="number">0</span>]), res.ins(a[v]);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q, u, v;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">        edge[u].push_back(v);</span><br><span class="line">        edge[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span>(q --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">        LinearBasis ans = LCA(u, v);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans.max_xor());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LCA </tag>
            
            <tag> 线性基 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「BZOJ-3122」[Sdoi2013]随机数生成器(BSGS)</title>
      <link href="/2019/08/02/BZOJ-3122/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3122" target="_blank" rel="noopener">BZOJ3122-[Sdoi2013]随机数生成器</a><br>有递推式X(i+1)=(aX(i)+b) mod p， 求最小的i使X(i)=t</p></blockquote><a id="more"></a><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>$$X_i=aX_{i-1}+b$$</p><p>$$\ \quad=a^2X_{i-2}+ab+b​$$</p><p>$$=…$$</p><p>$$\ \quad=a^{i-1}X_{1}+a^{i-2}b+a^{i-1}b+…+ab+b​$$</p><p>$$\ \quad=a^{i-1}X_{1}+b{a^{i-1}-1 \over a-1}​$$</p><p>又$X_i=t$，有$$a^{i-1}X_1+b{a^{i-1}-1 \over a-1}≡t \ mod \ p$$</p><p>其中只有$a_{i-1}$为未知量，对其化简得</p><p>$$a^{i-1}≡{(a-1)t+b \over (a-1)x_1+b} \ mod \ p​$$</p><p>其中$i$为题目要我们求的答案。</p><p>首先特判几种情况：</p><p>①$a=0$时，原式为$X_i=b$，若$t=b$，则$i=1$；否则无解，输出-1；</p><p>②$a=1$时，若$b=0$，分式分母为0，无解，输出-1；否则原式为$X_i=X_1+(i-1)b$，对$i$化简有$i={t-x_1 \over b}+1$，逆元求解即可；</p><p>③$X_1=t$时，有$a^{i-1}=1$，此时易得$i=1​$；</p><p>如果不存在上述情况，对于式子</p><p>$$a^{i-1}≡{(a-1)t+b \over (a-1)x_1+b} \ mod \ p$$</p><p>两边同乘$a$，有式子$$a^i≡a{(a-1)t+b \over (a-1)x_1+b} \ mod \ p$$</p><p>BSGS即可求出$i$。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> n, <span class="keyword">int</span> mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">1</span>, base = a % mod;</span><br><span class="line">    <span class="keyword">while</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n &amp; <span class="number">1</span>) (ans *= base) %= mod;</span><br><span class="line">        (base *= base) %= mod;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> p)</span> </span>&#123; <span class="keyword">return</span> qp(a, p - <span class="number">2</span>, p); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BSGS</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; hash;</span><br><span class="line">    b %= p;</span><br><span class="line">    <span class="keyword">int</span> t = (<span class="keyword">int</span>)<span class="built_in">sqrt</span>(p) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">0</span>; j &lt; t; j ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> val = <span class="number">1l</span>l * b * qp(a, j, p) % p;</span><br><span class="line">        hash[val] = j;</span><br><span class="line">    &#125;</span><br><span class="line">    a = qp(a, t, p);</span><br><span class="line">    <span class="keyword">if</span>(a == <span class="number">0</span>) <span class="keyword">return</span> b == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= t; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> val = qp(a, i, p);</span><br><span class="line">        <span class="keyword">int</span> j = hash.find(val) == hash.end() ? <span class="number">-1</span> : hash[val];</span><br><span class="line">        <span class="keyword">if</span>(j &gt;= <span class="number">0</span> &amp;&amp; i * t - j &gt;= <span class="number">0</span>) <span class="keyword">return</span> i * t - j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _, p, a, b, x, t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;_);</span><br><span class="line">    <span class="keyword">while</span>(_ --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld%lld%lld"</span>, &amp;p, &amp;a, &amp;b, &amp;x, &amp;t);</span><br><span class="line">        <span class="keyword">if</span>(x == t) &#123; <span class="built_in">puts</span>(<span class="string">"1"</span>); <span class="keyword">continue</span>; &#125;</span><br><span class="line">        <span class="keyword">if</span>(a == <span class="number">0</span>) &#123; <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, t == b ? <span class="number">2</span> : <span class="number">-1</span>); <span class="keyword">continue</span>; &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a == <span class="number">1</span>) &#123;<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, b ? ((((t - x) % p + p) % p) * inv(b, p) % p + <span class="number">1</span>) : <span class="number">-1</span>); <span class="keyword">continue</span>; &#125;</span><br><span class="line">        <span class="keyword">int</span> tmp = b * inv(a - <span class="number">1</span>, p) % p;</span><br><span class="line">        <span class="keyword">int</span> y = (t + tmp) % p * inv((x + tmp) % p, p) % p * a % p;</span><br><span class="line">        <span class="keyword">int</span> ans = BSGS(a, y, p);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BSGS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「HDU-6579」Operation (线性基)</title>
      <link href="/2019/07/22/HDU-6579/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6579" target="_blank" rel="noopener">「HDU-6579」Operation</a><br>贪心+线性基，在LR区间内取任意个元素，求最大异或和</p></blockquote><a id="more"></a><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个长度为n的序列，有如下两种操作：</p><ol><li>求L,R区间内任意个元素的最大异或和；</li><li>在序列末尾插入一个元素；</li></ol><p>本题强制在线。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>考虑对每个点维护一个线性基，插入操作为继承上一个点的线性基并插入当前点的值。</p><p>维护每个基底组成的点g[i]，考虑贪心，尽可能使组成线性基的点更靠近R。</p><p>对于某一位的点g[i]，如果pos&gt;g[i]，则把pos与g[i]交换，使pos成为线性基的基底。</p><p>对于每个询问，查询第R个线性基所有pos大于L的基底能组成的最大值。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getpos</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> lasans)</span> </span>&#123; <span class="keyword">return</span> (x ^ lasans) % n + <span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinearBasis</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> f[<span class="number">30</span>], g[<span class="number">30</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">29</span>; ~i; i --)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((x &gt;&gt; i) &amp; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(f[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(g[i] &lt;= pos) &#123; x ^= f[i]; f[i] ^= x; swap(g[i], pos); &#125;</span><br><span class="line">                    <span class="keyword">else</span> x ^= f[i];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123; f[i] = x; g[i] = pos; <span class="keyword">break</span>; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">29</span>; ~i; i --) <span class="keyword">if</span>(g[i] &gt;= l) res = max(res, res ^ f[i]);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;base[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, q, op, l, r, x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;q);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">            base[i] = base[i - <span class="number">1</span>];</span><br><span class="line">            base[i].ins(x, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(q --)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;op);</span><br><span class="line">            <span class="keyword">if</span>(op == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</span><br><span class="line">                l = getpos(l, ans), r = getpos(r, ans);</span><br><span class="line">                <span class="keyword">if</span>(l &gt; r) swap(l, r);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans = base[r].query(l));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x); n ++;</span><br><span class="line">                base[n] = base[n - <span class="number">1</span>], base[n].ins(x ^ ans, n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性基 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「BZOJ-2242」[SDOI2011]计算器 (BSGS)</title>
      <link href="/2019/07/19/BZOJ-2242/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2242" target="_blank" rel="noopener">BZOJ2242 - [SDOI2011]计算器</a></p></blockquote><a id="more"></a><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定三个数$y,z,p$，进行如下三种操作：</p><p>1.计算Y^Z Mod P 的值<br>2.计算满足xy≡ Z ( mod P )的最小非负整数<br>3.计算满足Y^x ≡ Z ( mod P)的最小非负整数</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>虽然我确实在找板题，但这种纯板题为什么会出现在OI省选……</p><p><em>op1：快速幂</em></p><p><em>op2：exgcd</em></p><p><em>op3：BSGS</em></p><p>都套板子就vansˊ_&gt;ˋ </p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> n, <span class="keyword">int</span> mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">1</span>, base = a;</span><br><span class="line"><span class="keyword">while</span>(n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n &amp; <span class="number">1</span>) (ans *= base) %= mod;</span><br><span class="line">(base *= base) %= mod;</span><br><span class="line">n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b == <span class="number">0</span>) &#123; x = <span class="number">1</span>; y = <span class="number">0</span>; <span class="keyword">return</span>; &#125;</span><br><span class="line">    exgcd(b, a % b, x, y);</span><br><span class="line">    <span class="keyword">int</span> t = x; x = y, y = t - a / b * y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BSGS</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; hash;</span><br><span class="line">b %= p;</span><br><span class="line"><span class="keyword">int</span> t = (<span class="keyword">int</span>)<span class="built_in">sqrt</span>(p) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">0</span>; j &lt; t; j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> val = <span class="number">1l</span>l * b * qp(a, j, p) % p;</span><br><span class="line">hash[val] = j;</span><br><span class="line">&#125;</span><br><span class="line">a = qp(a, t, p);</span><br><span class="line"><span class="keyword">if</span>(a == <span class="number">0</span>) <span class="keyword">return</span> b == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= t; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> val = qp(a, i, p);</span><br><span class="line"><span class="keyword">int</span> j = hash.find(val) == hash.end() ? <span class="number">-1</span> : hash[val];</span><br><span class="line"><span class="keyword">if</span>(j &gt;= <span class="number">0</span> &amp;&amp; i * t - j &gt;= <span class="number">0</span>) <span class="keyword">return</span> i * t - j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, k, y, z, p;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;t, &amp;k);</span><br><span class="line">    <span class="keyword">while</span>(t --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;y, &amp;z, &amp;p);</span><br><span class="line">        <span class="keyword">if</span>(k == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, qp(y, z, p));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(k == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x, xx;</span><br><span class="line">            exgcd(y, p, x, xx);</span><br><span class="line">            x = <span class="number">1l</span>l * x * z % p;</span><br><span class="line">            <span class="keyword">if</span>(x) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (x % p + p) % p);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Orz, I cannot find x!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(k == <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> ans = BSGS(y, z, p);</span><br><span class="line">            <span class="keyword">if</span>(~ans) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Orz, I cannot find x!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 扩展欧几里得算法 </tag>
            
            <tag> BSGS </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019牛客暑期多校训练营（第一场） - H XOR（线性基）</title>
      <link href="/2019/07/19/Nowcoder-Multi-University-2019-Round1-H/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="https://ac.nowcoder.com/acm/contest/881/H" target="_blank" rel="noopener">H-XOR</a><br>给定一个集合，求它异或和为0的子集的大小总和</p></blockquote><a id="more"></a><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定$n$个数${a_i}$，求它异或和为0的子集的大小总和。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>考虑求集合中的每个元素对答案的贡献。</p><p>设$a$中不在线性基中的集合$S(|S|=n-|B|)$，它的任意一个子集的异或和一定可以表示为线性基中若干个数的异或和。对于某个不在线性基中的元素$a_i$，包含它的集合$S$的子集数量为$2^{n-|B|-1}$个。</p><p>对于线性基中的某个二进制位$x$，如果有一个不在线性基内的数$a_j$满足<code>(1&lt;&lt;x)&amp;a[j]==1</code>，则表示原本为这一位基底的$a_i$可以被$a_j$替换，并构成一个新的线性基$B’$,此时视$a_i$为在线性基外的元素，其对答案的贡献为$2^{n-|B|-1}$。</p><p>最后的答案为$$ans=(n-|B|+cnt)×2^{n-|B|-1}$$，其中$cnt$表示线性基中能被替换的向量个数。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qp</span><span class="params">(ll a, ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;n ; (a *= a) %= mod, n &gt;&gt;= <span class="number">1</span>) <span class="keyword">if</span>(n &amp; <span class="number">1</span>) (ans *= a) %= mod;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll v;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinearBasis</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ll d[<span class="number">63</span>], o[<span class="number">63</span>];   <span class="comment">//原矩阵，对角矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i ++) d[i] = o[i] = <span class="number">0</span>;</span><br><span class="line">v = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ins</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">62</span>; i &gt;= <span class="number">0</span>; i --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((x &gt;&gt; i) &amp; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!d[i]) d[i] = x, o[i] = tmp | (<span class="number">1l</span>l &lt;&lt; i), flag = <span class="literal">true</span>;</span><br><span class="line">x ^= d[i]; tmp ^= o[i];</span><br><span class="line"><span class="keyword">if</span>(!x) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flag) v |= tmp;</span><br><span class="line"><span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line">&#125;L;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        L.init();</span><br><span class="line">        ll x, ans = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;x);</span><br><span class="line">            <span class="keyword">if</span>(!L.ins(x)) ans ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">63</span>; i ++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(L.d[i]) cnt ++;</span><br><span class="line">            <span class="keyword">if</span>((<span class="number">1l</span>l &lt;&lt; i) &amp; v) ans ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans * qp(<span class="number">2</span>, n - cnt - <span class="number">1</span>) % mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性基 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「CodeForces-1195F」Geometers Anonymous Club(闵可夫斯基和)</title>
      <link href="/2019/07/18/Codeforces-1195F/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="https://codeforces.com/contest/1195/problem/F" target="_blank" rel="noopener">「CodeForces-1195F」Geometers Anonymous Club</a></p><p>给定n个凸包，求第l个到第r个凸包的Minkowski和</p></blockquote><a id="more"></a><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>求凸包之间的闵可夫斯基和：取出两个凸包的每一条向量，按照极角序排序构成新凸包即可。（相同斜率的向量需要去重）<br>求多个凸包的闵可夫斯基和的时候可以直接取所有凸包的向量，不同向量的个数就是求和之后凸包的点数。</p><p>所以原问题转化为，在第l到r个凸包的向量中，有多少个互不相同的向量。</p><p>考虑对向量按凸包从左到右依次编号，标记当前向量上一次出现的位置（如果是第一次出现则pre[i]=0）。离线处理答案，按向量编号从小到大顺序扫描向量集，对向量<code>i</code>上一次出现的位置<code>pre[i]</code>的出现次数计数，用树状数组维护。对于某一个询问Q的L和R，如果存在<code>L&lt;=i&lt;=r</code>且<code>L&lt;=pre[i]&lt;=r</code>，说明该向量在LR区间内重复出现。对于右端点为R的询问LR，它的答案为L到R的凸包的向量总数-LR区间内重复出现的向量个数。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span> + <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> x[maxn], y[maxn], tot = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> pre[maxn], pos[maxn], ans[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; query[maxn];</span><br><span class="line"><span class="keyword">int</span> data[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(i ++; i &lt; maxn; i += i &amp; -i) data[i] += y;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i ++; i; i -= i &amp; -i) res += data[i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="built_in">map</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; , <span class="keyword">int</span>&gt; pre_idx;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        pos[i] = tot;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; j ++) <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x[j], &amp;y[j]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; j ++)</span><br><span class="line">        &#123;</span><br><span class="line">            pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; p(x[(j + <span class="number">1</span>) % k] - x[j], y[(j + <span class="number">1</span>) % k] - y[j]);</span><br><span class="line">            <span class="keyword">int</span> g = __gcd(<span class="built_in">abs</span>(p.first), <span class="built_in">abs</span>(p.second));</span><br><span class="line">            p.first /= g, p.second /= g;</span><br><span class="line">            pre[tot] = pre_idx[p];</span><br><span class="line">            pre_idx[p] = tot ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    pos[n] = tot ++;</span><br><span class="line">    <span class="keyword">int</span> q, l, r, x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</span><br><span class="line">        ans[i] = pos[r] - pos[-- l];</span><br><span class="line">        query[pos[r]].push_back(&#123;pos[l], i&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> q : query[i])</span><br><span class="line">        &#123;</span><br><span class="line">            l = q.first, x = q.second;</span><br><span class="line">            ans[x] -= sum(i) - sum(l - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        add(pre[i], <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q; i ++) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Geometry </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算几何 </tag>
            
            <tag> 闵可夫斯基和 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「HDU-6532」Chessboard (费用流)</title>
      <link href="/2019/05/29/HDU-6532/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6532" target="_blank" rel="noopener">「HDU-6532」Chessboard</a><br>离散化+二分图行列模型，求限制条件下放置棋子的最大总价值</p></blockquote><a id="more"></a><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个棋盘，可以在给定的位置放棋子，第i个棋子的价值为i。并给出若干个限制条件，要求在某列右侧/某行下方的棋子总数不超过$k_i$，求满足限制条件情况下放置棋子可以获得的最大价值。</p><p><em>XTU教练：这不就是个费用流吗.jpg(震声）</em></p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>二分图的行列模型，数据范围需要离散化。第0行为源点，第0列为汇点；第$i-1$行向第$i$行连边，流量为第$i$行的限制；第$i$列向第$i-1$列连边，流量为第$i$列的限制，并将每个点所在的行向其所在的列连边，流量为1，费用为$-i$，跑费用流即可。</p><p>需要注意建图的时候只离散化给定的点的行和列的点作为网络上的点，对于每一个限制条件lower_bound找到第一个大于等于它的点，并更新该点的限制，最后对于lim_R[i]和lim_C[i]建图。</p><p><del>其实我赛场上就嘴出解法了然后因为是嘴巴选手所以敲了1h没写出来</del></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span> <span class="keyword">int</span> from, to, cap, flow,cost; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Edge&gt; edges;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</span><br><span class="line">    <span class="keyword">bool</span> inq[maxn];</span><br><span class="line">    <span class="keyword">int</span> dis[maxn], path[maxn], a[maxn];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i ++) G[i].clear();</span><br><span class="line">        edges.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to, <span class="keyword">int</span> cap, <span class="keyword">int</span> cost)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        edges.push_back(Edge&#123;from, to, cap, <span class="number">0</span>, cost&#125;);</span><br><span class="line">        edges.push_back(Edge&#123;to, from, <span class="number">0</span>, <span class="number">0</span>, -cost&#125;);</span><br><span class="line">        m = edges.size();</span><br><span class="line">        G[from].push_back(m - <span class="number">2</span>);</span><br><span class="line">        G[to].push_back(m - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Bellman_Ford</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> &amp;flow, <span class="keyword">int</span> &amp;cost)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i ++) dis[i] = inf;</span><br><span class="line">        <span class="built_in">memset</span>(inq, <span class="number">0</span>, <span class="keyword">sizeof</span> inq);</span><br><span class="line">        dis[s] = <span class="number">0</span>, inq[s] = <span class="literal">true</span>, path[s] = <span class="number">0</span>, a[s] = inf;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">        Q.push(s);</span><br><span class="line">        <span class="keyword">while</span>(!Q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u = Q.front(); Q.pop();</span><br><span class="line">            inq[u] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[u].size(); i ++)</span><br><span class="line">            &#123;</span><br><span class="line">                Edge&amp; e = edges[G[u][i]];</span><br><span class="line">                <span class="keyword">if</span>(e.cap &gt; e.flow &amp;&amp; dis[e.to] &gt; dis[u] + e.cost)</span><br><span class="line">                &#123;</span><br><span class="line">                    dis[e.to] = dis[u] + e.cost;</span><br><span class="line">                    path[e.to] = G[u][i];</span><br><span class="line">                    a[e.to] = min(a[u], e.cap - e.flow);</span><br><span class="line">                    <span class="keyword">if</span>(!inq[e.to])</span><br><span class="line">                    &#123;</span><br><span class="line">                        Q.push(e.to);</span><br><span class="line">                        inq[e.to] = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dis[t] == inf) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        flow += a[t];</span><br><span class="line">        cost += dis[t] * a[t];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> u = t; u != s; u = edges[path[u]].from)</span><br><span class="line">        &#123;</span><br><span class="line">            edges[path[u]].flow += a[t];</span><br><span class="line">            edges[path[u] ^ <span class="number">1</span>].flow -= a[t];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">mincostMaxFlow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cost = <span class="number">0</span>, flow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(Bellman_Ford(s, t, flow, cost));</span><br><span class="line">        <span class="keyword">return</span> cost;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> LR[maxn], LC[maxn];</span><br><span class="line"><span class="keyword">int</span> mp[<span class="number">510</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; posR, posC;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, pos, k;</span><br><span class="line">    <span class="keyword">char</span> op[<span class="number">5</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;mp[i][<span class="number">0</span>], &amp;mp[i][<span class="number">1</span>]);</span><br><span class="line">        posR.push_back(mp[i][<span class="number">0</span>]);</span><br><span class="line">        posC.push_back(mp[i][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    posR.push_back(<span class="number">0</span>);</span><br><span class="line">    posC.push_back(<span class="number">0</span>);</span><br><span class="line">    sort(posR.begin(), posR.end());</span><br><span class="line">    sort(posC.begin(), posC.end());</span><br><span class="line">    posR.erase(unique(posR.begin(), posR.end()), posR.end());</span><br><span class="line">    posC.erase(unique(posC.begin(), posC.end()), posC.end());</span><br><span class="line">    <span class="built_in">memset</span>(LR, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> LR);</span><br><span class="line">    <span class="built_in">memset</span>(LC, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> LC);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s%d%d"</span>, op, &amp;pos, &amp;k);</span><br><span class="line">        <span class="keyword">if</span>(op[<span class="number">0</span>] == <span class="string">'R'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            pos = lower_bound(posR.begin(), posR.end(), pos) - posR.begin();</span><br><span class="line">            LR[pos] = min(LR[pos], k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op[<span class="number">0</span>] == <span class="string">'C'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            pos = lower_bound(posC.begin(), posC.end(), pos) - posC.begin();</span><br><span class="line">            LC[pos] = min(LC[pos], k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> S = <span class="number">0</span>, T = posR.size();</span><br><span class="line">    ans.init(posR.size() + posC.size());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; posR.size(); i ++) ans.addEdge(i - <span class="number">1</span>, i, LR[i], <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; posC.size(); i ++) ans.addEdge(i + posR.size(), i + posR.size() - <span class="number">1</span>, LC[i], <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x = lower_bound(posR.begin(), posR.end(), mp[i][<span class="number">0</span>]) - posR.begin(),</span><br><span class="line">            y = lower_bound(posC.begin(), posC.end(), mp[i][<span class="number">1</span>]) - posC.begin() + posR.size();</span><br><span class="line">        ans.addEdge(x, y, <span class="number">1</span>, - i - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, -ans.mincostMaxFlow(S, T));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Graph </category>
          
          <category> Network Flow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 费用流 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「HDU-6285」Vertex Cover (计数)</title>
      <link href="/2019/05/09/HDU-6285/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6285" target="_blank" rel="noopener">「HDU-6285」Vertex Cover</a></p></blockquote><a id="more"></a><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个$n$个点的完全图，第$i$个点的点权为$2^{i-1}$。给定一个边集，对于一个点集，要求边集中的每一条边至少有一个端点在点集中，并保证点集的权值和最小。现在给一个点集，问有多少种满足条件的边集。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>我们令在点集中的点为关键点，不在点集中的点为非关键点，满足条件的边集中的<strong>关键点</strong>$u$连接情况满足以下条件：</p><p>​    在编号大于$u$的点中，至少有一个<strong>非关键点</strong>与$u$相连。</p><p>简单证明一下这个条件。</p><p>考虑反证法，假设与关键点$u$相连的点编号全部小于$u$，由于点权编码的性质，$10000&gt;01111$，此时即使将所有比它小的关键点选中，权值和仍然小于选择$u$的花费，所以这时$u$不可能是关键点。因此，必然至少有一个大于$u$的点$v$与$u$相连。</p><p>为什么点$v$至少需要有一个非关键点。同样考虑反证法，假设与$u$相连的点集$v$全为关键点，那么以$u$为端点的边已经全部被选取，为了使点权和最小化，这时候不需要选取$u$，因此这种情况下$u$不是关键点。</p><p>此时可以推出在编号大于$u$的点中，至少有一个<strong>非关键点</strong>与$u$相连。</p><p>满足这个条件的连边方式可以保证所给的点集是权值和最小的取点方案。在满足该条件后，关键点可以向其余点任意连边，因为从关键点出发的边已经被覆盖，且选取其它点的权值和必然大于选择该点。为了避免重复计数，对于关键点$u$，我们只向小于$u$的点统计连边方案。</p><p>因此对于每个关键点，连边满足以下条件：</p><ol><li>在编号大于$u$的点中，至少有一个<strong>非关键点</strong>与$u​$相连；</li><li>在满足条件1的情况下，对于编号小于$u​$的点，可以有任意个点与点$u​$相连；</li></ol><p>最后的式子为$$\prod_{i\in{set}}2^{i-1}·(2^{cnt({v&gt;i}\bigcap{v\notin{set}})}-1)​$$</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>嘴巴选手写什么代码我有空再补咕咕咕</p>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Counting </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计数原理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「HDU-6059」Kanade&#39;s trio (Trie树)</title>
      <link href="/2019/04/20/HDU-6059/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6059" target="_blank" rel="noopener">「HDU-6059」Kanade’s trio </a><br>给定一个序列，求序列中满足i&lt;j&lt;k且(A[i] xor A[j])&lt;(A[j] xor A[k])的三元组的数量</p></blockquote><a id="more"></a><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个长度为$n(∑n≤5∗10^5)$的序列，求序列中满足$i&lt;j&lt;k$且$(A[i]\ xor\ A[j])&lt;(A[j]\ xor\ A[k])$的三元组的数量，其中$0≤A[i]&lt;2^{30}$.</p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>对于每个数进行二进制拆分，依次插入字典树处理。</p><p>首先考虑两个数$A[i],A[k]$，其二进制位前若干位相等，第$p$位不同。此时若要选取满足条件的数$A[j]$，则$A[j]$的前$p-1$位取任意值都不影响结果，而对于第$p$位，要使$(A[i]\ xor\ A[j])&lt;(A[j]\ xor\ A[k])$，有如下两种情况：</p><ul><li>$A[i]_p=1, A[k]_p=0​$，此时$A[j]_p​$取值为$1​$</li><li>$A[i]_p=0, A[k]_p=1$，此时$A[j]_p$取值为$0$</li></ul><p>即$A[j]_p$的取值为$A[j]_p=A[i]_p$</p><p>具体到插入字典树的过程中，对于$A[k]$插入过程中的每一位，判断是否存在二进制位为$!A[k]_p$的字典树节点$pos=trie[now][!A[k]_p]$，如果有，在计数过程中考虑如下两种情况：</p><ol><li><p>$i,j$均为结点$pos$子树下的节点：</p><p>此时方案数为$C\binom{2}{sz[pos]} = sz[pos]×(sz[pos]-1)/2$，其中$sz[pos]$表示结点$pos$的子树大小，该选取方案可以保证$i,j$有序；</p></li><li><p>$i$为结点$pos$子树下的节点，$j$为不在结点$pos$下，且第$p$位二进制数与$i$相同的节点：</p><p>利用数组$cnt[p][2]​$统计第$p​$个二进制位上为0/1的数的数量，当前方案数即为$(cnt[p][!A[k]_p]-sz[pos])×sz[pos]​$，但注意这种计数方案没有保证$i&gt;j​$的方案数；</p><p>我们考虑一个数$A[i]$，在当前位$p$插入字典树时，有$cnt[p][A[i]_p]-sz[pos]$个数在选取时满足$j&lt;i$的情况，对该值求和即为在统计该节点$pos$时需要减去的方案数。</p><p>故第二种情况的方案数为$(cnt[p][!A[k]_p]-sz[pos])×sz[pos]-sum[pos]$，其中$sum$为$pos$位插入过程中$cnt[p][A[i]_p]-sz[pos]$的和；</p></li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">31</span> *(<span class="number">5e5</span> + <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> trie[maxn][<span class="number">2</span>], tot;</span><br><span class="line"><span class="keyword">int</span> sz[maxn], ext[maxn];</span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">31</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">ll ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(trie, <span class="number">0</span>, <span class="keyword">sizeof</span> trie);</span><br><span class="line">    <span class="built_in">memset</span>(sz, <span class="number">0</span>, <span class="keyword">sizeof</span> sz);</span><br><span class="line">    <span class="built_in">memset</span>(ext, <span class="number">0</span>, <span class="keyword">sizeof</span> ext);</span><br><span class="line">    <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span> cnt);</span><br><span class="line">    ans = tot = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_ch</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> root = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">29</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> id = (x &gt;&gt; i) &amp; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(!trie[root][id]) trie[root][id] = ++tot;</span><br><span class="line">        cnt[i][id]++;</span><br><span class="line">        <span class="keyword">if</span>(trie[root][id ^ <span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> now = trie[root][id ^ <span class="number">1</span>];</span><br><span class="line">            ans += <span class="number">1l</span>l * sz[now] * (sz[now] - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            ans += <span class="number">1l</span>l * (cnt[i][<span class="number">1</span> ^ id] - sz[now]) * sz[now] - ext[now];</span><br><span class="line">        &#125;</span><br><span class="line">        root = trie[root][id];</span><br><span class="line">        sz[root]++;</span><br><span class="line">        ext[root] += cnt[i][id] - sz[root];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, n, x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">            insert_ch(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> String </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Trie树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「BZOJ-4774」修路 (斯坦纳树)</title>
      <link href="/2019/04/17/BZOJ-4774/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4774" target="_blank" rel="noopener">BZOJ4774-修路</a><br>在图上选中一些边，使给定的点对能通过选中的边连通，最小化选中的边的权值和</p></blockquote><a id="more"></a><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><h3 id="斯坦纳树"><a href="#斯坦纳树" class="headerlink" title="斯坦纳树"></a>斯坦纳树</h3><p>将指定点集合中的所有点连通，且边权总和最小的生成树称为最小斯坦纳树（Minimal Steiner Tree）。</p><p>斯坦纳树可以通过dp求解，转移方程有两种：</p><ol><li>枚举子树形态 $dp[S][i] = min(dp[s]+dp[S \ xor \  s])$</li><li>按照边进行松弛 $dp[S][i] = min(dp[S][j]+w[j][i])$</li></ol><p>其中$S$为选取的子集，$s$ 和$S\ xor\ s$为$S$的状态划分。第二类转移方程可以通过跑一次最短路进行松弛。</p><p>本题需要再做一次子集dp，因为不成对的点可能不连通。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[maxn], cnt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span><span class="keyword">int</span> nex, to, w; &#125;edge[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[cnt].nex = head[u];</span><br><span class="line">    edge[cnt].to = v;</span><br><span class="line">    edge[cnt].w = w;</span><br><span class="line">    head[u] = cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[<span class="number">1</span>&lt;&lt;<span class="number">10</span>][maxn], ans[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">bool</span> in[maxn];</span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!que.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = que.front(); que.pop();</span><br><span class="line">        in[u] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nex)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">            <span class="keyword">if</span>(f[S][v] &gt; f[S][u] + edge[i].w)</span><br><span class="line">            &#123;</span><br><span class="line">                f[S][v] = f[S][u] + edge[i].w;</span><br><span class="line">                <span class="keyword">if</span>(!in[v]) que.push(v), in[v] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Steiner_Tree</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= d; i++)</span><br><span class="line">        f[<span class="number">1</span> &lt;&lt; (i - <span class="number">1</span>)][i] = f[<span class="number">1</span> &lt;&lt; (d + i - <span class="number">1</span>)][n - i + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> lim = <span class="number">1</span>&lt;&lt;(d&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">1</span>; S &lt; lim; S++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> s = (S - <span class="number">1</span>) &amp; S; s; s = (s - <span class="number">1</span>) &amp; S)</span><br><span class="line">                f[S][i] = min(f[S][i], f[s][i] + f[S ^ s][i]);</span><br><span class="line">            <span class="keyword">if</span>(f[S][i] != inf) que.push(i), in[i] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        spfa(S);</span><br><span class="line">    &#125;</span><br><span class="line">    lim = <span class="number">1</span>&lt;&lt;d;</span><br><span class="line">    <span class="built_in">memset</span>(ans, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> ans);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">1</span>; S &lt; lim; S++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            ans[S] = min(ans[S], f[S^(S&lt;&lt;d)][i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">1</span>; S &lt; lim; S++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> s = (S - <span class="number">1</span>) &amp; S; s; s = (s - <span class="number">1</span>) &amp; S)</span><br><span class="line">            ans[S] = min(ans[S], ans[s] + ans[S ^ s]);</span><br><span class="line">    <span class="keyword">return</span> ans[lim - <span class="number">1</span>] == inf ? <span class="number">-1</span> : ans[lim - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, d, u, v, w;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;d);</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">0xff</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">        add(u, v, w);</span><br><span class="line">        add(v, u, w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Steiner_Tree(n, d));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Graph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 斯坦纳树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「HDU-2121」Ice_cream’s world II(不定根最小树形图)</title>
      <link href="/2019/03/27/HDU-2121/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2121" target="_blank" rel="noopener">「HDU-2121」Ice_cream’s world II</a><br>朱刘算法，不定根最小树形图</p></blockquote><a id="more"></a><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个有向图，选择一个点使其能到达其他所有点，并使花费最小，输出最小花费。如果有多个这样的点，输出编号小的点。如果没有这样的点，输出impossible.</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>不定根最小生成树模板题。</p><p>设定一个虚根并向所有结点连边，边权为图上所有边的边权之和$sum+1$，以虚根为$root$跑一遍朱刘算法。</p><p>如果求出的边权之和$res&gt;=2*sum$，说明至少有两个结点是从虚根出发到达的点，即原图不连通。</p><p>原图连通的状态下，只有一个点是从虚根出发到达的点。在跑最小树形图时记录从虚根出发到达的点，即为原图的根。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF = <span class="number">1e17</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span> <span class="keyword">int</span> u, v; <span class="keyword">long</span> <span class="keyword">long</span> cost; &#125; edge[maxn * maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pre[maxn], vis[maxn], id[maxn], pos;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> in[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">zhuliu</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> u, v;</span><br><span class="line">    <span class="keyword">for</span> (;;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) in[i] = INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">            <span class="keyword">if</span> (edge[i].u != edge[i].v &amp;&amp; edge[i].cost &lt; in[edge[i].v])</span><br><span class="line">            &#123;</span><br><span class="line">                pre[edge[i].v] = edge[i].u;</span><br><span class="line">                in[edge[i].v] = edge[i].cost;</span><br><span class="line">                <span class="keyword">if</span> (edge[i].u == root) pos = i;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">if</span> (i != root &amp;&amp; in[i] == INF) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> tn = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(id, <span class="number">0xff</span>, <span class="keyword">sizeof</span> id);</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0xff</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">        in[root] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            res += in[i];</span><br><span class="line">            v = i;</span><br><span class="line">            <span class="keyword">while</span> (vis[v] != i &amp;&amp; id[v] == <span class="number">-1</span> &amp;&amp; v != root) vis[v] = i, v = pre[v];</span><br><span class="line">            <span class="keyword">if</span> (v != root &amp;&amp; id[v] == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> u = pre[v]; u != v; u = pre[u]) id[u] = tn;</span><br><span class="line">                id[v] = tn++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tn == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">if</span> (id[i] == <span class="number">-1</span>) id[i] = tn++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            v = edge[i].v;</span><br><span class="line">            edge[i].u = id[edge[i].u];</span><br><span class="line">            edge[i].v = id[edge[i].v];</span><br><span class="line">            edge[i].cost -= in[v];</span><br><span class="line">        &#125;</span><br><span class="line">        n = tn;</span><br><span class="line">        root = id[root];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%lld"</span>, &amp;edge[i].u, &amp;edge[i].v, &amp;edge[i].cost);</span><br><span class="line">            edge[i].u++;</span><br><span class="line">            edge[i].v++;</span><br><span class="line">            sum += edge[i].cost;</span><br><span class="line">        &#125;</span><br><span class="line">        sum++;</span><br><span class="line">        <span class="keyword">int</span> root = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = m; i &lt; m + n; i++)</span><br><span class="line">            edge[i].u = root, edge[i].v = i - m + <span class="number">1</span>, edge[i].cost = sum;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> res = zhuliu(root, n + <span class="number">1</span>, m + n);</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="number">-1</span> || res - sum &gt;= sum) <span class="built_in">printf</span>(<span class="string">"impossible\n\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld %d\n\n"</span>, res - sum, pos - m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Graph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最小树形图 </tag>
            
            <tag> 朱刘算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「HDU-6141」I am your Father!(最小树形图)</title>
      <link href="/2019/03/27/HDU-6141/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6141" target="_blank" rel="noopener">「HDU-6141」I am your Father! </a><br>求最大树形图，并最小化点n​父亲结点的编号</p></blockquote><a id="more"></a><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个有向图，求出以1为根的最大树形图，如果有多个，则使$n$结点的父亲节点编号最小。输出边权和$W$和点$n$的父亲节点。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>对于$W$，可以直接对边权取负，跑一遍朱刘算法。</p><p>为使点$n$的父亲节点编号最小，需要对连向点$n$的边进行加权操作，并且需要保证加权后的权值不会影响原图。</p><p>对于原图上的边，对边权*1000，而加权操作加上的权值为起始点$u$的编号(不超过1000)，即可保证在不影响原结果的情况下，求出父节点编号最小的解。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm=<span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> u,v,cost; &#125; edge[maxm];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pre[maxn], id[maxn], vis[maxn], in[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">zhuliu</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>, u, v;</span><br><span class="line"><span class="keyword">for</span>(;;)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) in[i] = INF;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++) <span class="keyword">if</span>(edge[i].u != edge[i].v &amp;&amp; edge[i].cost &lt; in[edge[i].v])</span><br><span class="line">&#123;</span><br><span class="line">pre[edge[i].v] = edge[i].u;</span><br><span class="line">in[edge[i].v] = edge[i].cost;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) <span class="keyword">if</span>(i != root &amp;&amp; in[i] ==INF) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> tn=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(id, <span class="number">0xff</span>, <span class="keyword">sizeof</span> id);</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0xff</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">in[root] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">res += in[i];</span><br><span class="line">v = i;</span><br><span class="line"><span class="keyword">while</span>( vis[v] != i &amp;&amp; id[v] == <span class="number">-1</span> &amp;&amp; v!= root) vis[v] = i, v = pre[v];</span><br><span class="line"><span class="keyword">if</span>(v != root &amp;&amp; id[v] == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> u = pre[v]; u != v; u = pre[u]) id[u] = tn;</span><br><span class="line">id[v] = tn++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tn == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) <span class="keyword">if</span>(id[i] == <span class="number">-1</span>) id[i] = tn++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m;)</span><br><span class="line">&#123;</span><br><span class="line">v = edge[i].v;</span><br><span class="line">edge[i].u = id[edge[i].u];</span><br><span class="line">edge[i].v = id[edge[i].v];</span><br><span class="line"><span class="keyword">if</span>(edge[i].u != edge[i].v) edge[i++].cost -= in[v];</span><br><span class="line"><span class="keyword">else</span> swap(edge[i], edge[--m]);</span><br><span class="line">&#125;</span><br><span class="line">n = tn;</span><br><span class="line">root = id[root];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, n, m, u, v, w;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n, &amp;m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;edge[i].u, &amp;edge[i].v, &amp;edge[i].cost);</span><br><span class="line">            edge[i].u--;</span><br><span class="line">            edge[i].v--;</span><br><span class="line">            edge[i].cost = -edge[i].cost * <span class="number">1000</span>;</span><br><span class="line">            <span class="keyword">if</span>(edge[i].v == n - <span class="number">1</span>) edge[i].cost += edge[i].u;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = -zhuliu(<span class="number">0</span>, n, m);</span><br><span class="line">        <span class="keyword">int</span> ans = (res + <span class="number">999</span>) / <span class="number">1000</span>, pos = ans * <span class="number">1000</span> - res;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, ans, pos + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Graph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最小树形图 </tag>
            
            <tag> 朱刘算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「POJ-3417」Network (LCA+树上差分)</title>
      <link href="/2019/03/22/POJ-3417/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://poj.org/problem?id=3417" target="_blank" rel="noopener">「POJ-3417」Network </a><br>LCA+树上差分，给定一棵树和一些附加边，在其中各删一条使树不连通，求可行的方案数。</p></blockquote><a id="more"></a><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一棵树和一些附加边，要求在原始边和附加边中各选一条删除，从而使树被分割为至少两个联通块，求可行的方案数。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>对于每个给出的附加边求LCA，树上差分，标记其所在的环上的所有边的经过次数。</p><p>对于树上每条边的经过次数：</p><ol><li><p>$cnt[i]=0:$ 不属于任何环，此时只要删除该边和任意一条附加边即可，方案数$+m;$</p></li><li><p>$cnt[i]=1:$ 只属于一个环，删除该边和属于该环的附加边为可行解，方案数$+1;$</p></li><li><p>$cnt[i]&gt;1:$该边属于多个环，需要删除该边和所在所有边上的附加环才可分割该图，删该树边不存在可行解。</p></li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> nex,to; &#125;edge[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,head[maxn],dep[maxn],fa[maxn][<span class="number">30</span>],cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[++cnt].nex=head[u];</span><br><span class="line">    edge[cnt].to=v;</span><br><span class="line">    head[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dep[u]=dep[pre]+<span class="number">1</span>;</span><br><span class="line">    fa[u][<span class="number">0</span>]=pre;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;i)&lt;=n;i++) fa[u][i]=fa[fa[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=edge[i].nex) <span class="keyword">if</span>(edge[i].to!=pre) dfs(edge[i].to,u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dep[u]&lt;dep[v]) swap(u,v);</span><br><span class="line">    <span class="keyword">int</span> d=dep[u]-dep[v];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;(<span class="number">1</span>&lt;&lt;i)&lt;=d;i++) <span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;i)&amp;d) u=fa[u][i];</span><br><span class="line">    <span class="keyword">if</span>(u==v) <span class="keyword">return</span> u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">20</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(fa[u][i]!=fa[v][i])</span><br><span class="line">        &#123;</span><br><span class="line">            u=fa[u][i];</span><br><span class="line">            v=fa[v][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sta[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=edge[i].nex) <span class="keyword">if</span>(edge[i].to!=pre) sta[u]+=dfs1(edge[i].to,u);</span><br><span class="line">    <span class="keyword">return</span> sta[u];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,u,v;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">        add(u,v); add(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">        <span class="keyword">int</span> root=LCA(u,v);</span><br><span class="line">        sta[u]++; sta[v]++;</span><br><span class="line">        sta[root]-=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs1(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(sta[i]==<span class="number">0</span>) ans+=m;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sta[i]==<span class="number">1</span>) ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LCA </tag>
            
            <tag> 树上差分 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「BZOJ-3940&amp;3942」Censoring (字符串)</title>
      <link href="/2019/03/20/BZOJ-3940-3942/"/>
      <content type="html"><![CDATA[<blockquote><p>给定一个字符串S，给定一个模式串/n个模式串，从前往后寻找，一旦找到模式串，删除该模式串并继续从头寻找。重复这一过程，直到S中不存在模式串，输出最后的S。</p></blockquote><a id="more"></a><p>好了这是Usaco月赛里面题意和做法都非常相似的两个题，分别是KMP和AC自动机的应用。</p><h1 id="Sliver"><a href="#Sliver" class="headerlink" title="Sliver"></a>Sliver</h1><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3942" target="_blank" rel="noopener">BZOJ3942 - [Usaco2015 Feb]Censoring</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给出两个字符串 $S$ 和 $T$，每次从前往后找到$S$ 的一个子串 $A=T$并将其删除，空缺位依次向前补齐，重复上述操作多次，直到串$S$中不含 $T$串。输出最终的$S$串。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>用栈维护给定的$S$串，对$s$依次入栈并求当前位的$next$数组，如果匹配到$T$，将长度为$len(T)$的字符出栈。对于每个入栈元素，取当前栈顶元素即可求出当前元素的$next$数组指向位置，直到$S$全部入栈。输出栈内元素即为答案。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> a[maxn], b[maxn], st[maxn];</span><br><span class="line"><span class="keyword">int</span> nex[maxn], p[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(b), i = <span class="number">0</span>, j = <span class="number">-1</span>;</span><br><span class="line">    nex[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j != <span class="number">-1</span> &amp;&amp; b[i] != b[j + <span class="number">1</span>]) j = nex[j];</span><br><span class="line">        <span class="keyword">if</span> (b[i] == b[j + <span class="number">1</span>])</span><br><span class="line">            j++;</span><br><span class="line">        nex[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KMP</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">strlen</span>(a), m = <span class="built_in">strlen</span>(b);</span><br><span class="line">    getNext();</span><br><span class="line">    <span class="keyword">int</span> top = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> j = p[top];</span><br><span class="line">        st[++top] = a[i];</span><br><span class="line">        <span class="keyword">while</span> (j != <span class="number">-1</span> &amp;&amp; b[j + <span class="number">1</span>] != st[top]) j = nex[j];</span><br><span class="line">        <span class="keyword">if</span> (b[j + <span class="number">1</span>] == st[top])</span><br><span class="line">            j++;</span><br><span class="line">        p[top] = j;</span><br><span class="line">        <span class="keyword">if</span> (p[top] + <span class="number">1</span> == m)</span><br><span class="line">            top -= m;</span><br><span class="line">    &#125;</span><br><span class="line">    st[top + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">puts</span>(st + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s%s"</span>, a, b);</span><br><span class="line">    KMP();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Gold"><a href="#Gold" class="headerlink" title="Gold"></a>Gold</h1><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3940" target="_blank" rel="noopener">BZOJ3940 - [Usaco2015 Feb]Censoring</a></p><h2 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h2><p>给定一个串$S$和$n$个屏蔽词$T_n$，对于串$S$，每次从前往后检查并删除最先出现的屏蔽词，重复该操作直到$S$中没有列表内的单词为止。完成这些操作并输出最后的$S$。</p><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>同样由栈维护母串$S$，并记录栈中每个字符在Trie树上的位置，如果遇到关键串，将该串推出栈中，每次入栈前取当前栈顶字符在Trie树上的位置即可求出当前串的位置。</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[maxn], t[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ACAutomation</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> trie[maxn][<span class="number">26</span>], cnt;</span><br><span class="line">    <span class="keyword">int</span> tag[maxn];</span><br><span class="line">    <span class="keyword">int</span> fail[maxn];</span><br><span class="line">    <span class="keyword">int</span> st[maxn], pos[maxn], cur;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> root = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; s[i]; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> id = s[i] - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span> (!trie[root][id])</span><br><span class="line">                trie[root][id] = ++cnt;</span><br><span class="line">            root = trie[root][id];</span><br><span class="line">        &#125;</span><br><span class="line">        tag[root] = <span class="built_in">strlen</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">            <span class="keyword">if</span> (trie[<span class="number">0</span>][i])</span><br><span class="line">                que.push(trie[<span class="number">0</span>][i]);</span><br><span class="line">        <span class="keyword">while</span> (!que.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> k = que.front();</span><br><span class="line">            que.pop();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (trie[k][i]) &#123;</span><br><span class="line">                    fail[trie[k][i]] = trie[fail[k]][i];</span><br><span class="line">                    que.push(trie[k][i]);</span><br><span class="line">                &#125; <span class="keyword">else</span></span><br><span class="line">                    trie[k][i] = trie[fail[k]][i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> root = <span class="number">0</span>;</span><br><span class="line">        pos[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; t[i]; i++) &#123;</span><br><span class="line">            root = trie[pos[cur]][t[i] - <span class="string">'a'</span>];</span><br><span class="line">            st[++cur] = t[i] - <span class="string">'a'</span>;</span><br><span class="line">            pos[cur] = root;</span><br><span class="line">            <span class="keyword">if</span> (tag[root]) &#123;</span><br><span class="line">                cur -= tag[root];</span><br><span class="line">                root = pos[cur];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cur; i++) <span class="built_in">printf</span>(<span class="string">"%c"</span>, st[i] + <span class="string">'a'</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; AC;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, t);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">        AC.insert(s);</span><br><span class="line">    &#125;</span><br><span class="line">    AC.build();</span><br><span class="line">    AC.query();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> String </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KMP </tag>
            
            <tag> AC自动机 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「BZOJ-2115」[Wc2011] Xor (线性基)</title>
      <link href="/2019/01/18/BZOJ-2115/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2115" target="_blank" rel="noopener">BZOJ3732-[Wc2011] Xor</a><br>给定一个无向图，求节点1到结点N的XOR和最大路径，一条边可以重复经过多次。</p></blockquote><a id="more"></a><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>由于路径可以重复经过，对于图上的任意一个环，可以选择取或不取该环的值，而对于点1-n的路径异或和最大值，可以视为某一条1-n的路径，异或上若干个环的路径长度的最大值。</p><p>预处理求出图上所有环的异或和，并任取一条1-n的路径异或和，对这些值求线性基，即可求出最大值。</p><p>为什么1-n的路径可以任取：假设1-n有大于一条路径，其中另一条路径与所有环异或能取得更优解，那么此时可视为有一个经过1和n的环，故直接将该环与原所取路径异或即可取得最大值。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[maxn],cnt=<span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span><span class="keyword">int</span> nex,to; ll w; &#125;edge[<span class="number">20</span>*maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,ll w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[cnt].nex=head[u];</span><br><span class="line">    edge[cnt].to=v;</span><br><span class="line">    edge[cnt].w=w;</span><br><span class="line">    head[u]=cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,ll w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    add_edge(u,v,w);</span><br><span class="line">    add_edge(v,u,w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll _xor[maxn],a[<span class="number">5</span>*maxn],tot=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];~i;i=edge[i].nex)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=edge[i].to;</span><br><span class="line">        <span class="keyword">if</span>(!vis[v])</span><br><span class="line">        &#123;</span><br><span class="line">            _xor[v]=_xor[u]^edge[i].w;</span><br><span class="line">            vis[v]=<span class="literal">true</span>;</span><br><span class="line">            dfs(v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            a[tot++]=_xor[u]^_xor[v]^edge[i].w;</span><br><span class="line">            <span class="keyword">if</span>(!a[tot<span class="number">-1</span>]) tot--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll b[<span class="number">70</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span> b);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tot;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">63</span>;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&gt;&gt;j&amp;<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(b[j]) a[i]^=b[j];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    b[j]=a[i];</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k=j<span class="number">-1</span>;k&gt;=<span class="number">0</span>;k--) <span class="keyword">if</span>(b[k]&amp;&amp;(b[j]&gt;&gt;k&amp;<span class="number">1</span>)) b[j]^=b[k];</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k=j+<span class="number">1</span>;k&lt;=<span class="number">63</span>;k++) <span class="keyword">if</span>(b[k]&gt;&gt;j&amp;<span class="number">1</span>) b[k]^=b[j];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,u,v;</span><br><span class="line">    ll w;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="built_in">memset</span>(head,<span class="number">0xff</span>,<span class="keyword">sizeof</span> head);</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%lld"</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">        add(u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line">    _xor[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    cal();</span><br><span class="line">    ll ans=_xor[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">63</span>;i&gt;=<span class="number">0</span>;i--) <span class="keyword">if</span>(ans&lt;(ans^b[i])) ans^=b[i];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性基 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Codeforces Round 525 (Div. 2)</title>
      <link href="/2018/12/26/Codeforces%20Round%20525%20(Div.%202)/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://codeforces.com/contest/1088" target="_blank" rel="noopener">Codeforces Round #525 (Div. 2) </a></p></blockquote><a id="more"></a><h1 id="A-Ehab-and-another-construction-problem"><a href="#A-Ehab-and-another-construction-problem" class="headerlink" title="A. Ehab and another construction problem"></a>A. Ehab and another construction problem</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,x,x);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-Ehab-and-subtraction"><a href="#B-Ehab-and-subtraction" class="headerlink" title="B. Ehab and subtraction"></a>B. Ehab and subtraction</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    sort(a,a+n);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> tmp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;n&amp;&amp;cnt&lt;k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a[i]-tmp);</span><br><span class="line">        tmp=a[i];</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;n&amp;&amp;a[i]==tmp) i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(cnt&lt;k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Ehab-and-a-2-operation-task"><a href="#C-Ehab-and-a-2-operation-task" class="headerlink" title="C. Ehab and a 2-operation task"></a>C. Ehab and a 2-operation task</h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个长度为$n$的序列，有如下两种操作：</p><ul><li><p>将序列中的前$i$个数加上$x$</p></li><li><p>将序列中的前$i$个数模$x$</p></li></ul><p>要求使用不多于$n+1$次操作，使该序列变为<strong>严格递增</strong>。</p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>构造一个模$n+1$答案为1,2,3……n的序列即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e4</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> a[maxn];</span><br><span class="line">    <span class="keyword">int</span> x[maxn];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp=(a[i]+sum)%(n+<span class="number">1</span>);</span><br><span class="line">        x[i]=i-tmp;</span><br><span class="line">        <span class="keyword">if</span>(x[i]&lt;<span class="number">0</span>) x[i]+=n+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(x[i]) cnt++;</span><br><span class="line">        sum+=x[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cnt+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        <span class="keyword">if</span>(x[i]) <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>,<span class="number">1</span>,i+<span class="number">1</span>,x[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"2 %d %d\n"</span>,n,n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Ehab-and-another-another-xor-problem"><a href="#D-Ehab-and-another-another-xor-problem" class="headerlink" title="D. Ehab and another another xor problem"></a>D. Ehab and another another xor problem</h1><h2 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h2><p>交互题。</p><p>有两个数$a,b$，对于每次询问<code>? c d</code>，返回<code>cmp(a^c,b^d)</code>的值，要求在62次询问之内求出$a,b$的值，其中$0≤a,b&lt;2^{30}$.</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>考虑二进制分解，从最高位向下求解。</p><p>假设前k位已经确定，对于第k位的值，询问<code>(1,0)</code>,<code>(0,1)</code>,有如下情况：</p><ul><li><p>如果$a[k],b[k]$均为0，则<code>ask(1,0)=1</code>,<code>ask(0,1)=-1</code></p></li><li><p>如果$a[k],b[k]$均为1，则<code>ask(1,0)=-1</code>,<code>ask(0,1)=1</code></p></li><li><p>如果$a[k]≠b[k]$，则两次返回的值相同，且所得值为后k+1位的比较结果；</p><p>对于这种情况，需要在开始时<code>ask(0,0)</code>比较$a,b$后k位的大小，并根据比较的返回值更新该值。</p></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"? %d %d\n"</span>,a,b);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">0</span>,b=<span class="number">0</span>,x,y;</span><br><span class="line">    <span class="keyword">int</span> big=query(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">29</span>;~i;--i)</span><br><span class="line">    &#123;</span><br><span class="line">        x=query(a^(<span class="number">1</span>&lt;&lt;i),b);</span><br><span class="line">        y=query(a,b^(<span class="number">1</span>&lt;&lt;i));</span><br><span class="line">        <span class="keyword">if</span>(x==y)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(big==<span class="number">1</span>) a^=(<span class="number">1</span>&lt;&lt;i);</span><br><span class="line">            <span class="keyword">else</span> b^=(<span class="number">1</span>&lt;&lt;i);</span><br><span class="line">            big=x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x==<span class="number">-1</span>) a^=(<span class="number">1</span>&lt;&lt;i),b^=(<span class="number">1</span>&lt;&lt;i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"! %d %d\n"</span>,a,b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="E-Ehab-and-a-component-choosing-problem"><a href="#E-Ehab-and-a-component-choosing-problem" class="headerlink" title="E. Ehab and a component choosing problem"></a>E. Ehab and a component choosing problem</h1><h2 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h2><p>给定一个有$n$个结点的树，每个节点的点权为$a_u$.选定k个不相交的联通块，使$\frac{\sum\limits_{u \in s} a_u}{k}$的值最大，如果有多个解，最大化k的值。</p><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>如果不需要最大化k的值，显然取k=1，最大联通块的值$w$即为所求解。</p><p>对于k&gt;1的情况，只要求出值等于$w$的联通块数量即可求解。</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> val[maxn],head[maxn],cnt=<span class="number">0</span>;</span><br><span class="line">ll mx=<span class="number">-0x3f3f3f3f</span>,tot=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span> <span class="keyword">int</span> nex,to; &#125;edge[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[cnt].nex=head[u];</span><br><span class="line">    edge[cnt].to=v;</span><br><span class="line">    head[u]=cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans=val[u];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];~i;i=edge[i].nex)</span><br><span class="line">        <span class="keyword">if</span>(edge[i].to!=pre) ans+=max(dfs(edge[i].to,u),<span class="number">0l</span>l);</span><br><span class="line">    mx=max(ans,mx);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans=val[u];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];~i;i=edge[i].nex)</span><br><span class="line">        <span class="keyword">if</span>(edge[i].to!=pre) ans+=max(dfs2(edge[i].to,u),<span class="number">0l</span>l);</span><br><span class="line">    <span class="keyword">if</span>(mx==ans) &#123;</span><br><span class="line">        tot++;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,u,v;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;val[i]);</span><br><span class="line">    <span class="built_in">memset</span>(head,<span class="number">0xff</span>,<span class="keyword">sizeof</span> head);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">        add(u,v);</span><br><span class="line">        add(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    dfs2(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>,mx*tot,tot);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="F-Ehab-and-a-weird-weight-formula"><a href="#F-Ehab-and-a-weird-weight-formula" class="headerlink" title="F. Ehab and a weird weight formula"></a>F. Ehab and a weird weight formula</h1><h2 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h2><p>给定一个$n$个节点的树，每个节点有点权$a_u$，该树满足条件：对于树上的每个点（除权值最小的点），必有相邻的点$v$，使$a_v&lt;a_u$。要求构建一棵树，使树的权重最小。生成树的权重计算如下：</p><ul><li>对于每个点$u$,$w+=deg_u \cdot a_u$($deg_u$为生成树中节点$u$的度)</li><li>对于树上每条边${u,v}$,$w+=\lceil log_2(dist(u,v)) \rceil \cdot min(a_u,a_v)$，$dist(u,v)$为生成树上点$u,v$间的距离</li></ul><h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><p>对于所给的树，有如下性质：对于节点$u$的所有子节点$v$，有$a_v&gt;a_u$.即随着深度的增加，节点点权增加。</p><p>那么对于节点$u$，向上求第$1-2^k$倍的祖先节点$v$，用ST表求$\lceil log_2(dist(u,v)) \rceil \cdot min(a_u,a_v)+a[v]$的最小值，即可求出生成树的总权重。</p><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn],root=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">25</span>][maxn];</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; edge[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dp[<span class="number">0</span>][u]=pre;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">20</span>;i++)</span><br><span class="line">        <span class="keyword">if</span>(dp[i<span class="number">-1</span>][u]!=<span class="number">-1</span>) dp[i][u]=dp[i<span class="number">-1</span>][dp[i<span class="number">-1</span>][u]];</span><br><span class="line">    <span class="keyword">int</span> d;</span><br><span class="line">    ll tmp=<span class="number">0xffffffff</span>;</span><br><span class="line">    <span class="keyword">for</span>(d=<span class="number">0</span>;d&lt;<span class="number">20</span>&amp;&amp;dp[d][u]!=<span class="number">-1</span>;d++)</span><br><span class="line">        tmp=min(tmp,<span class="number">1l</span>l*(d+<span class="number">1</span>)*a[dp[d][u]]+a[u]);</span><br><span class="line">    tmp=min(tmp,<span class="number">1l</span>l*(d+<span class="number">1</span>)*a[root]+a[u]);</span><br><span class="line">    <span class="keyword">if</span>(~pre) ans+=tmp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;edge[u].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=edge[u][i];</span><br><span class="line">        <span class="keyword">if</span>(v!=pre) dfs(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,u,v;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;a[root]) root=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">        edge[u].push_back(v);</span><br><span class="line">        edge[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0xff</span>,<span class="keyword">sizeof</span> dp);</span><br><span class="line">    dfs(root,<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Codeforces Round </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「2018 ACM-ICPC Nanjing - Onsite」M - Mediocre String Problem (字符串)</title>
      <link href="/2018/11/19/ACM-ICPC-2018-Nanjing-Onsite-M/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://codeforces.com/gym/101981/attachments" target="_blank" rel="noopener">M-Mediocre String Problem</a><br>给定字符串S,T，求S的子串与T的前缀子串能够组成的回文串个数</p></blockquote><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定两个字符串$s ,t$，取$s$的子串$s’$和$t$的前缀子串$t’$，并使$|s’|&gt;|t’|$.拼接$s’,t’$得到$str=s’+t’$,求能使$str$为回文串的总方案数。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>由于$|s’|&gt;|t’|$，可令$s’=a+b,t’=c ，(|a|=|c|&gt;0,|b|&gt;0)$</p><p>因此$str=a+b+c$，由回文串性质可知，$b$为长度大于0的回文串，且$reverse(a)=c$</p><p>如，对于字符串$s=aabbcdedc,t=bbaa$，以$x=4$为例</p><p>$aabb|cdedc$</p><p>$aabb$</p><p>$\;\;abb$</p><p> $\;\;\;\;bb$</p><p>$\;\;\;\;\;b$</p><p>$a,c$有以上4种取法，$b=c或b=cdedc$，共有2×4=8种情况</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>对于$1≤i≤|s|$求出以$s$以第$i$位开头的回文串个数$CNT(i)$，可以采用Manacher，利用回文串性质差分求解；</p><p>翻转$s$,利用ex-KMP求解$reverse(s)$的后缀与$t$的最长公共前缀$LCP$；</p><p>对于原串$s$的第$x$位，能够组成的回文串个数为$LCP(x)·CNT(x+1)$，求和即为所求解.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[maxn],t[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> tmp[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> Len[maxn&lt;&lt;<span class="number">1</span>],cnt[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">init</span><span class="params">(<span class="keyword">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,len=<span class="built_in">strlen</span>(str);</span><br><span class="line">    tmp[<span class="number">0</span>]=<span class="string">'@'</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*len;i+=<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp[i]=<span class="string">'#'</span>;</span><br><span class="line">        tmp[i+<span class="number">1</span>]=str[i/<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    tmp[<span class="number">2</span>*len+<span class="number">1</span>]=<span class="string">'#'</span>;</span><br><span class="line">    tmp[<span class="number">2</span>*len+<span class="number">2</span>]=<span class="string">'$'</span>;</span><br><span class="line">    tmp[<span class="number">2</span>*len+<span class="number">3</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>*len+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">manacher</span><span class="params">(<span class="keyword">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mx=<span class="number">0</span>,ans=<span class="number">0</span>,pos=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> len=init(str);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(mx&gt;i) Len[i]=min(mx-i,Len[<span class="number">2</span>*pos-i]);</span><br><span class="line">        <span class="keyword">else</span> Len[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(tmp[i-Len[i]]==tmp[i+Len[i]]) Len[i]++;</span><br><span class="line">        <span class="keyword">if</span>(Len[i]+i&gt;mx) mx=Len[i]+i,pos=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tmp[i]==<span class="string">'#'</span>&amp;&amp;Len[i]==<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> x=i/<span class="number">2</span>-Len[i]/<span class="number">2</span>,y=(Len[i]<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>((Len[i]<span class="number">-1</span>)%<span class="number">2</span>==<span class="number">0</span>) y--;</span><br><span class="line">        cnt[x]++;</span><br><span class="line">        cnt[x+y+<span class="number">1</span>]--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> extend[maxn],nex[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getNext</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len=<span class="built_in">strlen</span>(s);</span><br><span class="line">    nex[<span class="number">0</span>]=len;</span><br><span class="line">    <span class="keyword">int</span> pos=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(pos+<span class="number">1</span>&lt;len&amp;&amp;s[pos]==s[pos+<span class="number">1</span>]) pos++;</span><br><span class="line">    nex[<span class="number">1</span>]=pos;</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">1</span>,L;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pos=k+nex[k]<span class="number">-1</span>;</span><br><span class="line">        L=nex[i-k];</span><br><span class="line">        <span class="keyword">if</span>(i+L&lt;=pos) nex[i]=L;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> j=pos-i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(j&lt;<span class="number">0</span>) j=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(i+j&lt;len&amp;&amp;s[i+j]==s[j]) j++;</span><br><span class="line">            nex[i]=j;</span><br><span class="line">            k=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getExtend</span><span class="params">(<span class="keyword">char</span> *s,<span class="keyword">char</span> *t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lens=<span class="built_in">strlen</span>(s),lent=<span class="built_in">strlen</span>(t);</span><br><span class="line">    getNext(t);</span><br><span class="line">    <span class="keyword">int</span> pos=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(pos&lt;lens&amp;&amp;pos&lt;lent&amp;&amp;s[pos]==t[pos]) pos++;</span><br><span class="line">    extend[<span class="number">0</span>]=pos;</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">0</span>,L;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;lens;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pos=k+extend[k]<span class="number">-1</span>;</span><br><span class="line">        L=nex[i-k];</span><br><span class="line">        <span class="keyword">if</span>(i+L&lt;=pos) extend[i]=L;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> j=pos-i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(j&lt;<span class="number">0</span>) j=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(i+j&lt;lens&amp;&amp;j&lt;lent&amp;&amp;s[i+j]==t[j]) j++;</span><br><span class="line">            extend[i]=j;</span><br><span class="line">            k=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,s,t);</span><br><span class="line">    <span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span> cnt);</span><br><span class="line">    <span class="keyword">int</span> lens=<span class="built_in">strlen</span>(s),lent=<span class="built_in">strlen</span>(t);</span><br><span class="line">    manacher(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lens;i++) cnt[i]+=cnt[i<span class="number">-1</span>];</span><br><span class="line">    reverse(s,s+lens);</span><br><span class="line">    getExtend(s,t);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;lens;i++)</span><br><span class="line">        ans+=<span class="number">1l</span>l*cnt[lens-i]*extend[i];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> String </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Manacher </tag>
            
            <tag> exKMP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「BZOJ-3732」Network (Kruskal重构树)</title>
      <link href="/2018/11/16/bzoj-3732/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3732" target="_blank" rel="noopener">BZOJ3732-Network</a><br>给定一个无向图，求图中A点到B点的所有路径中，最长边的最小值</p></blockquote><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>可以直接求出最小生成树，答案即为a到b路径上的最小边权，用LCA 求解。</p><p>此处采用Kruskal重构树求解。</p><h4 id="Kruskal重构树"><a href="#Kruskal重构树" class="headerlink" title="Kruskal重构树"></a>Kruskal重构树</h4><p>在Kruskal算法中，当找到两个不属于同一集合的联通块（子树）时，我们直接用边将两联通块相连，从而构建出最小生成树。</p><p>在Kruskal重构树中，对于两个不属于同一集合的联通块，我们首先建立一个虚点，作为两个子树的父节点，让两个子树的根节点与虚点相连，即可构造Kruskal重构树。虚点的点权即为原边的边权。</p><p>通过这一性质，我们成功将最小生成树上的路径信息转化成了点权信息。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>Kruskal重构树的构建过程如下：</p><ol><li><p>将边对于边权从小到大进行排序；</p></li><li><p>遍历边集，用并查集维护两点的连通性，若祖先不相同，则建立一个权值为边权的节点，其左右儿子分别为两个点的祖先节点，并将当前点设为两联通块的根节点；<br><img src="https://images2018.cnblogs.com/blog/1101696/201807/1101696-20180722084252832-1224079802.png" alt="img"></p></li></ol><p>对于构建完成的Kruskal重构树，对u,v求其LCA的点权即为所求解。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> u,v,w;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> Edge e) <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> w&lt;e.w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;es[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,pre[maxn],val[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> x==pre[x]?x:pre[x]=Find(pre[x]); &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tree[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tree[u].push_back(v);</span><br><span class="line">pre[v]=u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dep[maxn],fa[maxn][<span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> pre)</span><span class="comment">//预处理各节点深度+初始fa[u][0]</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dep[u]=dep[pre]+<span class="number">1</span>;</span><br><span class="line">fa[u][<span class="number">0</span>]=pre;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tree[u].size();i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=tree[u][i];</span><br><span class="line"><span class="keyword">if</span>(v!=pre) dfs(v,u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span><span class="comment">//预处理fa数组</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;i)&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>;u&lt;=n;u++)</span><br><span class="line">fa[u][i]=fa[fa[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**************求LCA(u,v)**************/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(dep[u]&lt;dep[v])</span><br><span class="line">swap(u,v);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> d=dep[u]-dep[v];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;(<span class="number">1</span>&lt;&lt;i)&lt;=d;i++)<span class="comment">//将u上调d个距离</span></span><br><span class="line"><span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;i)&amp;d) u=fa[u][i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(u==v) <span class="keyword">return</span> u;<span class="comment">//特判此时u,v是否在同一位置，如果是，u,v都在LCA上</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=(<span class="keyword">int</span>)<span class="built_in">log</span>(n);i&gt;=<span class="number">0</span>;i--)<span class="comment">//同时上调u,v</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(fa[u][i]!=fa[v][i])</span><br><span class="line">&#123;</span><br><span class="line">u=fa[u][i];</span><br><span class="line">v=fa[v][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fa[u][<span class="number">0</span>];<span class="comment">//最后会使u,v成为LCA的子节点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m,k,u,v,w;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*n;i++) pre[i]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;es[i].u, &amp;es[i].v, &amp;es[i].w);</span><br><span class="line">sort(es,es+m);</span><br><span class="line"><span class="keyword">int</span> index=n,lim=n&lt;&lt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">&#123;</span><br><span class="line">u=es[i].u,v=es[i].v,w=es[i].w;</span><br><span class="line"><span class="keyword">int</span> fx=Find(u),fy=Find(v);</span><br><span class="line"><span class="keyword">if</span>(fx==fy) <span class="keyword">continue</span>;</span><br><span class="line">index++;</span><br><span class="line">add(index,fx);</span><br><span class="line">add(index,fy);</span><br><span class="line">val[index]=w;</span><br><span class="line"><span class="keyword">if</span>(index==lim<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">dep[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">n=index;</span><br><span class="line">dfs(index,<span class="number">0</span>);</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">while</span>(k--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,val[LCA(u,v)]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Graph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LCA </tag>
            
            <tag> Kruskal重构树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「ZOJ-3430」Detect the Virus (AC自动机)</title>
      <link href="/2018/11/08/ZOJ-3430/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemId=4114" target="_blank" rel="noopener">「ZOJ-3430」Detect the Virus</a><br>AC自动机，求每个匹配串能匹配的模式串种类数</p></blockquote><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定$n$个模式串和$m$个匹配串(均以<code>base64</code>加密)，求匹配串中出现模式串的种类个数。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>对于<code>base64</code>的解码，即将字符对应的6位二进制串转化为8位二进制数，可以通过位运算完成，如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取编码后字符串当前位的二进制串，置于后6位</span></span><br><span class="line">len+=<span class="number">6</span>,x=(x&lt;&lt;<span class="number">6</span>)|base64[encode[i]];</span><br><span class="line"><span class="keyword">if</span>(len&gt;=<span class="number">8</span>) &#123;</span><br><span class="line">    <span class="comment">//取x的前8位，即为解码后的字符</span></span><br><span class="line">decode[p++] = (x &gt;&gt; (len - <span class="number">8</span>)) &amp; <span class="number">0xff</span>;</span><br><span class="line">len -= <span class="number">8</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>理论上解码之后就可以当做AC自动机模板题做然而</del></p><ul><li><code>Segmentation Fault</code> ：解码之后的字符串范围在0-256，需要使用<code>unsigned char</code>，否则会导致数组下标小于零越界(其实<code>int</code>也可以）;</li><li><code>Wrong Answer</code>：解码后的字符串值包含0，不能直接使用<code>strlen(str)</code>求解字符串长度；</li><li><code>Wrong Answer</code>：求解的是字符串的<code>种类数</code></li></ul><p>好了我就这么被卡了5小时。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> b64[]=<span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">50000</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; mp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> str[<span class="number">5000</span>+<span class="number">10</span>],enstr[<span class="number">5000</span>+<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">decode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len=<span class="number">0</span>,x=<span class="number">0</span>,p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;enstr[i]&amp;&amp;enstr[i]!=<span class="string">'='</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        len+=<span class="number">6</span>,x=(x&lt;&lt;<span class="number">6</span>)|mp[enstr[i]];</span><br><span class="line">        <span class="keyword">if</span>(len&gt;=<span class="number">8</span>) &#123;</span><br><span class="line">            str[p++] = (x &gt;&gt; (len - <span class="number">8</span>)) &amp; <span class="number">0xff</span>;</span><br><span class="line">            len -= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ACAutomation</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> nex[maxn][<span class="number">256</span>],fail[maxn],en[maxn],vis[maxn];</span><br><span class="line">    <span class="keyword">int</span> root,L;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">newnode</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++)</span><br><span class="line">            nex[L][i]=<span class="number">-1</span>;</span><br><span class="line">        en[L++]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> L<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        L=<span class="number">0</span>;</span><br><span class="line">        root=newnode();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> buf[],<span class="keyword">int</span> len,<span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> now=root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nex[now][buf[i]]==<span class="number">-1</span>)</span><br><span class="line">                nex[now][buf[i]]=newnode();</span><br><span class="line">            now=nex[now][buf[i]];</span><br><span class="line">        &#125;</span><br><span class="line">        en[now]=key;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">        fail[root]=root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++)</span><br><span class="line">            <span class="keyword">if</span>(nex[root][i]==<span class="number">-1</span>)</span><br><span class="line">                nex[root][i]=root;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                fail[nex[root][i]]=root;</span><br><span class="line">                Q.push(nex[root][i]);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">while</span>(!Q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> now=Q.front();</span><br><span class="line">            Q.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++)</span><br><span class="line">                <span class="keyword">if</span>(nex[now][i]==<span class="number">-1</span>)</span><br><span class="line">                    nex[now][i]=nex[fail[now]][i];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    fail[nex[now][i]]=nex[fail[now]][i];</span><br><span class="line">                    Q.push(nex[now][i]);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> buf[],<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> now=root;</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            now=nex[now][buf[i]];</span><br><span class="line">            <span class="keyword">int</span> tmp=now;</span><br><span class="line">            <span class="keyword">while</span>(tmp!=root)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(en[tmp]) vis[en[tmp]]=<span class="literal">true</span>;</span><br><span class="line">                tmp=fail[tmp];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span>(vis[i]) res++;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;AC;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">64</span>;i++) mp[b64[i]]=i;</span><br><span class="line">    <span class="keyword">int</span> m,len;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        AC.init();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,enstr);</span><br><span class="line">            len=decode();</span><br><span class="line">            AC.insert(str,len,i);</span><br><span class="line">        &#125;</span><br><span class="line">        AC.build();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">        <span class="keyword">while</span>(m--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,enstr);</span><br><span class="line">            len=decode();</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,AC.query(str,len));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> String </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AC自动机 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「LA-3942」Remember the Word (Trie树+DP)</title>
      <link href="/2018/10/27/UVALive-3942/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=1943" target="_blank" rel="noopener">「LA-3942」Remember the Word</a><br>Trie+DP，求解若干个模式串组合构成目标串的方案数</p></blockquote><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个由小写字母组成的长字符串$S(1≤|S|≤300000)$和$N(1≤N≤4000)$条短字符串$C_i(1≤|C_i|≤100)$，求用短字符串构成长字符串的方案数，结果对$20071027$取模。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>对于目标串$S$，构建数组$dp[i]$，表示位于$i$时，字符串的后缀$S’$的组成方案数。</p><p>对于模式串$C_i$，若其能与$S’$长度为$len$的前缀子串匹配，则有状态转移方程$dp[i]+=dp[i+len+1]$，由于$|C_i|≤100$，则最多只需枚举长度为$100$的前缀子串。</p><p>考虑对模式串$C_i$建立Trie树，枚举后缀子串$S’$即可求解。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">20071027</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> dp[maxn],len;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> trie[maxn][<span class="number">30</span>],tot;</span><br><span class="line"><span class="keyword">bool</span> val[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_ch</span><span class="params">(<span class="keyword">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(str);</span><br><span class="line"><span class="keyword">int</span> root=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> id=str[i]-<span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">if</span>(!trie[root][id]) trie[root][id]=++tot;</span><br><span class="line">root=trie[root][id];</span><br><span class="line">&#125;</span><br><span class="line">val[root]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find_ch</span><span class="params">(<span class="keyword">char</span> *str,<span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> root=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=pos;i&lt;len&amp;&amp;i&lt;=pos+<span class="number">100</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> id=str[i]-<span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">if</span>(!trie[root][id]) <span class="keyword">return</span>;</span><br><span class="line">root=trie[root][id];</span><br><span class="line"><span class="keyword">if</span>(val[root]) (dp[pos]+=dp[i+<span class="number">1</span>])%=mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(trie,<span class="number">0</span>,<span class="keyword">sizeof</span> trie);</span><br><span class="line"><span class="built_in">memset</span>(val,<span class="number">0</span>,<span class="keyword">sizeof</span> val);</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span> dp);</span><br><span class="line">tot=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> t[<span class="number">105</span>];</span><br><span class="line">    <span class="keyword">int</span> n,cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,t);</span><br><span class="line">            insert_ch(t);</span><br><span class="line">        &#125;</span><br><span class="line">        len=<span class="built_in">strlen</span>(s);</span><br><span class="line">        dp[len]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) find_ch(s,i);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: %d\n"</span>,++cnt,dp[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> String </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> Trie树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Codeforces Round 513 (rated, Div. 1 + Div. 2)</title>
      <link href="/2018/10/07/Codeforces%20Round%20513/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://codeforces.com/contest/1060" target="_blank" rel="noopener">Codeforces Round #513 by Barcelona Bootcamp (rated, Div. 1 + Div. 2)</a></p></blockquote><p>渡劫失败，菜得安详，自闭了。<br><a id="more"></a></p><h1 id="A-Phone-Numbers"><a href="#A-Phone-Numbers" class="headerlink" title="A.Phone Numbers"></a>A.Phone Numbers</h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一组数字，计算在每一组数字串均以<code>8</code>开头的前提下，能构成的长度为11的字符串的最大数量。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">105</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">'8'</span>) cnt++;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp=n-i;</span><br><span class="line">        <span class="keyword">if</span>(tmp&gt;=i*<span class="number">10</span>) ans=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-Maximum-Sum-of-Digits"><a href="#B-Maximum-Sum-of-Digits" class="headerlink" title="B.Maximum Sum of Digits"></a>B.Maximum Sum of Digits</h1><h2 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h2><p>$S(x)$表示数字$x$各位相加的值。给定一个数$x$，令$a+b=x$，求$S(a)+S(b)$的最大值。</p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>贪心。使a中包含尽可能多的9，即为所求解。</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">10</span>) <span class="keyword">return</span> <span class="number">0</span>*<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,n);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> tmp=<span class="number">1</span>,i=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(tmp&lt;=n) tmp*=<span class="number">10</span>,i++;</span><br><span class="line">    tmp/=<span class="number">10</span>;</span><br><span class="line">    tmp--;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">    ans=i*<span class="number">9</span>;</span><br><span class="line">    tmp=n-tmp;</span><br><span class="line">    <span class="keyword">while</span>(tmp)</span><br><span class="line">    &#123;</span><br><span class="line">        ans+=tmp%<span class="number">10</span>;</span><br><span class="line">        tmp/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Maximum-Subrectangle"><a href="#C-Maximum-Subrectangle" class="headerlink" title="C.Maximum Subrectangle"></a>C.Maximum Subrectangle</h1><h2 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h2><p>给定数组$a,b$,建立矩阵$c$，令矩阵$c[i][j]=a[i]·b[j]$，求不超过$x$的最大子矩阵和。</p><h2 id="解法-1"><a href="#解法-1" class="headerlink" title="解法"></a>解法</h2><p>可以得知子矩阵和为$(a[i]+a[i+1]+…+a[j])*(b[i]+b[i+1]+…+b[j])$.</p><p>对数组$a,b$求前缀和，分别计算出$a,b$区间长度为$[1,n]$时所能达到的最大值，遍历求解即可。</p><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x,a[<span class="number">2005</span>],b[<span class="number">2005</span>],ma[<span class="number">2005</span>],mb[<span class="number">2005</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    a[<span class="number">0</span>]=b[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">        a[i]+=a[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;b[i]);</span><br><span class="line">        b[i]+=b[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;x);</span><br><span class="line">    <span class="built_in">memset</span>(ma,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> ma);</span><br><span class="line">    <span class="built_in">memset</span>(mb,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> mb);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=n;j++)</span><br><span class="line">            ma[j-i+<span class="number">1</span>]=min(ma[j-i+<span class="number">1</span>],a[j]-a[i<span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=m;j++)</span><br><span class="line">            mb[j-i+<span class="number">1</span>]=min(mb[j-i+<span class="number">1</span>],b[j]-b[i<span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            <span class="keyword">if</span>(ma[i]*mb[j]&lt;=x) ans=max(ans,i*j);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Social-Circles"><a href="#D-Social-Circles" class="headerlink" title="D.Social Circles"></a>D.Social Circles</h1><h2 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h2><p>使用若干个圆桌，给$n$个人排座位。每个人左边需要有$L[i]$个空凳子，右边需要有$R[i]$个空凳子，求最少需要的凳子数。</p><h2 id="解法-2"><a href="#解法-2" class="headerlink" title="解法"></a>解法</h2><p>贪心。</p><p>每次加入一个人，这个人可能与他人相邻或与自己成环。与他人相连时，所需的值为$max(L_{i},R_{j})+1$；与自己成环时，所需的值为$max(L_i,R_i)+1$.要使总贡献最小，只需要使当前所取得的$max(L,R)$最小。</p><h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> l[maxn],r[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l[i],&amp;r[i]);</span><br><span class="line">    sort(l,l+n);</span><br><span class="line">    sort(r,r+n);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        ans+=max(l[i],r[i])+<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Codeforces Round </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「CodeForces-498C」Array and Operations(数论+网络流)</title>
      <link href="/2018/10/03/CodeForces-498C/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://codeforces.com/problemset/problem/498/C" target="_blank" rel="noopener">「CodeForces-498C」Array and Operations</a><br>给定n个点和m个边集，每次操作可以将相连边的两个点值同时除以一个公约数，问最大操作次数</p></blockquote><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个长为$n$的数组，以及$m$对下标为$(a,b)$的点对，且满足下标a+b为奇数（即奇数点只与偶数点匹配），每次操作可以将同一组的两个数同时除以一个公约数，问最多能进行多少次操作。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>显然题目所给的是一个二分图。</p><p>对于每个质因数分开考虑。对于奇数点，向源点连接一个容量为该因子个数的边；对于偶数点，则向汇点建立一个容量为因子数的边；对于有边相连的点对，建立容量为$inf$的边。</p><p>对于题给的数组$a[i]$，通过分解质因数的方式计算每个质因数所建图的最大流，求和即为所求解。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_V=<span class="number">200</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用于表示边的结构体（终点，流量，反向边）</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> to,cap,rev;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; G[MAX_V];<span class="comment">//图的邻接表表示</span></span><br><span class="line"><span class="keyword">int</span> level[MAX_V];<span class="comment">//顶点到源点的距离标号</span></span><br><span class="line"><span class="keyword">int</span> iter[MAX_V];<span class="comment">//当前弧</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> to,<span class="keyword">int</span> cap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">G[from].push_back((edge)&#123;to,cap,G[to].size()&#125;);</span><br><span class="line">G[to].push_back((edge)&#123;from,<span class="number">0</span>,G[from].size()<span class="number">-1</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算从源点出发的距离标号</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(level,<span class="number">-1</span>,<span class="keyword">sizeof</span>(level));</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">level[s]=<span class="number">0</span>;</span><br><span class="line">que.push(s);</span><br><span class="line"><span class="keyword">while</span>(!que.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=que.front();que.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G[v].size();i++)</span><br><span class="line">&#123;</span><br><span class="line">edge &amp;e=G[v][i];</span><br><span class="line"><span class="keyword">if</span>(e.cap&gt;<span class="number">0</span>&amp;&amp;level[e.to]&lt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">level[e.to]=level[v]+<span class="number">1</span>;</span><br><span class="line">que.push(e.to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过DFS寻找增广路</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> t,<span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(v==t) <span class="keyword">return</span> f;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> &amp;i=iter[v];i&lt;G[v].size();i++)</span><br><span class="line">&#123;</span><br><span class="line">edge &amp;e=G[v][i];</span><br><span class="line"><span class="keyword">if</span>(e.cap&gt;<span class="number">0</span> &amp;&amp; level[v]&lt;level[e.to])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> d=dfs(e.to,t,min(f,e.cap));</span><br><span class="line"><span class="keyword">if</span>(d&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">e.cap-=d;</span><br><span class="line">G[e.to][e.rev].cap+=d;</span><br><span class="line"><span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求解从s到t的最大流</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max_flow</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> flow=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;;)</span><br><span class="line">&#123;</span><br><span class="line">bfs(s);</span><br><span class="line"><span class="keyword">if</span>(level[t]&lt;<span class="number">0</span>) <span class="keyword">return</span> flow;</span><br><span class="line"><span class="built_in">memset</span>(iter,<span class="number">0</span>,<span class="keyword">sizeof</span>(iter));</span><br><span class="line"><span class="keyword">int</span> f;</span><br><span class="line"><span class="keyword">while</span>((f=dfs(s,t,INF))&gt;<span class="number">0</span>) flow+=f;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,a[<span class="number">105</span>],u[<span class="number">105</span>],v[<span class="number">105</span>],s,t,ans=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;MAX_V;i++) G[i].clear();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tot=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(a[i]%x==<span class="number">0</span>) a[i]/=x,tot++;</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">2</span>) add(s,i,tot);</span><br><span class="line">        <span class="keyword">else</span> add(i,t,tot);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++) add(u[i],v[i],INF);</span><br><span class="line">    ans+=max_flow(s,t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u[i],&amp;v[i]);</span><br><span class="line">        <span class="keyword">if</span>(v[i]&amp;<span class="number">1</span>) swap(u[i],v[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    s=<span class="number">0</span>,t=n+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>;j*j&lt;=a[i];j++)</span><br><span class="line">            <span class="keyword">if</span>(a[i]%j==<span class="number">0</span>) solve(j);</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;<span class="number">1</span>) solve(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Graph </category>
          
          <category> Network Flow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「SPOJ-P104」Highways(生成树计数)</title>
      <link href="/2018/10/02/SPOJ-P104/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="https://www.spoj.com/problems/HIGH/" target="_blank" rel="noopener">「SPOJ-P104」Highways</a><br>Matrix-Tree定理，求生成树的个数</p></blockquote><a id="more"></a><hr><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>一个有n座城市的组成国家，城市1至n编号，其中一些城市之间可以修建高速公路，需要有选择的修建一些高速公路，从而组成一个交通网络。计算有多少种方案，使得任意两座城市之间恰好只有一条路径。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>1、图G的度数矩阵$D[G]$，满足当$i≠j$ 时,$d_{ij}=0$；当$i=j$时，$d_{ij}$ 等于$vi$ 的度数。</p><p>2、图G的邻接矩阵$A[G]$</p><p>定义图G的基尔霍夫矩阵$C[G]=D[G]-A[G]$有如下性质：</p><p>①对于任意一个图,他的基尔霍夫矩阵C的行列式的值为0. </p><p>②如果图G不连通,其基尔霍夫矩阵的任意主子式行列式值为0.</p><p>③若图G是一棵树,则C[G]的任意一个n-1阶主子式的行列式的值为1. </p><h4 id="Matrix-Tree定理"><a href="#Matrix-Tree定理" class="headerlink" title="Matrix-Tree定理"></a>Matrix-Tree定理</h4><p>定义$G $的所有不同的生成树的个数等于其Kirchhoff矩阵$C[G]$任何一个$n-1 $阶主子式的行列式的绝对值。所谓$n-1$ 阶主子式，就是对于$r(1≤r≤n)$，将$C[G]$的第$r$ 行、第$r $列同时去掉后得到的新矩阵，用$Cr[G]$表示。</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><blockquote><p><a href="https://en.wikipedia.org/wiki/Kirchhoff%27s_theorem" target="_blank" rel="noopener">Kirchhoff’s theorem</a><br><a href="https://wenku.baidu.com/view/872eb02de2bd960590c677c6.html" target="_blank" rel="noopener">2007年国家集训队论文  周冬《生成树的计数及其应用》</a></p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> C[<span class="number">15</span>][<span class="number">15</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">det</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ret=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">while</span>(C[j][i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">long</span> <span class="keyword">long</span> t=C[i][i]/C[j][i];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=i;k&lt;=n;k++)</span><br><span class="line">                    C[i][k]=(C[i][k]-C[j][k]*t);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=i;k&lt;=n;k++)</span><br><span class="line">                    swap(C[i][k],C[j][k]);</span><br><span class="line">                ret=-ret;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span>(!C[i][i])</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        ret=ret*C[i][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret&gt;<span class="number">0</span>?ret:-ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t,n,m,u,v;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="built_in">memset</span>(C,<span class="number">0</span>,<span class="keyword">sizeof</span> C);</span><br><span class="line">        <span class="keyword">while</span>(m--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">            C[u][u]++;C[v][v]++;</span><br><span class="line">            C[u][v]--;C[v][u]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,det(n));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Graph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matrix-Tree定理 </tag>
            
            <tag> 基尔霍夫矩阵 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「HDU-4821」String(字符串hash)</title>
      <link href="/2018/09/27/HDU-4821/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4821" target="_blank" rel="noopener">「HDU-4821」String</a><br>字符串hash，求长度为m*l子串中m个小子串两两互不完全相同的子串个数</p></blockquote><a id="more"></a><p>*假的字符串选手发现自己甚至不会hash，学习一个。</p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个字符串，求将长度为m*l的子串分割为每段长度为l的m段后，m段两两互不完全相同的子串个数。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>对字符串求hash值，map计数去重，判断当前不同字符串数是否等于m.</p><p>对于每个中间区间相同的区间，利用滑动窗口求解降低复杂度，即：删除左侧子串哈希值，将右边区间哈希值加入集合。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> seed=<span class="number">31</span>;</span><br><span class="line"></span><br><span class="line">ull base[maxn],h[maxn];</span><br><span class="line"><span class="built_in">map</span> &lt;ull,<span class="keyword">int</span>&gt; hashmap;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function">ull <span class="title">gethash</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;<span class="keyword">return</span> h[r]-h[l<span class="number">-1</span>]*base[r-l+<span class="number">1</span>]; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,l,len;</span><br><span class="line">    base[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;maxn;i++)</span><br><span class="line">        base[i]=base[i<span class="number">-1</span>]*seed;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;m,&amp;l)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">        len=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++)</span><br><span class="line">            h[i]=h[i<span class="number">-1</span>]*seed+s[i]-<span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=l&amp;&amp;i+m*l&lt;=len;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            hashmap.clear();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;i+m*l;j+=l)</span><br><span class="line">                hashmap[gethash(j,j+l<span class="number">-1</span>)]++;</span><br><span class="line">            <span class="keyword">if</span>(hashmap.size()==m) cnt++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=len-m*l-l+<span class="number">1</span>;j+=l)</span><br><span class="line">            &#123;</span><br><span class="line">                ull tmp=gethash(j,j+l<span class="number">-1</span>);</span><br><span class="line">                hashmap[tmp]--;</span><br><span class="line">                <span class="keyword">if</span>(!hashmap[tmp]) hashmap.erase(tmp);</span><br><span class="line">                hashmap[gethash(j+m*l,j+m*l+l<span class="number">-1</span>)]++;</span><br><span class="line">                <span class="keyword">if</span>(hashmap.size()==m) cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cnt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> String </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hash </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「2018 ACM-ICPC Xuzhou - Online」J - Maze Designer(最大生成树+LCA)</title>
      <link href="/2018/09/25/ACM-ICPC-2018-Xuzhou-Online-J/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="https://nanti.jisuanke.com/t/31462" target="_blank" rel="noopener">J-Maze Designer</a><br>建立最大生成树，求树上任意两点之间的距离</p></blockquote><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个$n×m$的网格，在两个相邻点之间建立一堵墙会有一定的花费。建立一个迷宫，使任意两点之间只有一条路径可达，求在最低建造成本下，给定任意两点之间的路径。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>考虑在所有墙都建立的情况下，移除若干堵墙，使所有点连通，让所有点连通的最大花费即为题目所求的建造方案。建立最大生成树后求两点间的LCA，即可求解。</p><p>*我也不知道我比赛时候写的离线LCA有啥问题</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">250000</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,v;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> cost;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> edge &amp;e) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cost&gt;e.cost;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;es[<span class="number">2</span>*maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pre[maxn],cnt,E,V;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tree[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> pre[x]==x?x:pre[x]=Find(pre[x]); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kruskal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=V;i++) pre[i]=i;</span><br><span class="line">    sort(es,es+E);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;E;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        edge e=es[i];</span><br><span class="line">        <span class="keyword">int</span> fx=Find(e.u),fy=Find(e.v);</span><br><span class="line">        <span class="keyword">if</span>(fx!=fy)</span><br><span class="line">        &#123;</span><br><span class="line">            pre[fx]=fy;</span><br><span class="line">            tree[e.v].push_back(e.u);</span><br><span class="line">            tree[e.u].push_back(e.v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dep[maxn],fa[maxn+<span class="number">1</span>][<span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/**************预处理过程**************/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> pre)</span><span class="comment">//预处理各节点深度+初始fa[u][0]</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dep[u]=dep[pre]+<span class="number">1</span>;</span><br><span class="line">fa[u][<span class="number">0</span>]=pre;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tree[u].size();i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=tree[u][i];</span><br><span class="line"><span class="keyword">if</span>(v!=pre) dfs(v,u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span><span class="comment">//预处理fa数组</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;i)&lt;=V;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>;u&lt;=V;u++)</span><br><span class="line">fa[u][i]=fa[fa[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**************求LCA(u,v)**************/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[u]&lt;dep[v])</span><br><span class="line">swap(u,v);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> d=dep[u]-dep[v];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;(<span class="number">1</span>&lt;&lt;i)&lt;=d;i++)<span class="comment">//将u上调d个距离</span></span><br><span class="line"><span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;i)&amp;d) u=fa[u][i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(u==v) <span class="keyword">return</span> u;<span class="comment">//特判此时u,v是否在同一位置，如果是，u,v都在LCA上</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=(<span class="keyword">int</span>)<span class="built_in">log</span>(V);i&gt;=<span class="number">0</span>;i--)<span class="comment">//同时上调u,v</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(fa[u][i]!=fa[v][i])</span><br><span class="line">&#123;</span><br><span class="line">u=fa[u][i];</span><br><span class="line">v=fa[v][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fa[u][<span class="number">0</span>];<span class="comment">//最后会使u,v成为LCA的子节点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,q,x1,x2,y1,y2,u,v;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> w1,w2;</span><br><span class="line">    <span class="keyword">char</span> s1[<span class="number">5</span>],s2[<span class="number">5</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    cnt=<span class="number">0</span>;</span><br><span class="line">    V=n*m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s%lld%s%lld"</span>,s1,&amp;w1,s2,&amp;w2);</span><br><span class="line">            <span class="keyword">if</span>(s1[<span class="number">0</span>]==<span class="string">'D'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                es[cnt].u=(i<span class="number">-1</span>)*n+j;</span><br><span class="line">                es[cnt].v=i*n+j;</span><br><span class="line">                es[cnt++].cost=w1;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s1[<span class="number">0</span>]==<span class="string">'R'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                es[cnt].u=(i<span class="number">-1</span>)*n+j;</span><br><span class="line">                es[cnt].v=(i<span class="number">-1</span>)*n+j+<span class="number">1</span>;</span><br><span class="line">                es[cnt++].cost=w1;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(s2[<span class="number">0</span>]==<span class="string">'D'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                es[cnt].u=(i<span class="number">-1</span>)*n+j;</span><br><span class="line">                es[cnt].v=i*n+j;</span><br><span class="line">                es[cnt++].cost=w2;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s2[<span class="number">0</span>]==<span class="string">'R'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                es[cnt].u=(i<span class="number">-1</span>)*n+j;</span><br><span class="line">                es[cnt].v=(i<span class="number">-1</span>)*n+j+<span class="number">1</span>;</span><br><span class="line">                es[cnt++].cost=w2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    E=cnt;</span><br><span class="line">    kruskal();</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    init();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line">    <span class="keyword">while</span>(q--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2);</span><br><span class="line">        u=(x1<span class="number">-1</span>)*n+y1;</span><br><span class="line">        v=(x2<span class="number">-1</span>)*n+y2;</span><br><span class="line">        <span class="keyword">int</span> root=LCA(u,v);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,<span class="number">-2</span>*dep[root]+dep[u]+dep[v]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Graph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最小生成树 </tag>
            
            <tag> LCA </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「POJ-2778」DNA Sequence (AC自动机+矩阵快速幂)</title>
      <link href="/2018/09/24/POJ-2778/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://poj.org/problem?id=2778" target="_blank" rel="noopener">「POJ-2778」DNA Sequence</a><br>AC自动机+矩阵快速幂，求长度为n且不包含任一不合法子序列的序列数量</p></blockquote><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定m个不合法序列，求所有长度为n，且不包含任何不合法子序列的序列数量(序列中只含A,T,C,G四个字符)。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>对于给定的m个序列，构建trie树。对于trie树上每一点的单步可达关系建立邻接矩阵，对矩阵求其n次幂，$\sum_{i=1}^n{matrix[0][i]}$即为所求解。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">100000</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Matrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> row,column;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> data[maxn][maxn];</span><br><span class="line">    <span class="function">Matrix <span class="title">mul</span><span class="params">(Matrix a,Matrix b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Matrix ans;</span><br><span class="line">        ans.row=ans.column=a.row;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.row;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>,k;j&lt;b.column;j++)</span><br><span class="line">                <span class="keyword">for</span>(ans.data[i][j]=k=<span class="number">0</span>;k&lt;a.row;k++)</span><br><span class="line">                    (ans.data[i][j]+=a.data[i][k]*b.data[k][j])%=mod;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Matrix <span class="title">pow</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Matrix ans,base=*<span class="keyword">this</span>;</span><br><span class="line">        ans.row=ans.column=row;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;row;i++)</span><br><span class="line">            ans.data[i][i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(n&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(n%<span class="number">2</span>)</span><br><span class="line">                ans=mul(ans,base);</span><br><span class="line">            base=mul(base,base);</span><br><span class="line">            n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;matrix;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">(<span class="keyword">char</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="string">'A'</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="string">'C'</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="string">'T'</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="string">'G'</span>) <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ACAutomation</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> trie[maxn][<span class="number">4</span>],fail[maxn];</span><br><span class="line"><span class="keyword">int</span> tag[maxn];</span><br><span class="line"><span class="keyword">int</span> root,L;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">newnode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">trie[L][i]=<span class="number">-1</span>;</span><br><span class="line">L++;</span><br><span class="line"><span class="keyword">return</span> L<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">L=<span class="number">0</span>;</span><br><span class="line">root=newnode();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入模式串，构造单词树(Keyword tree)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> buf[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(buf);</span><br><span class="line"><span class="keyword">int</span> now=root;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(trie[now][id(buf[i])]==<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">trie[now][id(buf[i])]=newnode();</span><br><span class="line">tag[L<span class="number">-1</span>]=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">now=trie[now][id(buf[i])];</span><br><span class="line">&#125;</span><br><span class="line">tag[now]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用BFS计算每个节点的fail指针，构造trie树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">fail[root]=root;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line"><span class="keyword">if</span>(trie[root][i]==<span class="number">-1</span>)</span><br><span class="line">trie[root][i]=root;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">fail[trie[root][i]]=root;</span><br><span class="line">Q.push(trie[root][i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!Q.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> now=Q.front();</span><br><span class="line">Q.pop();</span><br><span class="line"><span class="keyword">if</span>(tag[fail[now]]) tag[now]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line"><span class="keyword">if</span>(trie[now][i]==<span class="number">-1</span>)</span><br><span class="line">trie[now][i]=trie[fail[now]][i];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">fail[trie[now][i]]=trie[fail[now]][i];</span><br><span class="line">Q.push(trie[now][i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildMatrix</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    matrix.row=matrix.column=L;</span><br><span class="line">    <span class="built_in">memset</span>(matrix.data,<span class="number">0</span>,<span class="keyword">sizeof</span> matrix.data);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;L;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)</span><br><span class="line">                <span class="keyword">if</span>(!tag[i]&amp;&amp;!tag[trie[i][j]])</span><br><span class="line">                    matrix.data[i][trie[i][j]]++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;AC;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,n;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">20</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;m,&amp;n);</span><br><span class="line">    AC.init();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">        AC.insert(s);</span><br><span class="line">    &#125;</span><br><span class="line">    AC.build();</span><br><span class="line">    AC.buildMatrix();</span><br><span class="line">    matrix=matrix.<span class="built_in">pow</span>(n);</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;AC.L;i++)</span><br><span class="line">        (ans+=matrix.data[<span class="number">0</span>][i])%=mod;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> String </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AC自动机 </tag>
            
            <tag> 矩阵快速幂 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「POJ-2449」Remmarguts&#39; Date(k短路)</title>
      <link href="/2018/09/10/POJ-2449/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://poj.org/problem?id=2449" target="_blank" rel="noopener">「POJ2499」Remmarguts’ Date</a><br>A*算法，k短路问题</p></blockquote><a id="more"></a><hr><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一张有向图，求s到t的第k短路。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><h4 id="A-算法"><a href="#A-算法" class="headerlink" title="A*算法"></a>A*算法</h4><p><a href="https://zh.wikipedia.org/wiki/A*%E6%90%9C%E5%B0%8B%E6%BC%94%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">A*算法</a>是一种启发式搜索算法。用于在图形平面上，对于有多个节点的路径，求出最低通过成本。</p><p>启发式搜索:在当前搜索节点往下一步节点时，可以通过启发函数来进行选择，选择代价最小的节点作为下一步节点而跳转其上。</p><p>A*算法的估值函数：</p><p>$$f(n)=g(n)+h(n)$$</p><p>其中：</p><p>$g(n)​$是指从初始状态到当前状态n的<strong>实际花费</strong>。</p><p>$h(n)$是指从当前状态n到最终状态的<strong>估计费用</strong>。</p><p>$f(n)$是指初始状态经过目标n到达最终状态的<strong>估计花费</strong>。</p><h4 id="k短路问题"><a href="#k短路问题" class="headerlink" title="k短路问题"></a>k短路问题</h4><p>在k短路问题中，$g(n)$表示当前已经走过的距离，$h(n)$为当前点到终点t的最短路；</p><p>对于估值函数，定义结构体：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> f,g,h;<span class="comment">//f(n),g(n),h(n)函数</span></span><br><span class="line">    <span class="keyword">int</span> id;<span class="comment">//当前点的编号</span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> A a)<span class="keyword">const</span>&#123;<span class="comment">//定义比较函数</span></span><br><span class="line">        <span class="keyword">if</span>(a.f==f) <span class="keyword">return</span> a.g&lt;g;</span><br><span class="line">        <span class="keyword">return</span> a.f&lt;f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用优先队列维护$f(n)$，使每次取到的最小的$f(n)$即为当前状态到目标点的最小花费；我们可以据此确定选取的顺序，并保证每一次更新的距离一定是当前所有情况能转移到的最小情况。</p><p>为了确定目标点被走过的次数，我们通常用$cnt$表示终点被经过的次数当$cnt=k$时，终止循环。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm=<span class="number">100000</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,k,cnt,head[maxn],revhead[maxn],dis[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v,w,nex;</span><br><span class="line">&#125;edge[maxm],revedge[maxm];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head,<span class="number">0xff</span>,<span class="keyword">sizeof</span> head);</span><br><span class="line">    <span class="built_in">memset</span>(revhead,<span class="number">0xff</span>,<span class="keyword">sizeof</span> revhead);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[cnt].v=v,revedge[cnt].v=u;</span><br><span class="line">    edge[cnt].w=revedge[cnt].w=w;</span><br><span class="line">    edge[cnt].nex=head[u];</span><br><span class="line">    revedge[cnt].nex=revhead[v];</span><br><span class="line">    head[u]=revhead[v]=cnt;</span><br><span class="line">    cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> src)</span>      <span class="comment">//建立反向图，求图中所有点到终点的最短路径</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) dis[i]=inf;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">    vis[src]=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">    que.push(src);</span><br><span class="line">    dis[src]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!que.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=que.front();</span><br><span class="line">        que.pop();</span><br><span class="line">        vis[u]=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=revhead[u];~i;i=revedge[i].nex)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=revedge[i].v,w=revedge[i].w;</span><br><span class="line">            <span class="keyword">if</span>(dis[v]&gt;dis[u]+w)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[v]=dis[u]+w;</span><br><span class="line">                <span class="keyword">if</span>(!vis[v])</span><br><span class="line">                &#123;</span><br><span class="line">                    que.push(v);</span><br><span class="line">                    vis[v]=<span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> f,g,h;<span class="comment">//f(n),g(n),h(n)函数</span></span><br><span class="line">    <span class="keyword">int</span> id;<span class="comment">//当前点的编号</span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> A a)<span class="keyword">const</span>&#123;<span class="comment">//定义比较函数</span></span><br><span class="line">        <span class="keyword">if</span>(a.f==f) <span class="keyword">return</span> a.g&lt;g;</span><br><span class="line">        <span class="keyword">return</span> a.f&lt;f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Astar</span><span class="params">(<span class="keyword">int</span> src,<span class="keyword">int</span> des)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    priority_queue&lt;A&gt; Q;</span><br><span class="line">    <span class="keyword">if</span>(src==des) k++;   <span class="comment">//如果起点即为终点</span></span><br><span class="line">    <span class="keyword">if</span>(dis[src]==inf) <span class="keyword">return</span> <span class="number">-1</span>;      <span class="comment">//如果起点不能到达终点</span></span><br><span class="line">    A st,now,tmp;</span><br><span class="line">    st.id=src,st.g=<span class="number">0</span>,st.f=st.g+dis[src];    <span class="comment">//定义起始节点</span></span><br><span class="line">    Q.push(st);</span><br><span class="line">    <span class="keyword">while</span>(!Q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        now=Q.top();Q.pop();</span><br><span class="line">        <span class="keyword">if</span>(now.id==des)     <span class="comment">//如果当前节点为终点</span></span><br><span class="line">        &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">if</span>(cnt==k) <span class="keyword">return</span> now.g;    <span class="comment">//找到第k短路</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[now.id];~i;i=edge[i].nex)</span><br><span class="line">        &#123;</span><br><span class="line">            tmp.id=edge[i].v;</span><br><span class="line">            tmp.g=now.g+edge[i].w;     <span class="comment">//到该点的实际花费</span></span><br><span class="line">            tmp.f=tmp.g+dis[tmp.id];   <span class="comment">//到最终状态的估计花费</span></span><br><span class="line">            Q.push(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">//路径总数小于k</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,s,t,u,v,w;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">while</span>(m--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">            add(u,v,w);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;s,&amp;t,&amp;k);</span><br><span class="line">        spfa(t);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Astar(s,t));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> A*算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「2018 ACM-ICPC Shenyang - Online」F - Fantastic Graph (网络流)</title>
      <link href="/2018/09/08/ACM-ICPC-2018-Shenyang-Online-F/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="https://nanti.jisuanke.com/t/31447" target="_blank" rel="noopener">F-Fantastic Graph</a><br>网络流建模，无源汇有上下界可行流问题</p></blockquote><a id="more"></a><hr><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个二分图和一系列匹配边，求解是否存在匹配边的选择组合，使二分图中的每个点度数$d$满足$l≤d≤r$。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>对于原二分图建立网络流模型。添加源汇点$s,t$,将其视为有上下界可行流问题求解。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>对于二分图中的每一条边，在网络流中边的流量为上界-下界。为了保证流量平衡，对于每一个出度为$d_i$的 左侧结点$X_i$,从源点建立一条容量为$d_i$的边；同样的，对于每一个出度为$d_i$的右侧结点$Y_i$,建立一条从$Y_i$到汇点的容量为$d_i$的边。建模完成后，从$s$到$t$跑一次最大流即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k,high,low;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_V=<span class="number">6000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> g[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="comment">//用于表示边的结构体（终点，流量，反向边）</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> to,cap,rev;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; G[MAX_V];<span class="comment">//图的邻接表表示</span></span><br><span class="line"><span class="keyword">int</span> level[MAX_V];<span class="comment">//顶点到源点的距离标号</span></span><br><span class="line"><span class="keyword">int</span> iter[MAX_V];<span class="comment">//当前弧</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> to,<span class="keyword">int</span> cap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">G[from].push_back((edge)&#123;to,cap,G[to].size()&#125;);</span><br><span class="line">G[to].push_back((edge)&#123;from,<span class="number">0</span>,G[from].size()<span class="number">-1</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算从源点出发的距离标号</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(level,<span class="number">-1</span>,<span class="keyword">sizeof</span>(level));</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">level[s]=<span class="number">0</span>;</span><br><span class="line">que.push(s);</span><br><span class="line"><span class="keyword">while</span>(!que.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=que.front();que.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G[v].size();i++)</span><br><span class="line">&#123;</span><br><span class="line">edge &amp;e=G[v][i];</span><br><span class="line"><span class="keyword">if</span>(e.cap&gt;<span class="number">0</span>&amp;&amp;level[e.to]&lt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">level[e.to]=level[v]+<span class="number">1</span>;</span><br><span class="line">que.push(e.to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过DFS寻找增广路</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> t,<span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(v==t) <span class="keyword">return</span> f;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> &amp;i=iter[v];i&lt;G[v].size();i++)</span><br><span class="line">&#123;</span><br><span class="line">edge &amp;e=G[v][i];</span><br><span class="line"><span class="keyword">if</span>(e.cap&gt;<span class="number">0</span> &amp;&amp; level[v]&lt;level[e.to])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> d=dfs(e.to,t,min(f,e.cap));</span><br><span class="line"><span class="keyword">if</span>(d&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">e.cap-=d;</span><br><span class="line">G[e.to][e.rev].cap+=d;</span><br><span class="line"><span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求解从s到t的最大流</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max_flow</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> flow=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;;)</span><br><span class="line">&#123;</span><br><span class="line">bfs(s);</span><br><span class="line"><span class="keyword">if</span>(level[t]&lt;<span class="number">0</span>) <span class="keyword">return</span> flow;</span><br><span class="line"><span class="built_in">memset</span>(iter,<span class="number">0</span>,<span class="keyword">sizeof</span>(iter));</span><br><span class="line"><span class="keyword">int</span> f;</span><br><span class="line"><span class="keyword">while</span>((f=dfs(s,t,INF))&gt;<span class="number">0</span>) flow+=f;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u,v,deu[maxn],dev[maxn],cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;k)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;MAX_V;i++) G[i].clear();</span><br><span class="line">        <span class="built_in">memset</span>(g,<span class="number">0</span>,<span class="keyword">sizeof</span> g);</span><br><span class="line">        <span class="built_in">memset</span>(deu,<span class="number">0</span>,<span class="keyword">sizeof</span> deu);</span><br><span class="line">        <span class="built_in">memset</span>(dev,<span class="number">0</span>,<span class="keyword">sizeof</span> dev);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;low,&amp;high);</span><br><span class="line">        <span class="built_in">memset</span>(G,<span class="number">0</span>,<span class="keyword">sizeof</span> G);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">            g[u][v]++;</span><br><span class="line">            deu[u]++;</span><br><span class="line">            dev[v]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span>(deu[i]&lt;low) flag=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="keyword">if</span>(dev[i]&lt;low) flag=<span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//如果某点最大可达到的流量小于low，输出no</span></span><br><span class="line">        <span class="keyword">if</span>(!flag)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Case %d: %s\n"</span>,++cnt,flag?<span class="string">"Yes"</span>:<span class="string">"No"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> s=n+m+<span class="number">1</span>,e=s+<span class="number">1</span>,sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(!g[i][j]) <span class="keyword">continue</span>;</span><br><span class="line">                add(i,j,high-low);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) add(s,i,deu[i]),sum+=deu[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) add(i,e,dev[i]);</span><br><span class="line">        <span class="keyword">int</span> ans=max_flow(s,e);</span><br><span class="line">        <span class="keyword">if</span>(ans!=sum) flag=<span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: %s\n"</span>,++cnt,flag?<span class="string">"Yes"</span>:<span class="string">"No"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Graph </category>
          
          <category> Network Flow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「POJ-2289」Jamie&#39;s Contact Groups (二分图多重匹配+二分)</title>
      <link href="/2018/08/30/POJ-2289/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://poj.org/problem?id=2289" target="_blank" rel="noopener">「POJ-2289」amie’s Contact Groups</a><br>二分图最大多重匹配，求最大分组的最小值</p></blockquote><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一系列联系人和其可分到的组，对联系人分组，在所有联系人都有分组的情况下，使最大分组的值最小。求最大分组的最小值。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>匈牙利算法，求解可容纳量$limit$内的二分图多重匹配。二分答案，求出最小的满足左侧点全部匹配的$limit$值即为所求解。也可用网络流求解。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000</span>+<span class="number">5</span>;<span class="comment">//左边最大点数</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm=<span class="number">500</span>+<span class="number">5</span>;<span class="comment">//右边最大点数</span></span><br><span class="line"><span class="keyword">int</span> graph[maxn][maxm],vis[maxm];<span class="comment">//图G和增广路访问标记</span></span><br><span class="line"><span class="keyword">int</span> match[maxm][maxn];<span class="comment">//左边元素与右边元素第n次匹配</span></span><br><span class="line"><span class="keyword">int</span> nx,ny,m;<span class="comment">//左边点数，右边点数,边数</span></span><br><span class="line"><span class="keyword">int</span> limit;</span><br><span class="line"><span class="keyword">int</span> cnt[maxm];<span class="comment">//右边点已匹配值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">find_path</span><span class="params">(<span class="keyword">int</span> u)</span><span class="comment">//找增广路</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;ny; i++)<span class="comment">//注意，这里节点是从0开始编号，题目有时是从1开始编号</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(graph[u][i] &amp;&amp; !vis[i])<span class="comment">//不在增广路</span></span><br><span class="line">        &#123;</span><br><span class="line">            vis[i]=<span class="number">1</span>;<span class="comment">//放进增广路</span></span><br><span class="line">            <span class="keyword">if</span>(cnt[i]&lt;limit)<span class="comment">//如果当前已匹配数量小于可容纳量，则直接匹配</span></span><br><span class="line">            &#123;</span><br><span class="line">                match[i][cnt[i]++]=u;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;cnt[i]; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(find_path(match[i][j]))<span class="comment">//如果先前已匹配右边的点能另外找到增广路，则此点仍可匹配</span></span><br><span class="line">                &#123;</span><br><span class="line">                    match[i][j]=u;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max_match</span><span class="params">()</span><span class="comment">//计算多重匹配的最大匹配数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(match,<span class="number">-1</span>,<span class="keyword">sizeof</span>(match));</span><br><span class="line">    <span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span>(cnt));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nx; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">if</span>(find_path(i)) res++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">all_match</span><span class="params">()</span><span class="comment">//判断左边的点是否都与右边的点匹配了</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span>(cnt));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nx; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">if</span>(!find_path(i)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">20</span>],c;</span><br><span class="line">    <span class="keyword">int</span> u;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;nx,&amp;ny)!=EOF&amp;&amp;(nx||ny))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(graph,<span class="number">0</span>,<span class="keyword">sizeof</span> graph);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nx;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">            <span class="keyword">for</span>(;;)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%c"</span>,&amp;u,&amp;c);</span><br><span class="line">                graph[i][u]=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(c==<span class="string">'\n'</span>) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">1</span>,r=nx,ans=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">        <span class="keyword">while</span>(r&gt;l)</span><br><span class="line">        &#123;</span><br><span class="line">            limit=(l+r)/<span class="number">2</span>;</span><br><span class="line">            max_match();</span><br><span class="line">            <span class="keyword">if</span>(all_match()) r=limit;</span><br><span class="line">            <span class="keyword">else</span> l=limit+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Graph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分图匹配 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「HDU-3488」Tour (有向环覆盖问题)</title>
      <link href="/2018/08/29/HDU-3488/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3488" target="_blank" rel="noopener">「HDU-3488」Tour</a><br>二分图最大权匹配，有向环覆盖问题</p></blockquote><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个$n$个顶点、$m$条边的有向图，要求用一个或多个不相交的有向环覆盖所有的节点。问该有向环所有权值的总和最小为多少。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>因为路径由一个或多个不相交的有向环组成，对于匹配之后图中的每一点，其入度=出度=1，即拆点后二分图可以满足完备匹配，二分图中的边即为有向环中的边。</p><p>由于要求的答案为最小权匹配，初始化时需要将边的权值取负数，建立二分图，调用KM算法求其最佳匹配，取反即为所求解。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> lx[maxn],ly[maxn],edge[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> match[maxn],delta;</span><br><span class="line"><span class="keyword">bool</span> vx[maxn],vy[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vx[x]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">1</span>;y&lt;=n;y++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!vy[y])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> tmp=lx[x]+ly[y]-edge[x][y];</span><br><span class="line"><span class="keyword">if</span>(!tmp)</span><br><span class="line">&#123;</span><br><span class="line">vy[y]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(!match[y]||dfs(match[y]))</span><br><span class="line">&#123;</span><br><span class="line">match[y]=x;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> delta=min(delta,tmp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KM</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">lx[i]=-inf;</span><br><span class="line">ly[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">lx[i]=max(lx[i],edge[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(match,<span class="number">0</span>,<span class="keyword">sizeof</span>(match));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>;x&lt;=n;x++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(;;)</span><br><span class="line">&#123;</span><br><span class="line">delta=inf;</span><br><span class="line"><span class="built_in">memset</span>(vx,<span class="number">0</span>,<span class="keyword">sizeof</span>(vx));</span><br><span class="line"><span class="built_in">memset</span>(vy,<span class="number">0</span>,<span class="keyword">sizeof</span>(vy));</span><br><span class="line"><span class="keyword">if</span>(dfs(x)) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(vx[i]) lx[i]-=delta;</span><br><span class="line"><span class="keyword">if</span>(vy[i]) ly[i]+=delta;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(match[i]) ans-=edge[match[i]][i];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t,m,u,v,w;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="built_in">memset</span>(edge,-inf,<span class="keyword">sizeof</span> edge);</span><br><span class="line">        <span class="keyword">while</span>(m--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">            edge[u][v]=max(edge[u][v],-w);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,KM());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Graph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分图匹配 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「HDU-3829」Cat VS Dog (最大团)</title>
      <link href="/2018/08/28/HDU-3829/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3829" target="_blank" rel="noopener">「HDU3829」Cat VS Dog</a><br>二分图匹配，最大团问题</p></blockquote><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>对于p个儿童，每个儿童有其喜欢的动物和讨厌的动物，如果一个儿童喜欢的动物没有被移除，并且讨厌的动物被移除，他/她将会很快乐。求能达到的最大快乐儿童数量。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>对于每个儿童，如果儿童a喜欢的动物是b讨厌的动物，或者a讨厌的动物是b喜欢的动物，那么a,b存在冲突，即不能同时选择a,b；</p><p>对不存在冲突的a,b连边，那么对于n个儿童，如果他们之间两两相连（即都不存在冲突），则可以同时选择这些儿童。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><blockquote><h4 id="二分图的最大独立集"><a href="#二分图的最大独立集" class="headerlink" title="二分图的最大独立集"></a>二分图的最大独立集</h4><p>定义：选出一些顶点使得这些顶点两两不相邻，则这些点构成的集合称为独立集。找出一个包含顶点数最多的独立集称为最大独立集。<br>方法：最大独立集=所有顶点数-最小顶点覆盖</p><h4 id="二分图的最大团"><a href="#二分图的最大团" class="headerlink" title="二分图的最大团"></a>二分图的最大团</h4><p>定义：对于一个二分图，我们在左边找到一个顶点子集X，在右边找到一个顶点子集Y，使得X中每个顶点和Y中每个顶点之间都有边。<br>方法：二分图的最大团=补图的最大独立集</p></blockquote><p>建立二分图，对不存在冲突的点连边，求解最大团即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">500</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p;</span><br><span class="line"><span class="keyword">int</span> edge[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> linker[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">path</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">1</span>;v&lt;=p;v++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(edge[u][v]&amp;&amp;!vis[v])</span><br><span class="line">        &#123;</span><br><span class="line">            vis[v]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(linker[v]==<span class="number">-1</span>||path(linker[v]))</span><br><span class="line">            &#123;</span><br><span class="line">                linker[v]=u;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hungary</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(linker,<span class="number">0xff</span>,<span class="keyword">sizeof</span>(linker));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=p;i++)</span><br><span class="line">    &#123;</span><br><span class="line">            <span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">            res+=path(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">char</span> like[<span class="number">510</span>][<span class="number">20</span>],hate[<span class="number">510</span>][<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;p)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=p;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,like[i],hate[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(edge,<span class="number">1</span>,<span class="keyword">sizeof</span>(edge));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=p;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=p;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">strcmp</span>(like[i],hate[j])!=<span class="number">0</span>&amp;&amp;<span class="built_in">strcmp</span>(like[j],hate[i])!=<span class="number">0</span>) </span><br><span class="line">                    edge[i][j]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,(<span class="number">2</span>*p-hungary())/<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Graph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分图匹配 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「HDU-6446」Tree and Permutation (树形DP)</title>
      <link href="/2018/08/26/HDU-6446/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6446" target="_blank" rel="noopener">「HDU-6446」Tree and Permutation</a><br>推论+树形dp，求解树上所有点对的距离之和</p></blockquote><a id="more"></a><hr><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一棵树，给出树上结点1-n的全排列，求所有排列所经过的路径长度总和。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>对于树上的某一点对$uv$,在全排列$1-n$中相邻的情况为：</p><p>当$uv$左侧有$m$个点，右侧有$n-2-m$个点时，排列数为(注意$uv$,$vu$为两种情况)</p><p>$$2×{C}{m \choose n-2}×{A}{m \choose m}×{A}{n-2 \choose n-2}=2×(n-2)!$$ </p><p>而这样的排列共有$n-1$种，即对于每一个点对，排列的总数为$2×(n-1)!$种。</p><p>此时只需要求出树上<strong>所有点对的距离之和</strong>即可，可用树形dp求解。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><h4 id="求解树上所有点对的距离之和"><a href="#求解树上所有点对的距离之和" class="headerlink" title="求解树上所有点对的距离之和"></a>求解树上所有点对的距离之和</h4><p>要求解所有点对的距离之和，我们可以求：<strong>对于每条边，所有可能路径经过此条边的次数</strong>。</p><p>设这两条边的两边的点数分别为$s和n-s$,则这条边共经过$s×(n-s)$次,那么当前边对距离总和的贡献为$s×(n-s)×len(u,v)$,对所有边的贡献求和，即为所求解。</p><p>在一棵树中，若需要求其中任意边两端的点数，可以用一次$dfs$求解。取一点为根，记录每个节点的子节点（包含自身）个数，若子节点个数为$a[u]$,父亲一侧节点个数即为$n-a[u]$,时间复杂度为$O(n)$.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[maxn],cnt,n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> son[maxn],dp[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nex,to,w;</span><br><span class="line">&#125;edge[<span class="number">20</span>*maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[cnt].nex=head[u];</span><br><span class="line">    edge[cnt].to=v;</span><br><span class="line">    edge[cnt].w=w;</span><br><span class="line">    head[u]=cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    son[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];~i;i=edge[i].nex)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=edge[i].to,w=edge[i].w;</span><br><span class="line">        <span class="keyword">if</span>(fa==v) <span class="keyword">continue</span>;</span><br><span class="line">        dfs(v,u);</span><br><span class="line">        son[u]+=son[v];</span><br><span class="line">        (dp[u]+=(dp[v]+(n-son[v])*son[v]%mod*w%mod)%mod)%=mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u,v,w;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(head,<span class="number">0xff</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">        cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">            add(u,v,w);</span><br><span class="line">            add(v,u,w);</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> res=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++) (res*=i)%=mod;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,(res*dp[<span class="number">1</span>])%mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Dynamic Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树形DP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Codeforces Round 506 (Div. 3)</title>
      <link href="/2018/08/25/Codeforces%20Round%20506%20(Div.3)/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://codeforces.com/contest/1029" target="_blank" rel="noopener">Codeforces Round #506 (Div. 3)</a></p></blockquote><a id="more"></a><h3 id="A-Many-Equal-Substrings"><a href="#A-Many-Equal-Substrings" class="headerlink" title="A. Many Equal Substrings"></a>A. Many Equal Substrings</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>给定一个长度为$n$的字符串$s$，构造一个字符串$t$，使其满足子串$s$出现$k$次，且使$t$长度最短。</p><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><p>调用KMP的next数组求解公共前后缀的长度，输出k次即可。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nex[<span class="number">55</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getNext</span><span class="params">(<span class="keyword">char</span> *a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">-1</span>;</span><br><span class="line">    nex[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;<span class="built_in">strlen</span>(a))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">-1</span>||a[i]==a[j]) nex[++i]=++j;</span><br><span class="line">        <span class="keyword">else</span> j=nex[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">55</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,a);</span><br><span class="line">    getNext(a);</span><br><span class="line">    <span class="keyword">int</span> q=nex[n];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>,a);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;k;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=q;j&lt;n;j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c"</span>,a[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="B-Creating-the-Contest"><a href="#B-Creating-the-Contest" class="headerlink" title="B. Creating the Contest"></a>B. Creating the Contest</h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>给定$n$个数，如果满足$a[i]*2≥a[i+1]$，则两数可以同时选择，求最大可选的连续串长度。</p><h4 id="解法-1"><a href="#解法-1" class="headerlink" title="解法"></a>解法</h4><p>对于每个数，判断其能否与下一个数同时选择，标记后遍历求最大值即可。</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">bool</span> up[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp=a[i]*<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> pos=upper_bound(a,a+n,tmp)-a;</span><br><span class="line">        up[i]=(pos&gt;i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(up[i]==<span class="number">0</span>) cnt=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            ans=max(ans,cnt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans=max(ans,cnt);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-Maximal-Intersection"><a href="#C-Maximal-Intersection" class="headerlink" title="C. Maximal Intersection"></a>C. Maximal Intersection</h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><p>给定n个区间，求删除一个区间后可能达到的最大区间交集大小。</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,a[<span class="number">3</span>]=&#123;<span class="number">-1</span>&#125;,b[<span class="number">3</span>]=&#123;<span class="number">-1</span>&#125;,x[<span class="number">2</span>],y[<span class="number">2</span>],l,r;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">0</span>]==<span class="number">-1</span>||l&gt;a[<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            a[<span class="number">1</span>]=a[<span class="number">0</span>];</span><br><span class="line">            a[<span class="number">0</span>]=l;</span><br><span class="line">            x[<span class="number">1</span>]=x[<span class="number">0</span>];</span><br><span class="line">            x[<span class="number">0</span>]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[<span class="number">1</span>]==<span class="number">-1</span>||l&gt;a[<span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            a[<span class="number">1</span>]=l;</span><br><span class="line">            x[<span class="number">1</span>]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(b[<span class="number">0</span>]==<span class="number">-1</span>||r&lt;b[<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            b[<span class="number">1</span>]=b[<span class="number">0</span>];</span><br><span class="line">            b[<span class="number">0</span>]=r;</span><br><span class="line">            y[<span class="number">1</span>]=y[<span class="number">0</span>];</span><br><span class="line">            y[<span class="number">0</span>]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(b[<span class="number">1</span>]==<span class="number">-1</span>||r&lt;b[<span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            b[<span class="number">1</span>]=r;</span><br><span class="line">            y[<span class="number">1</span>]=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x[<span class="number">0</span>]==y[<span class="number">0</span>]) ans=max(b[<span class="number">1</span>]-a[<span class="number">1</span>],<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ans=max(b[<span class="number">0</span>]-a[<span class="number">1</span>],ans);</span><br><span class="line">        ans=max(b[<span class="number">1</span>]-a[<span class="number">0</span>],ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="D-Concatenated-Multiples"><a href="#D-Concatenated-Multiples" class="headerlink" title="D. Concatenated Multiples"></a>D. Concatenated Multiples</h3><h4 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h4><p>给定一个数组$a$，求其中的$a[i]$,$a[j]$拼接后能被$k$整除的$(i,j)$组数(其中$i≠j$)</p><h4 id="解法-2"><a href="#解法-2" class="headerlink" title="解法"></a>解法</h4><p>$x,y$拼接后能被$k$整除，等价于$(x·10^{n} \ mod\ k+y \mod k) \ mod \ k=0$ 其中$n$为$y$的位数。</p><p>对于每个数，枚举$a[i]·10^n(1≤n≤10)$，判断$len=n$且$a[i]·10^n +b[i]\ mod\ k+y \mod k) \ mod \ k=0$ 的数目即可。</p><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[maxn],b[maxn];</span><br><span class="line"><span class="keyword">int</span> len[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        n/=<span class="number">10</span>;</span><br><span class="line">        ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> s,tmp;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>,<span class="keyword">long</span> <span class="keyword">long</span>&gt; mp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;s);</span><br><span class="line">        len[i]=cal(s);</span><br><span class="line">        a[i]=s%k;</span><br><span class="line">        b[i]=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">10</span>;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        mp.clear();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) (b[i]*=<span class="number">10</span>)%=k,mp[b[i]]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(j==len[i])</span><br><span class="line">            &#123;</span><br><span class="line">                tmp=k-a[i];</span><br><span class="line">                <span class="keyword">if</span>(tmp==k) tmp=<span class="number">0</span>;</span><br><span class="line">                ans+=mp[tmp];</span><br><span class="line">                <span class="keyword">if</span>(b[i]==tmp) ans--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Codeforces Round </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「POJ-3041」Asteroids (最小点覆盖)</title>
      <link href="/2018/08/23/POJ-3041/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://poj.org/problem?id=3041" target="_blank" rel="noopener">「POJ-3041」Asteroids</a><br>二分图匹配问题，行列覆盖模型+最小点覆盖</p></blockquote><a id="more"></a><hr><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个n×n的矩阵，矩阵中的某些点为小行星，每次可以消除一行或一列的小行星，问消除全部小行星所需的最小次数。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>对于矩阵中某个存在障碍的点，若要消除该点，则需要让该点被所在的行/列攻击覆盖。若全部障碍点都被行/列攻击覆盖，则全部障碍都被消除。</p><p>根据障碍点坐标建立二分图。对于原矩阵，将每行x看做一个X节点，将每列y看做一个Y节点。此时，边$x→y$代表一个障碍点。</p><p>问题转化为：如果选择了一个节点，就相当于覆盖了以它为端点的所有边，如何选择最少的节点，使二分图中所有边都被覆盖。即<strong>二分图的最小点覆盖</strong>。</p><p>对于此问题，我们有结论：</p><blockquote><p>König定理：二分图中的最大匹配数等于这个图中的最小点覆盖数。</p></blockquote><p>套用匈牙利算法求解最大匹配数即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">500</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> edge[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> linker[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">path</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">1</span>;v&lt;=n;v++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(edge[u][v]&amp;&amp;!vis[v])</span><br><span class="line">        &#123;</span><br><span class="line">            vis[v]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(linker[v]==<span class="number">-1</span>||path(linker[v]))</span><br><span class="line">            &#123;</span><br><span class="line">                linker[v]=u;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hungary</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(linker,<span class="number">0xff</span>,<span class="keyword">sizeof</span>(linker));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">            <span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">            res+=path(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k,u,v;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(edge,<span class="number">0</span>,<span class="keyword">sizeof</span>(edge));</span><br><span class="line">        <span class="keyword">while</span>(k--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">            edge[u][v]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,hungary());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Graph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分图匹配 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018 Multi-University Nowcoder Round 8 - H Playing games（FWT,博弈）</title>
      <link href="/2018/08/15/Nowcoder-Summer-Round8-H/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="https://www.nowcoder.com/acm/contest/146/H" target="_blank" rel="noopener">H-Playing games</a><br>Nim博弈模型，在所给的n堆中选择使后手必胜的最大堆数</p></blockquote><a id="more"></a><hr><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>在$n$堆石子中选择最大数量的堆数，使得对于取出的$n$堆石子，在进行Nim游戏时后手必胜。</p><p><del>这样例膜得也太暴力了吧，苟利苟利苟利.jpg</del></p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>对于Nim游戏的局面，当且仅当$a_1⊕ a_2⊕ a_3…⊕ a_n=0$时，它是P-position（后手必胜），其中⊕ 表示异或(XOR)运算。</p><p>此题可以转化为，在$n$个数中寻找最多的数，使SUM_XOR=0.</p><p>我们再将题意转化为，在$n$个数中寻找最少的数，使SUM_XOR=C，其中，$C=a_1⊕ a_2⊕ ……⊕ a_n$</p><p>此处引入Fast Walsh-Hadamard Transform(FWT,快速沃尔什变换)求解。</p><h4 id="Fast-Walsh-Hadamard-Transform"><a href="#Fast-Walsh-Hadamard-Transform" class="headerlink" title="Fast Walsh-Hadamard Transform"></a>Fast Walsh-Hadamard Transform</h4><h5 id="FWT的详解参考："><a href="#FWT的详解参考：" class="headerlink" title="FWT的详解参考："></a>FWT的详解参考：</h5><blockquote><p><a href="https://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E6%B2%83%E7%88%BE%E4%BB%80%E8%BD%89%E6%8F%9B" target="_blank" rel="noopener">快速沃尔什转换 - 维基百科</a><br><a href="http://picks.logdown.com/posts/179290-fast-walsh-hadamard-transform" target="_blank" rel="noopener">Fast Walsh-Hadamard Transform</a><br><a href="https://www.cnblogs.com/cjyyb/p/9065615.html" target="_blank" rel="noopener">FWT快速沃尔什变换学习笔记</a></p></blockquote><p>FWT是用于解决<strong>多项式位运算卷积</strong>的一类方法，如下：</p><p>$$C_k=\sum_{i⊕j=k}A_i*B_j$$</p><p>对于数组A，我们设其在经过快速沃尔什变换后记作$FWT[A]$</p><p>我们需要一个新序列C，由序列A和序列B经过某运算规则得到，即$C=A⊕B$</p><p>我们先正向得到$FWT[A],FWT[B]$，然后根据$FWT[C]=FWT[A]*FWT[B]$求出$FWT[C]$，然后逆向运算得到原序列C，复杂度为$O(nlog(n))$</p><p>对于异或（XOR）卷积有：</p><p>$$tf(A)=(tf(A_0)+tf(A_1)),tf(A_0)-tf(A_1)) $$<br>$$utf(A)=(utf(\frac{A_0+A_1}{2}),utf(\frac{A_0-A_1}{2}))$$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FWT_xor</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> opt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> p=i&lt;&lt;<span class="number">1</span>,j=<span class="number">0</span>;j&lt;N;j+=p)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;i;++k)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> X=a[j+k],Y=a[i+j+k];</span><br><span class="line">                a[j+k]=(X+Y)%MOD;a[i+j+k]=(X+MOD-Y)%MOD;</span><br><span class="line">                <span class="keyword">if</span>(opt==<span class="number">-1</span>)a[j+k]=<span class="number">1l</span>l*a[j+k]*inv2%MOD,a[i+j+k]=<span class="number">1l</span>l*a[i+j+k]*inv2%MOD;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>对于本题，我们考虑将$a_i$的每一维拆开，看作一个$d$维向量，由于$a_i&lt;2^{19}$，取$d=19$</p><p>二分答案，取其在异或卷积意义下的$k$次幂，判断能否合成C即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1</span>&lt;&lt;<span class="number">19</span>,mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn];</span><br><span class="line"><span class="keyword">int</span> l,r,mid;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FWT</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> p=i&lt;&lt;<span class="number">1</span>,j=<span class="number">0</span>;j&lt;n;j+=p)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;i;k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> x=a[j+k],y=a[i+j+k];</span><br><span class="line">                a[j+k]=(x+y)%mod;a[i+j+k]=(x+mod-y)%mod;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,x,aim=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">        aim^=x;</span><br><span class="line">        a[x]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!aim) <span class="keyword">return</span> <span class="number">0</span>*<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n);</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">0</span>,r=<span class="number">19</span>,mid;</span><br><span class="line">    a[<span class="number">0</span>]++;</span><br><span class="line">    FWT(a,<span class="number">1</span>&lt;&lt;<span class="number">19</span>);</span><br><span class="line">    <span class="keyword">while</span>(r-l&gt;<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="number">1</span>&lt;&lt;<span class="number">19</span>);i++)</span><br><span class="line">        &#123;</span><br><span class="line">            b[i]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;mid;j++)</span><br><span class="line">                b[i]=<span class="number">1l</span>l*b[i]*a[i]%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        FWT(b,<span class="number">1</span>&lt;&lt;<span class="number">19</span>);</span><br><span class="line">        <span class="keyword">if</span>(b[aim]) r=mid; </span><br><span class="line">        <span class="keyword">else</span> l=mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n-r);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博弈 </tag>
            
            <tag> FWT </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「CodeForces-191C」Fools and Roads(LCA+树上差分/树链剖分)</title>
      <link href="/2018/08/13/Codeforces-191C/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://codeforces.com/problemset/problem/191/C" target="_blank" rel="noopener">「CodeForces-191C」Fools and Roads</a><br>LCA+树上差分/树链剖分，求树边的染色次数</p></blockquote><a id="more"></a><hr><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个$N$节点的树，以及树上的$k$条简单路径（端点用$u$,$v$表示），求树上的各条边被$k$条简单路径经过的总次数。</p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><h3 id="LCA-树上差分"><a href="#LCA-树上差分" class="headerlink" title="LCA+树上差分"></a>LCA+树上差分</h3><p>对于树上的简单路径$path(u,v)$，如果对于每一次查询，都对路径$path(u_i,v_i)$上经过的每一条边的权值+1，时间复杂度为$O(k*n)=1e10$，显然我们需要优化时间复杂度。</p><p>我们引入<strong>树上差分</strong>（树的前缀和）来优化查询。</p><h4 id="树上差分"><a href="#树上差分" class="headerlink" title="树上差分"></a>树上差分</h4><p>对于树，有如下两个性质：</p><ol><li>任意两个节点之间有且只有一条路径；</li><li>根节点确定时，一个节点只有一个父亲节点。</li></ol><p>由此，在自根节点向下进行DFS时，对于$path(u,v)$的其中任意一点$u’≠r$，若$u’$被访问，则$u’$的父亲节点一定被访问。</p><p>基于这样的性质，我们将树上的路径$path(u,v)$分割为两条链，有$r=LCA(u,v)$，路径$path(u,v)$覆盖的边为$u→r$，$r→v$，对两条链分别进行差分。</p><p>关于边的差分中，$r=LCA(u,v)​$不包含在内。因此考虑链$u→r​$，有<code>cf[u]++</code>,<code>cf[r]​--</code>；同样的，对于链$r→v​$，有<code>cf[v]​++</code>,<code>cf[r]​--</code>，即</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">for</span> <span class="title">each</span><span class="params">(u,v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    r=LCA(u,v);</span><br><span class="line">    cf[r]-=<span class="number">2</span>;</span><br><span class="line">    cf[u]++;</span><br><span class="line">    cf[v]++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在完成所有$path$的查询后，自根节点进行$DFS$求树上每个点的前缀和，此时，对于树边$path(u,v)$，$cf[v]$即为此条边经过的总次数，即，对于树上的每条边$path(u,v)$，有</p><p>$$ans[path(u,v)]=cf[v]$$</p><p>时间复杂度为$O(n)$</p><p>如，对于样例1</p><p><img src="/2018/08/13/Codeforces-191C/pic1.png" alt="pic1"></p><p>对每一组查询$path$求LCA后有</p><p><img src="/2018/08/13/Codeforces-191C/pic3.png" alt="pic3"></p><p>DFS求前缀和，即为所求解</p><p><img src="/2018/08/13/Codeforces-191C/pic2.png" alt="pic2"></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[maxn],pre[maxn],ans[maxn],cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; query[maxn];</span><br><span class="line"><span class="keyword">int</span> cf[maxn]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nex,to,no;</span><br><span class="line">&#125;edge[<span class="number">2</span>*maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> no)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[cnt].nex=head[u];</span><br><span class="line">    edge[cnt].to=v;</span><br><span class="line">    edge[cnt].no=no;</span><br><span class="line">    head[u]=cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x==pre[x]?x:pre[x]=Find(pre[x]); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=Find(x),b=Find(y);</span><br><span class="line">    <span class="keyword">if</span>(a!=b) pre[b]=a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];~i;i=edge[i].nex)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=edge[i].to;</span><br><span class="line">        <span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">        Tarjan(v,u);</span><br><span class="line">        Union(u,v);</span><br><span class="line">        vis[v]=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;query[u].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> e=query[u][i];</span><br><span class="line">        <span class="keyword">if</span>(vis[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> root=Find(e);</span><br><span class="line">            cf[root]-=<span class="number">2</span>;</span><br><span class="line">            cf[e]+=<span class="number">1</span>;</span><br><span class="line">            cf[u]+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];~i;i=edge[i].nex)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=edge[i].to;</span><br><span class="line">        <span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">        cf[u]+=dfs(v,u);</span><br><span class="line">        ans[edge[i].no]+=cf[v];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cf[u];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,u,v,k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="built_in">memset</span>(head,<span class="number">0xff</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        pre[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">        add(u,v,i);</span><br><span class="line">        add(v,u,i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line">    <span class="keyword">while</span>(k--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">        query[u].push_back(v);</span><br><span class="line">        query[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    Tarjan(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="树链剖分"><a href="#树链剖分" class="headerlink" title="树链剖分"></a>树链剖分</h3><p>（待补）</p>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LCA </tag>
            
            <tag> 树上差分 </tag>
            
            <tag> 树链剖分 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「POJ-3494」Largest Submatrix of All 1’s(单调栈)</title>
      <link href="/2018/08/09/POJ-3494/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://poj.org/problem?id=3494" target="_blank" rel="noopener">「POJ-3494」Largest Submatrix of All 1’s </a><br>单调栈，寻找01矩阵中最大的元素全为1的子矩阵</p></blockquote><a id="more"></a><hr><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个$m×n$的$01$矩阵，求只包含元素$1$的最大子矩阵。</p><p>对于每一组输入，输出最大全$1$子矩阵的元素数目。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这题的暴力解法，即对于图中的每一个点$(i,j)$,枚举其右下方的每一个点，检测自$(i,j)$到$(x,y)$组成的子矩阵元素是否全为1.复杂度为$O(n^3m^3)$.</p><p>显然我们需要优化复杂度。</p><p>对于如下矩阵：</p><p>$$<br>\begin{vmatrix}<br>    0 &amp; 1 &amp; 0 &amp; 1 &amp; 0\<br>    0 &amp; 1 &amp;1 &amp; 0 &amp; 0\<br>    1 &amp; 1 &amp; 1 &amp; 0 &amp; 0\<br>    0 &amp; 0 &amp; 0 &amp; 0 &amp;1\<br>\end{vmatrix}<br>$$<br>枚举每行元素</p><p><img src="/2018/08/09/POJ-3494/1533815577042.png" alt="1533815577042"></p><p><img src="/2018/08/09/POJ-3494/1533815742193.png" alt="1533815742193"></p><p><img src="/2018/08/09/POJ-3494/1533815953866.png" alt="1533815953866"></p><p><img src="/2018/08/09/POJ-3494/1533816076001.png" alt="1533816076001"></p><p>即对于矩阵的每一行，枚举以每一行为底，柱状图所能形成的最大矩形面积，所有行中的最大值即为答案。</p><p>问题转化为</p><blockquote><p><a href="http://poj.org/problem?id=2559" target="_blank" rel="noopener">POJ2559 Largest Rectangle in a Histogram </a></p><p><img src="http://poj.org/images/2559_1.jpg" alt="img"> </p></blockquote><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>基于原矩阵，构造一个新矩阵<br>$$<br>\begin{matrix}<br>    0 &amp; 1 &amp; 0 &amp; 1 &amp; 0\<br>    0 &amp; 2  &amp; 1  &amp; 0 &amp; 0\<br>    1 &amp; 3 &amp; 2 &amp; 0 &amp; 0\<br>    0 &amp; 0 &amp; 0 &amp; 0 &amp;1\<br>\end{matrix}<br>$$<br>对于每一行，套用POJ2559的方法，使用单调栈求解当前行的最大值，再遍历求出总的最大值即可。</p><h4 id="POJ2559-最大矩形面积"><a href="#POJ2559-最大矩形面积" class="headerlink" title="POJ2559 最大矩形面积"></a>POJ2559 最大矩形面积</h4><p>对于最大矩形面积，我们需要找到每一个柱状块向左、右所能扩展的区间的最大长度。即，区间内的柱状块高度都不小于起始柱状块的高度。</p><p>使用单调栈维护一个从起点到当前点的单调递增序列，如果栈顶元素的高度大于当前点，弹出栈顶元素，直到栈为空，或栈顶元素小于当前点，以此来维护栈的递增性。</p><p>我们需要证明，之前弹出的元素对之后的点没有影响，即$i$之前大于$h[i]$的元素，必然不是$h[i+1]$的扩展边界：</p><ul><li><p>若$h[i]&lt;h[i+1]$，点$i+1$ 显然无法向左继续扩展，边界为$h[i]$</p></li><li><p>若$h[i]≥h[i+1]$，之前出栈的点一定大于$h[i]$，不影响$i+1$向左继续扩展</p></li></ul><p>以上结论具有递推性，可用数学归纳法证明。</p><p>由此我们可以线性求出每个元素向左、右扩展形成的最大矩形面积，即<code>s[i]=(l[i]+r[i]+1)*h[i]</code></p><blockquote><p><a href="https://github.com/V-Verly/ACM/blob/master/POJ/2559/15293982_AC_266ms_2812kB.cpp" target="_blank" rel="noopener">Code|Solution to POJ 2559</a></p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn][maxn],l[maxn],r[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,x;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">                <span class="keyword">if</span>(x) a[i][j]=a[i<span class="number">-1</span>][j]+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> a[i][j]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span>(!st.empty()&amp;&amp;a[i][st.top()]&gt;=a[i][j]) st.pop();</span><br><span class="line">                <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span>(!st.empty()) res=st.top();</span><br><span class="line">                st.push(j);</span><br><span class="line">                l[j]=(j<span class="number">-1</span>-res)*a[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(!st.empty()) st.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=n;j&gt;<span class="number">0</span>;j--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span>(!st.empty()&amp;&amp;a[i][st.top()]&gt;=a[i][j]) st.pop();</span><br><span class="line">                <span class="keyword">int</span> res=n;</span><br><span class="line">                <span class="keyword">if</span>(!st.empty()) res=st.top()<span class="number">-1</span>;</span><br><span class="line">                st.push(j);</span><br><span class="line">                r[j]=(res-j)*a[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">                ans=max(ans,l[j]+r[j]+a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单调栈 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「HDU-2196」Computer (树形DP)</title>
      <link href="/2018/07/21/HDU-2196/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2196" target="_blank" rel="noopener">「HDU-2196」Computer</a><br>树形dp，树的最长路径（最远点对）</p></blockquote><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给出一棵$n$个结点的无根树，求出每个结点所能到达的最远点的距离。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>将无根树转成有根树，并进行两次DFS。</p><ol><li><p>第一次DFS求出每个结点在其子树中的<strong>正向最大距离</strong>和<strong>正向次大距离</strong>,记为<code>longest[i]</code>和<code>secondary[i]</code>，并标记最长距离所对应的子结点<code>mark[i]</code>；</p><p>此时可知对于每个结点$i$,最远点的距离只有两种可能：</p><ul><li>结点$i$的<strong>正向最大距离</strong></li><li>结点$i$链接其父结点所能到达的最大距离，即<strong>反向最大距离</strong></li></ul></li><li><p>第二次DFS求出反向最长距离<code>top[i]</code></p><ul><li><p>若其父节点的正向最大距离不经过$i$，反向最大距离为父节点的正向最大距离/反向最大距离+连接边</p><p>$$top[i]=max(top[fa],longest[fa])+edge[fa][i]$$</p></li><li><p>否则，反向最大距离为父节点的正向次大距离/反向最大距离+连接边</p><p>$$top[i]=max(top[fa],secondary[fa])+edge[fa][i]$$</p></li></ul></li></ol><p>最终所求每个点的最大距离$ans[i]=max(longest[i],top[i])$</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e4</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[maxn],tot,longest[maxn],secondary[maxn],top[maxn],mark[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> to,nex,v;</span><br><span class="line">node()&#123;&#125;</span><br><span class="line">node(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c):to(a),nex(b),v(c)&#123;&#125;</span><br><span class="line">&#125;edge[<span class="number">2</span>*maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">edge[tot]=node(v,head[u],w);</span><br><span class="line">head[u]=tot++;</span><br><span class="line">edge[tot]=node(u,head[v],w);</span><br><span class="line">head[v]=tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">longest[u]=secondary[u]=<span class="number">0</span>;</span><br><span class="line">mark[u]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=head[u];k!=<span class="number">-1</span>;k=edge[k].nex)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=edge[k].to;</span><br><span class="line"><span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">dfs(v,u);</span><br><span class="line"><span class="keyword">if</span>(longest[u]&lt;=longest[v]+edge[k].v)</span><br><span class="line">&#123;</span><br><span class="line">secondary[u]=longest[u];</span><br><span class="line">longest[u]=longest[v]+edge[k].v;</span><br><span class="line">mark[u]=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(secondary[u]&lt;=longest[v]+edge[k].v&amp;&amp;mark[u]!=v)</span><br><span class="line">secondary[u]=longest[v]+edge[k].v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=head[u];k!=<span class="number">-1</span>;k=edge[k].nex)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=edge[k].to;</span><br><span class="line"><span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(mark[u]!=v)</span><br><span class="line">top[v]=max(longest[u],top[u])+edge[k].v;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">top[v]=max(secondary[u],top[u])+edge[k].v;</span><br><span class="line">dfs1(v,u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v,w;</span><br><span class="line">tot=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">2</span>;u&lt;=N;u++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;v,&amp;w);</span><br><span class="line">add(u,v,w);</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">memset</span>(top,<span class="number">0</span>,<span class="keyword">sizeof</span>(top));</span><br><span class="line">dfs1(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">top[<span class="number">1</span>]=secondary[<span class="number">1</span>]; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,max(top[i],longest[i]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Dynamic Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 树形DP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「HDU-1520」Anniversary party (树形DP)</title>
      <link href="/2018/07/19/HDU-1520/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1520" target="_blank" rel="noopener">「HDU-1520」Anniversary party</a><br>树形DP，树的最大独立集问题</p></blockquote><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给一颗n个结点的无根树，选出一系列结点，使得在任何两个结点均不相邻的情况下，结点的权值和最大。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>树的最大独立集问题。</p><p>用$d(i)$表示以$i$为根节点的子树的最大独立集大小。对于结点$i$只有两种决策：选和不选。如果不选$i$,则问题转化成了求出$i$的所有儿子的$d$值再相加；如果选$i$,则它的儿子全部不能选，问题转化为了求出$i$的所有孙子的$d$之和。</p><p>状态转移方程为：</p><p>$$d(i)=max{\sum_{j∈s(i)}d(j),\sum_{j∈gs(i)}d(j)+val(i)}$$</p><p>其中$gs(i)$与$s(i)$分别为$i$的孙子集合与儿子集合。</p><p>实现方法：当计算出一个$d(i)$后，用它去更新$i$的父节点和祖父节点。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">6000</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tree[maxn];</span><br><span class="line"><span class="keyword">int</span> d[maxn],s[maxn],gs[maxn];</span><br><span class="line"><span class="keyword">int</span> N,val[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tree[u].size();i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=tree[u][i];</span><br><span class="line"><span class="keyword">if</span>(v!=fa) dfs(v,u);</span><br><span class="line">s[u]+=d[v];</span><br><span class="line"><span class="keyword">if</span>(fa) gs[fa]+=d[v];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> d[u]=max(s[u],gs[u]+val[u]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;val[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">&#123;</span><br><span class="line">d[i]=s[i]=gs[i]=<span class="number">0</span>;</span><br><span class="line">tree[i].clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v)==<span class="number">2</span>&amp;&amp;(u||v))</span><br><span class="line">&#123;</span><br><span class="line">tree[u].push_back(v);</span><br><span class="line">tree[v].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dfs(<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Dynamic Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 树形DP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「HDU-4616」Game (树形DP)</title>
      <link href="/2018/07/19/HDU-4616/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4616" target="_blank" rel="noopener">「HDU-4616」Game</a><br>树形DP，有限制的权值最大链问题</p></blockquote><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给一棵有$n$个节点的树，每个节点有其$val$值和$trap$值（1表示该点有陷阱，0为无陷阱），最多可掉进陷阱$c$次。经过树上某一点时将取得该点的$val$值，踩到第$c$个陷阱后马上停止，且不能走已经走过的点。求最大能获得的$val$值之和。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>树形dp。</p><p>每个节点的状态可用<code>dp[u][k][flag]</code>表示，<code>flag=1</code>时，表示在以$u$为根的子树上，从一个<strong>有陷阱的起点</strong>经过$k$个陷阱走到$u$的最大值；若<code>flag=0</code>，则表示起点没有陷阱。</p><p>考虑最优解共走过$k$个陷阱，如果<code>k!=c</code>,那么起点和终点都可以为没有陷阱的点，如果<code>k=c</code>,那么起点和终点至少有一点为有陷阱点。</p><h4 id="状态转移方程："><a href="#状态转移方程：" class="headerlink" title="状态转移方程："></a>状态转移方程：</h4><ol><li><p>当$u$点的起点<strong>有陷阱</strong>时，在$0&lt;k≤c$上，对$u$的子节点$v$有：</p><p>$$dp[u][k+1][1]=max(dp[u][k+1][1],dp[v][k+1][1]+val[u])$$</p></li><li><p>当$u$点起点<strong>没有陷阱</strong>时，在$0≤k≤c$上，对$u$的子节点$v$有：</p><p>$$dp[u][k][0]=max(dp[u][k][0],dp[v][k][0]+val[u])$$</p><p>对于情况1，由于不存在总陷阱数为0且起点为陷阱的情况，故<code>k！=0</code>.</p></li></ol><h5 id="以上两式可合写为："><a href="#以上两式可合写为：" class="headerlink" title="以上两式可合写为："></a>以上两式可合写为：</h5><p>$$dp[u][k+trap[u]][flag]=max(dp[u][k+trap[u]][flag],dp[v][k][flag]+val[u])$$</p><h4 id="对于最优解-ans"><a href="#对于最优解-ans" class="headerlink" title="对于最优解$ans$:"></a>对于最优解$ans$:</h4><p>最优解可以看成两条链拼在一起，枚举两条链的陷阱个数并求和更新最优解。</p><h5 id="更新最优解时需要注意："><a href="#更新最优解时需要注意：" class="headerlink" title="更新最优解时需要注意："></a>更新最优解时需要注意：</h5><ol><li>当两条链的陷阱总数<code>j+k=c</code>时，两条链的起点不可能同时为0；</li><li>不存在总陷阱数为0且起点陷阱值为1的情况；</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tree[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N,c;</span><br><span class="line"><span class="keyword">int</span> val[maxn],trap[maxn];</span><br><span class="line"><span class="keyword">int</span> dp[maxn][<span class="number">5</span>][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dp[u][trap[u]][trap[u]]=val[u];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tree[u].size();i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=tree[u][i];</span><br><span class="line"><span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">dfs(v,u);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=c;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;j+k&lt;=c;k++)</span><br><span class="line">&#123;</span><br><span class="line">ans=max(ans,dp[u][j][<span class="number">1</span>]+dp[v][k][<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">if</span>(j+k&lt;c) ans=max(ans,dp[u][j][<span class="number">0</span>]+dp[v][k][<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">if</span>(k) ans=max(ans,dp[u][j][<span class="number">0</span>]+dp[v][k][<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">if</span>(j) ans=max(ans,dp[u][j][<span class="number">1</span>]+dp[v][k][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k+trap[u]&lt;=c;k++)</span><br><span class="line">&#123;</span><br><span class="line">dp[u][k+trap[u]][<span class="number">0</span>]=max(dp[u][k+trap[u]][<span class="number">0</span>],dp[v][k][<span class="number">0</span>]+val[u]);</span><br><span class="line"><span class="keyword">if</span>(k) dp[u][k+trap[u]][<span class="number">1</span>]=max(dp[u][k+trap[u]][<span class="number">1</span>],dp[v][k][<span class="number">1</span>]+val[u]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t,u,v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;c);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">tree[i].clear();</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;val[i],&amp;trap[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N<span class="number">-1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">tree[u].push_back(v);</span><br><span class="line">tree[v].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line">dfs(<span class="number">0</span>,<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Dynamic Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 树形DP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「HDU-1827」Summer Holiday (强联通分量)</title>
      <link href="/2018/07/18/HDU-1827/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1827" target="_blank" rel="noopener">「HDU-1827」Summer Holiday</a><br>Tarjan强联通分量+缩点，求最小联系费用</p></blockquote><a id="more"></a><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>强联通分量+缩点，判断每个强连通分量的入度是否为0，如果为0，则说明没有人能联系到这个分量中的任意一点。在同一强联通分量内，任意两点互相通达，所以只要其入度不为0，就代表整个强联通分量内的点都能被图中其它点通知信息。故Wiskey只要通知所有入度为0的强联通分量中的任意一点，就能通知到所有人。对于每一个入度为0的强联通分量，所需的联系费用即为其中花费最小的节点的费用（即点权最小的点的权值）。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; edge[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dfn[maxn],low[maxn],cost[maxn],belong[maxn],degree[maxn];</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">stack</span>[maxn],index,tot,scc;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfn[v]=low[v]=++tot;</span><br><span class="line">    <span class="built_in">stack</span>[++index]=v;</span><br><span class="line">    vis[v]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;edge[v].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=edge[v][i];</span><br><span class="line">        <span class="keyword">if</span>(!dfn[u])</span><br><span class="line">        &#123;</span><br><span class="line">            Tarjan(u);</span><br><span class="line">            low[v]=min(low[v],low[u]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(vis[u])</span><br><span class="line">            low[v]=min(low[v],dfn[u]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(low[v]==dfn[v])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u;</span><br><span class="line">        belong[v]=++scc;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            u=<span class="built_in">stack</span>[index];</span><br><span class="line">            vis[u]=<span class="literal">false</span>;</span><br><span class="line">            belong[u]=scc;</span><br><span class="line">            index--;</span><br><span class="line">        &#125;<span class="keyword">while</span>(u!=v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,u,v;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;cost[i]);</span><br><span class="line">            edge[i].clear();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(m--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">            edge[u].push_back(v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(dfn,<span class="number">0</span>,<span class="keyword">sizeof</span>(dfn));</span><br><span class="line">        <span class="built_in">memset</span>(degree,<span class="number">0</span>,<span class="keyword">sizeof</span>(degree));</span><br><span class="line">        tot=index=scc=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">if</span>(!dfn[i]) Tarjan(i);<span class="comment">//Tarjan求强联通分量+缩点</span></span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>,sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">1</span>;v&lt;=n;v++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;edge[v].size();j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> u=edge[v][j];</span><br><span class="line">                <span class="keyword">if</span>(belong[v]!=belong[u])<span class="comment">//不在同一个强连通分量内</span></span><br><span class="line">                    degree[belong[u]]++;<span class="comment">//入度+1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=scc;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!degree[i])<span class="comment">//该强联通分量的入度为0</span></span><br><span class="line">            &#123;</span><br><span class="line">                ans++;</span><br><span class="line">                <span class="keyword">int</span> mincost=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(belong[j]==i)<span class="comment">//该点在强连通分量内</span></span><br><span class="line">                        mincost=min(mincost,cost[j]);<span class="comment">//求该强联通分量内点权最小的点的权值</span></span><br><span class="line">                &#125;</span><br><span class="line">                sum+=mincost;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,ans,sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Graph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 强连通分量 </tag>
            
            <tag> Tarjan </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「POJ-1655」Balancing Act（树形DP）</title>
      <link href="/2018/05/29/POJ-1655-Balancing-Act/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://poj.org/problem?id=1655" target="_blank" rel="noopener">「POJ-1655」Balancing Act</a><br>树形DP，树的重心（质心）</p></blockquote><a id="more"></a><hr><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p><strong>树的重心（质心）</strong>。对于一棵n个节点的无根树，找到一个点，使得把树变成以该点为根的有根树时，最大子树的节点最小。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>先任选一个节点作为根，把无根树变成有根树，然后设d(i)表示以i为根的子树的节点个数。不难发现$d(i)=\sum_{j∈s(i)}d(j)+1$ 。删除节点i后，节点i的子树中最大有max{d(j)}个节点，i的“上方子树”中有n-d(i)个节点。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> d[maxn],N,minNode,minBalance;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tree[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> node,<span class="keyword">int</span> father)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    d[node]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> maxSubTree=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tree[node].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> son=tree[node][i];</span><br><span class="line">        <span class="keyword">if</span>(son!=father)</span><br><span class="line">        &#123;</span><br><span class="line">            dfs(son,node);</span><br><span class="line">            d[node]+=d[son];</span><br><span class="line">            maxSubTree=max(maxSubTree,d[son]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    maxSubTree=max(maxSubTree,N-d[node]);</span><br><span class="line">    <span class="keyword">if</span>(maxSubTree&lt;minBalance)</span><br><span class="line">    &#123;</span><br><span class="line">        minBalance=maxSubTree;</span><br><span class="line">        minNode=node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t,u,v;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++)</span><br><span class="line">            tree[i].clear();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">            tree[u].push_back(v);</span><br><span class="line">            tree[v].push_back(u);</span><br><span class="line">        &#125;</span><br><span class="line">        minNode=<span class="number">0</span>;</span><br><span class="line">        minBalance=inf;</span><br><span class="line">        dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,minNode,minBalance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Dynamic Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 树形DP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Codeforces Round 483 (Div. 2)</title>
      <link href="/2018/05/17/Codeforces%20Round%20483%20(Div.%202)%20/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://codeforces.com/contest/984" target="_blank" rel="noopener">Codeforces Round #483 (Div. 2) </a></p></blockquote><p><del>已经是条只会签到全靠补题的咸鱼了</del></p><a id="more"></a><hr><h3 id="A-Game"><a href="#A-Game" class="headerlink" title="A.Game"></a>A.Game</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>两方轮流删最大、最小的数，求最后剩下的值。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,a[<span class="number">1005</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    sort(a,a+n);</span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">2</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a[n/<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a[n/<span class="number">2</span><span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="B-Minesweeper"><a href="#B-Minesweeper" class="headerlink" title="B. Minesweeper"></a>B. Minesweeper</h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>给一张扫雷地图，判断标记数字有没有出现错误。</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m,n;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">8</span>]=&#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">8</span>]=&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> fx=x+dx[i],fy=y+dy[i];</span><br><span class="line">        <span class="keyword">if</span>(fx&gt;=<span class="number">0</span>&amp;&amp;fx&lt;n&amp;&amp;fy&gt;=<span class="number">0</span>&amp;&amp;fy&lt;m&amp;&amp;a[fx][fy]==<span class="string">'*'</span>) ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,a[i]);</span><br><span class="line">    <span class="keyword">int</span> tmp;</span><br><span class="line">    <span class="keyword">bool</span> flag=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i][j]==<span class="string">'*'</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(a[i][j]==<span class="string">'.'</span>) tmp=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> tmp=a[i][j]-<span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">if</span>(tmp!=sum(i,j)) flag=<span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,flag?<span class="string">"YES"</span>:<span class="string">"NO"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="C-Finite-or-not"><a href="#C-Finite-or-not" class="headerlink" title="C. Finite or not?"></a>C. Finite or not?</h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><p>给出三个整数p,q,b,判断p/q在b进制下是否是一个有限小数。</p><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><p>数论题。</p><p>首先在10进制下，一个分数在化为最简分数的情况下，如果它的分母只含有2和5两个质因数，这个分数就能化简为有限小数。</p><p>推广得在b进制下，如果化简后的p/q中的分母只含有b的质因数，那么该分数是一个有限小数。即q在与b的公因数的不断整除下，q能否被化简为1.</p><p>需要注意这里如果每步直接取<code>tmp=gcd(q,b)</code>则会导致tle，由$$gcd(\frac{p}{gcd(b,p)},b)=gcd(\frac{p}{gcd(b,p)},gcd(b,p))$$,则只需要取<code>tmp=gcd(q,tmp)</code>并不断整除q,tmp的公因数直到q=1（p/q为有限小数）或tmp=1（p≠1且不能继续化简，p/q为无限小数）即可</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">gcd</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b==<span class="number">0</span>?a:gcd(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> p,q,b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;p,&amp;q,&amp;b);</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> tmp=gcd(p,q);</span><br><span class="line">        q/=tmp;</span><br><span class="line">        tmp=gcd(q,b);</span><br><span class="line">        <span class="keyword">while</span>(q&gt;<span class="number">1</span>&amp;&amp;tmp&gt;<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            tmp=gcd(q,tmp);</span><br><span class="line">            q/=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,q==<span class="number">1</span>?<span class="string">"Finite"</span>:<span class="string">"Infinite"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="D-XOR-pyramid"><a href="#D-XOR-pyramid" class="headerlink" title="D. XOR-pyramid"></a>D. XOR-pyramid</h3><h4 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h4><p>对于长度为m的数组b，定义函数$$f$$如下</p><p>$$f(b) = \begin{cases} b[1] &amp; \quad \text{if } m = 1 \ f(b[1] \oplus b[2],b[2] \oplus b[3],\dots,b[m-1] \oplus b[m]) &amp; \quad \text{otherwise,} \end{cases}$$</p><p>其中⊕为异或运算，例：</p><p>$f(1,2,4,8)=f(1\oplus2,2\oplus4,4\oplus8)=f(3,6,12)=f(3\oplus6,6\oplus12)=f(5,10)=f(5\oplus10)=f(15)=15$</p><p>给定一个数组和一系列询问，求区间$$[l,r]$$内$$f$$的最大值。</p><h4 id="解法-1"><a href="#解法-1" class="headerlink" title="解法"></a>解法</h4><p>打表记录左右区间为$$[l,r]$$的$$f$$值dp[l][r]，i=l=r的值即为a[i]本身，通过<code>dp[l][r]=dp[l][r-1]^dp[l+1][r]</code>依次求出区间长度为1～n的f值（区间长度为k=r-l），再通过<code>dp[l][r]=max(dp[l+1][r],dp[l][r],dp[l][r-1])</code>逐步更新最大值。</p><p>其实就是个数塔形式的dp，计算过程中取左下方和右下方的值求异或和并记录，dp更新过程中取三者的最大值更新就可以了，如下</p><p>$f(1,2,4,8)=f(1\oplus2,2\oplus4,4\oplus8)=f(3,6,12)=f(3\oplus6,6\oplus12)=f(5,10)=f(5\oplus10)=f(15)=15$</p><p>$$15$$</p><p>$$5\qquad10$$</p><p>$$3\qquad6\qquad12$$</p><p>$$1\qquad2\qquad4\qquad8$$</p><p>与下方左右两数比较并更新后</p><p>$$15$$</p><p>$$[6]\qquad[12]$$</p><p>$$3\qquad6\qquad12$$</p><p>$$1\qquad2\qquad4\qquad8$$</p><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,l,r,t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;dp[i][i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;n;k++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i+k&lt;=n;i++)</span><br><span class="line">            dp[i][i+k]=dp[i][i+k<span class="number">-1</span>]^dp[i+<span class="number">1</span>][i+k];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i+k&lt;=n;i++)</span><br><span class="line">        dp[i][i+k]=max(max(dp[i+<span class="number">1</span>][i+k],dp[i][i+k]),dp[i][i+k<span class="number">-1</span>]);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[l][r]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="E-Elevator"><a href="#E-Elevator" class="headerlink" title="E. Elevator"></a>E. Elevator</h3><p><del><em>那我哪会</em></del></p>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Codeforces Round </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> Codeforces </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Note of Job Interview</title>
      <link href="/2018/02/13/Notes-of-CS/"/>
      <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
