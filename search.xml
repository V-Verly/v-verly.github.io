<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Note of C++</title>
      <link href="/2020/02/29/CPP-Note/"/>
      <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Note of CS</title>
      <link href="/2020/02/13/Notes-of-CS/"/>
      <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Note </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「CodeForces-1253F」Cheap Robot(最小瓶颈路)</title>
      <link href="/2019/11/22/Codeforces-1253F/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://codeforces.com/contest/1253/problem/F" target="_blank" rel="noopener">F - Cheap Robot</a><br>给定一个无向图，其中1-k为充电桩。经过长度为w的边会消耗w的电量，可在任意充电桩充满电。q次询问，每次询问从一个充电桩到另一个充电桩所需要的最小电池容量。</p></blockquote><a id="more"></a><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个无向图，其中1-k为充电桩。经过长度为w的边会消耗w的电量，可在任意充电桩充满电。q次询问，每次询问从一个充电桩到另一个充电桩所需要的最小电池容量。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>对于任意一个非充电桩的点，其必须满足以下两个条件：</p><ol><li>在这个点的电量必须能够到达最近的充电桩；</li><li>从这个点到最近的充电桩后返回这个点，它的总电量不能减少；</li></ol><p>考虑将原图缩为k个联通块，构建一张新图。</p><p>对于原图建立超级源点，点1-k向0点连边，求出距离每个非关键点最近的充电桩，以及它到最近充电桩的距离$dis[i]$。</p><p>对图上的两个非关键点$(u,v)$，点$u$能到达点$v$当且仅当电量$c$满足$(c-dis[u])-w≥dis[v]$，即$c≥dis[u]+dis[v]+w$。</p><p>对原图上的每条边更新，如果两个点$(u,v)$不属于同一个联通块，在$(belong[u],belong[v])$加边，边权为$dis[u]+dis[v]+w$。</p><p>建完新图之后，问题转化为<a href="https://loj.ac/problem/136" target="_blank" rel="noopener">最小瓶颈路</a>模板题。即给定一个k个节点m条边的图，回答q个询问，要求寻找从$s$到$t$的一条路径，使得路径上权值最大的一条边权值最小。 </p><p>这个问题离线用MST上LCA搞一下就好。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span> + <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> head[maxn], dis[maxn], cnt, n, k;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span> <span class="keyword">int</span> nex, to, w; &#125; edge[<span class="number">2</span> * maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">E</span>&#123;</span> </span><br><span class="line"><span class="keyword">int</span> u, v, w;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> E oth) <span class="keyword">const</span> &#123; <span class="keyword">return</span> w &lt; oth.w; &#125;</span><br><span class="line">&#125; es[maxn];</span><br><span class="line"><span class="keyword">int</span> bel[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> pre[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x == pre[x] ? x : pre[x] = Find(pre[x]); &#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">edge[++ cnt] = &#123; head[u], v, w &#125;;</span><br><span class="line">head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dij</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">priority_queue&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;, <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt;, greater&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; &gt; que;</span><br><span class="line"><span class="built_in">memset</span>(dis, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dis);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i ++) bel[i] = i, dis[i] = <span class="number">0</span>, que.push(&#123;<span class="number">0</span>, i&#125;);</span><br><span class="line"><span class="keyword">while</span>(!que.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> f = que.top(); que.pop();</span><br><span class="line"><span class="keyword">int</span> u = f.second, d = f.first;</span><br><span class="line"><span class="keyword">if</span>(d != dis[u]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; i; i = edge[i].nex)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v = edge[i].to, w = edge[i].w;</span><br><span class="line"><span class="keyword">if</span>(dis[u] + w &lt; dis[v]) </span><br><span class="line">&#123;</span><br><span class="line">bel[v] = bel[u];</span><br><span class="line">dis[v] = dis[u] + w;</span><br><span class="line">que.push(&#123;dis[v], v&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> val[maxn &lt;&lt; <span class="number">1</span>], idx;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">G[u].push_back(v);</span><br><span class="line">pre[v] = u;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> dep[maxn &lt;&lt; <span class="number">1</span>], fa[maxn &lt;&lt; <span class="number">1</span>][<span class="number">30</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dep[u] = dep[pre] + <span class="number">1</span>, fa[u][<span class="number">0</span>] = pre;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; i) &lt;= idx; i ++) fa[u][i] = fa[fa[u][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> v : G[u]) <span class="keyword">if</span>(v != pre) dfs(v, u);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[u] &lt; dep[v]) swap(u, v);</span><br><span class="line"><span class="keyword">int</span> d = dep[u] - dep[v];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; (<span class="number">1</span> &lt;&lt; i) &lt;= d; i ++) <span class="keyword">if</span>((<span class="number">1</span> &lt;&lt; i) &amp; d) u = fa[u][i];</span><br><span class="line"><span class="keyword">if</span>(u == v) <span class="keyword">return</span> u;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">22</span>; i &gt;= <span class="number">0</span>; i --) <span class="keyword">if</span>(fa[u][i] != fa[v][i]) u = fa[u][i], v = fa[v][i];</span><br><span class="line"><span class="keyword">return</span> fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m, q, u, v, w;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld%lld"</span>, &amp;n, &amp;m, &amp;k, &amp;q);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">es[i] = &#123; u, v, w &#125;;</span><br><span class="line">add(u, v, w);</span><br><span class="line">add(v, u, w);</span><br><span class="line">&#125;</span><br><span class="line">dij();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++) <span class="keyword">if</span>(bel[es[i].u] != bel[es[i].v]) es[i].w = es[i].w + dis[es[i].u] + dis[es[i].v];</span><br><span class="line">sort(es + <span class="number">1</span>, es + m + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2</span> * n; i ++) pre[i] = i;</span><br><span class="line">idx = k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u = bel[es[i].u], v = bel[es[i].v], w = es[i].w;</span><br><span class="line"><span class="keyword">int</span> fx = Find(u), fy = Find(v);</span><br><span class="line"><span class="keyword">if</span>(fx == fy) <span class="keyword">continue</span>;</span><br><span class="line">idx ++;</span><br><span class="line">merge(idx, fx);</span><br><span class="line">merge(idx, fy);</span><br><span class="line">val[idx] = w;</span><br><span class="line"><span class="keyword">if</span>(idx == <span class="number">2</span> * k - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">dfs(idx, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">while</span>(q --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;u, &amp;v);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, val[LCA(u, v)] ? val[LCA(u, v)] : <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Graph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 缩点 </tag>
            
            <tag> 最小瓶颈路 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「CodeForces-1252L」Road Construction(二分图最大匹配)</title>
      <link href="/2019/11/01/Codeforces-1252L/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://codeforces.com/contest/1252/problem/L" target="_blank" rel="noopener">L - Road Construction</a><br>给定一棵基环树上的边，每一条边可以被指定类的工人维修，求能使树上点联通的维修方案</p></blockquote><a id="more"></a><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一棵基环树上的边，每一条边可以被指定类的工人维修，求能使树上点联通的维修方案。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>如果对于边和工人一一连边，边数可能达到$NK$，考虑简化边数。</p><p>对于每组边对应的类型数$M_i$，有$\sum_{i=1}^n M_i&lt;=10000$，所以让树边与工人类型数连边，并对每种类型的工人计数，连向汇点即可。</p><p>对于一棵基环树，要选$n-1$条边使其联通，假设其环上有k条边，必须选择“环上的k-1条边”和“环外的所有边”。dfs求出基环树上的环，存储“环外的边”为A集合，“环上的边”为B集合。</p><p>首先对起点向A集合中的点连边，判断是否全部匹配；再对起点向B集合中的点连边，判断总的流量是否$&gt;=n-1$即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm = <span class="number">10000</span> + <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="keyword">int</span> pre[maxn], id[maxn];</span><br><span class="line"><span class="keyword">int</span> dfn[maxn], cnt;</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; edge[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A, B;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; tag;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dfn[u] = ++ cnt;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> x : edge[u])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v = x.first;</span><br><span class="line"><span class="keyword">if</span>(v == pre[u]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(dfn[v])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dfn[v] &lt; dfn[u]) <span class="keyword">continue</span>;</span><br><span class="line">B.push_back(x.second);</span><br><span class="line"><span class="keyword">for</span>(; v != u; v = pre[v]) B.push_back(id[v]);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">pre[v] = u;</span><br><span class="line">id[v] = x.second;</span><br><span class="line">dfs(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_V = <span class="number">10000</span> + <span class="number">2000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> res[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Dinic</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span> <span class="keyword">int</span> to, cap, rev; &#125; ;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; G[MAX_V];</span><br><span class="line"><span class="keyword">int</span> level[MAX_V];</span><br><span class="line"><span class="keyword">int</span> iter[MAX_V];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to, <span class="keyword">int</span> cap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">G[from].push_back((edge)&#123;to, cap, (<span class="keyword">int</span>)G[to].size()&#125;);</span><br><span class="line">G[to].push_back((edge)&#123;from, <span class="number">0</span>, (<span class="keyword">int</span>)G[from].size() - <span class="number">1</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(level, <span class="number">-1</span>, <span class="keyword">sizeof</span> level);</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">level[s] = <span class="number">0</span>;</span><br><span class="line">que.push(s);</span><br><span class="line"><span class="keyword">while</span>(!que.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v = que.front(); que.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[v].size(); i ++)</span><br><span class="line">&#123;</span><br><span class="line">edge &amp;e = G[v][i];</span><br><span class="line"><span class="keyword">if</span>(e.cap &gt; <span class="number">0</span> &amp;&amp; level[e.to] &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">level[e.to] = level[v] + <span class="number">1</span>;</span><br><span class="line">que.push(e.to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> t, <span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(v == t) <span class="keyword">return</span> f;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> &amp;i = iter[v]; i &lt; G[v].size(); i ++)</span><br><span class="line">&#123;</span><br><span class="line">edge &amp;e = G[v][i];</span><br><span class="line"><span class="keyword">if</span>(e.cap &gt; <span class="number">0</span> &amp;&amp; level[v] &lt; level[e.to])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> d = dfs(e.to, t, min(f, e.cap));</span><br><span class="line"><span class="keyword">if</span>(d &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">e.cap -= d;</span><br><span class="line">G[e.to][e.rev].cap += d;</span><br><span class="line"><span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max_flow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> flow = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;;)</span><br><span class="line">&#123;</span><br><span class="line">bfs(s);</span><br><span class="line"><span class="keyword">if</span>(level[t] &lt; <span class="number">0</span>) <span class="keyword">return</span> flow;</span><br><span class="line"><span class="built_in">memset</span>(iter, <span class="number">0</span>, <span class="keyword">sizeof</span> iter);</span><br><span class="line"><span class="keyword">int</span> f;</span><br><span class="line"><span class="keyword">while</span>((f = dfs(s, t, inf)) &gt; <span class="number">0</span>) flow += f;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getans</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> e : G[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(e.to &lt;= n) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(e.cap == <span class="number">0</span>) res[i] = e.to - n;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;dinic;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; P[maxm];</span><br><span class="line"><span class="keyword">int</span> pos[maxm];</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; e[maxn];</span><br><span class="line"><span class="keyword">int</span> ans[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</span><br><span class="line"><span class="keyword">int</span> S = <span class="number">0</span>, T;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u, k, x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;k);</span><br><span class="line">edge[i].push_back(&#123;u, i&#125;);</span><br><span class="line">edge[u].push_back(&#123;i, i&#125;);</span><br><span class="line">e[i] = make_pair(i, u);</span><br><span class="line"><span class="keyword">while</span>(k --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line"><span class="keyword">if</span>(!tag[x]) tag[x] = ++ tot;</span><br><span class="line">dinic.add(i, tag[x] + n, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> v : B) vis[v] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="keyword">if</span>(!vis[i]) A.push_back(i);</span><br><span class="line">T = n + tot + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line"><span class="keyword">if</span>(!tag[x]) <span class="keyword">continue</span>;</span><br><span class="line">P[tag[x]].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; i ++) dinic.add(n + i, T, (<span class="keyword">int</span>)P[i].size());</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> x : A) dinic.add(S, x, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> cur = dinic.max_flow(S, T);</span><br><span class="line"><span class="keyword">if</span>(cur &lt; A.size()) <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> x : B) dinic.add(S, x, <span class="number">1</span>);</span><br><span class="line">cur += dinic.max_flow(S, T);</span><br><span class="line"><span class="keyword">if</span>(cur &lt; n - <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span> * <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">dinic.getans();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(pos[res[i]] == P[res[i]].size()) <span class="keyword">continue</span>;</span><br><span class="line">ans[P[res[i]][pos[res[i]]]] = i;</span><br><span class="line">pos[res[i]] ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i ++) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ans[i] == <span class="number">0</span>) <span class="built_in">puts</span>(<span class="string">"0 0"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, e[ans[i]].first, e[ans[i]].second);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Graph </category>
          
          <category> Network Flow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dinic </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「BZOJ-3926」[Zjoi2015]诸神眷顾的幻想乡(后缀自动机)</title>
      <link href="/2019/10/31/BZOJ-3926/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3926" target="_blank" rel="noopener">BZOJ3122-[Zjoi2015]诸神眷顾的幻想乡</a></p></blockquote><a id="more"></a><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>写了cls的题当然要写题解辣！</p><p>题意相当于给了你一棵点数为$n$的树，每个点上有一个(a-j)的字符，求这颗树上所有本质不同字符串的个数（一条路径上起点与终点相反的两个串视为不同）。</p><p>由于所给的树叶子节点不超过20个，考虑以每一个叶子节点为起点进行dfs，建立广义后缀自动机，即在父节点的状态后加入子节点，然后求本质不同的字符串个数即可。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> col[maxn], in[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> last = <span class="number">1</span>, cnt = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> ch[maxn &lt;&lt; <span class="number">1</span>][<span class="number">10</span>], fa[maxn &lt;&lt; <span class="number">1</span>], len[maxn &lt;&lt; <span class="number">1</span>], pos[maxn];</span><br><span class="line"><span class="keyword">int</span> sz[maxn &lt;&lt; <span class="number">1</span>], a[maxn &lt;&lt; <span class="number">1</span>], c[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> p = last, np = ++ cnt;</span><br><span class="line">last = np, len[np] = len[p] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(; p &amp;&amp; !ch[p][c]; p = fa[p]) ch[p][c] = np;</span><br><span class="line"><span class="keyword">if</span>(!p) fa[np] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> q = ch[p][c];</span><br><span class="line"><span class="keyword">if</span>(len[p] + <span class="number">1</span> == len[q]) fa[np] = q;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> nq = ++ cnt;</span><br><span class="line">len[nq] = len[p] + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(ch[nq], ch[q], <span class="keyword">sizeof</span> ch[q]);</span><br><span class="line">fa[nq] = fa[q], fa[q] = fa[np] = nq;</span><br><span class="line"><span class="keyword">for</span>(; ch[p][c] == q; p = fa[p]) ch[p][c] = nq;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> np;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pre, <span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">last = p;</span><br><span class="line"><span class="keyword">int</span> q = ins(col[u]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[u].size(); i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v = G[u][i];</span><br><span class="line"><span class="keyword">if</span>(v == pre) <span class="keyword">continue</span>;</span><br><span class="line">dfs(v, u, q);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;c);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;col[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">G[u].push_back(v), G[v].push_back(u);</span><br><span class="line">in[u] ++; in[v] ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="keyword">if</span>(in[i] == <span class="number">1</span>) dfs(i, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i ++) ans += len[i] - len[fa[i]];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> String </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SAM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「CodeForces-1250E」The Coronation(2-SAT)</title>
      <link href="/2019/10/29/Codeforces-1250E/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="https://codeforces.com/contest/1250/problem/E" target="_blank" rel="noopener">「CodeForces-1250E」The Coronation</a></p><p>给定一系列01串，求翻转次数最小的情况下，令任意两个串有至少k位相同的合法方案</p></blockquote><a id="more"></a><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定$n$个长度为$m$的01串，可以对任意串进行翻转，求满足任意两个串至少有k位相同的翻转方案，并使翻转次数最小。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>2-SAT问题。</p><p>设串不翻转为0，翻转为1，则对于任意两个串都有如下四种情况：</p><ol><li>a,b和a,rev(b)相同位数均大于等于k，此时a,b相互之间没有限制；</li><li>a,b相同之间位数大于等于k，a,rev(b)之间相同位数小于k，此时a,b必须相同，即XOR(a,b)=0;</li><li>a,b相同之间位数小于等于k，a,rev(b)之间相同位数大于k，此时a,b必须相反，即XOR(a,b)=1;</li><li>a,b和a,rev(b)相同位数均小于k，即无论怎么翻转都不能使a,b两者匹配；</li></ol><p>一旦出现4，整组情况一定是无解的。</p><p>相当于原串所代表的点形成若干个联通块，每一个联通块中的元素颜色是相互联系的（即如果翻转一个，必须翻转该块中的所有元素）。</p><p>建完图后对点$i$和点$i+n$进行dfs，因为图的两侧完全对称，一定会搜出一组点完全相反的两种染色方案，只要选择翻转次数较小的那一组即可。注意在dfs时需要判奇环，如果出现奇环则无解。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span> + <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line">ll id[maxn];</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="keyword">int</span> res[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">getid</span><span class="params">(<span class="keyword">char</span> s[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i ++)<span class="keyword">if</span>(s[i] - <span class="string">'0'</span>) res += (<span class="number">1l</span>l &lt;&lt; (len - i - <span class="number">1</span>));</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">check</span><span class="params">(ll a, ll b)</span> </span>&#123; <span class="keyword">return</span> m - __builtin_popcountll(a ^ b); &#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123; g[a].push_back(b);  &#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">XOR</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(c == <span class="number">0</span>) add(a, b), add(a + n, b + n), add(b, a), add(b + n, a + n);</span><br><span class="line"><span class="keyword">else</span> add(a, b + n), add(a + n, b), add(b, a + n), add(b + n, a);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= (n &lt;&lt; <span class="number">1</span>); i ++) vis[i] = res[i] =  <span class="number">0</span>, g[i].clear();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vis[u] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">res.push_back(u);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> v : g[u]) <span class="keyword">if</span>(!vis[v]) t += dfs(v, res);</span><br><span class="line"><span class="keyword">return</span> t + (u &gt; n);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> _;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;_);</span><br><span class="line"><span class="keyword">while</span>(_ --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">id[i] = getid(s, m);</span><br><span class="line">reverse(s, s + m);</span><br><span class="line">id[i + n] = getid(s, m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(check(id[i], id[j]) &lt; k &amp;&amp; check(id[i], id[j + n]) &lt; k) flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(check(id[i], id[j]) &gt;= k &amp;&amp; check(id[i], id[j + n]) &lt; k) XOR(i, j, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(check(id[i], id[j + n]) &gt;= k &amp;&amp; check(id[i], id[j]) &lt; k) XOR(i, j, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="keyword">if</span>(!vis[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A, B;</span><br><span class="line"><span class="keyword">int</span> a = dfs(i, A);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> j : A) <span class="keyword">if</span>(j == i + n) flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">int</span> b = dfs(i + n, B);</span><br><span class="line"><span class="keyword">if</span>(a &lt; b) &#123; <span class="keyword">for</span>(<span class="keyword">auto</span> i : A) <span class="keyword">if</span>(i &gt; n) ans.push_back(i - n); &#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="keyword">for</span>(<span class="keyword">auto</span> i : B) <span class="keyword">if</span>(i &gt; n) ans.push_back(i - n); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flag) &#123; <span class="built_in">printf</span>(<span class="string">"-1\n"</span>); <span class="keyword">continue</span>; &#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans.size());</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i : ans) <span class="built_in">printf</span>(<span class="string">"%d "</span>, i);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Graph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2-SAT </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「2018 EC-Final」J - Philosophical … Balance(SAM+纳什均衡)</title>
      <link href="/2019/10/15/GYM-102056/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="https://codeforces.com/gym/102056/problem/J" target="_blank" rel="noopener">「 2018-2019 ACM-ICPC, Asia East Continent Finals 」J - Philosophical … Balance</a></p></blockquote><a id="more"></a><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给一个字符串，先手给串的每一个位置赋一个值$p_i$并保证$p_i \ge 0, \sum_{i=1}^n p_i = 1$，后手选择一个子串$j$。有式子$\sum_{k=1}^n p_k \mathrm{lcp}(s_k,s_j)$，先手想使其尽可能大，后手想使其尽可能小。先手要如何操作才能使这个值最大，求这个最大值。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>看了<a href="https://www.cnblogs.com/mangoyang/p/10476902.html" target="_blank" rel="noopener">这篇题解</a>，网友是真的牛逼（战术后仰）</p><p>将原串反向，建立后缀自动机。<br>对于反串的后缀树，此时后手如果选择某个子树$u$中选择串$s_j$，在$p$固定的情况下要使lcp最小，显然最优解为选择子树的根。</p><p>在后缀自动机的suffix link树中，如果当前state为np节点，则直接取当前节点的len作为答案。否则需要合并若干子树的答案，答案为一个纳什均衡的模型，即每个子节点的贡献相等。那么该点的贡献为$len[u]+x$，其中$len[u]$一定会取到，$x$为纳什均衡下可以取到的最大值，推一下子树的$x$得到$x = \frac{1}{\sum \frac{1}{f_i}}$，那么在suffix link树上dfs即可求出答案。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SuffixAutomation</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> last, cnt;</span><br><span class="line"><span class="keyword">int</span> ch[maxn &lt;&lt; <span class="number">1</span>][<span class="number">26</span>], fa[maxn &lt;&lt; <span class="number">1</span>], len[maxn &lt;&lt; <span class="number">1</span>], pos[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> sz[maxn &lt;&lt; <span class="number">1</span>], a[maxn &lt;&lt; <span class="number">1</span>], c[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i ++) g[i].clear();</span><br><span class="line">    last = cnt = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(ch[<span class="number">1</span>], <span class="number">0</span>, <span class="keyword">sizeof</span> ch[<span class="number">1</span>]);</span><br><span class="line">    fa[<span class="number">1</span>] = len[<span class="number">1</span>] = sz[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="keyword">inline</span> <span class="title">newnode</span><span class="params">(<span class="keyword">int</span> idx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">++cnt;</span><br><span class="line"><span class="built_in">memset</span>(ch[cnt], <span class="number">0</span>, <span class="keyword">sizeof</span> ch[cnt]);</span><br><span class="line">fa[cnt] = len[cnt] = sz[cnt] = <span class="number">0</span>;</span><br><span class="line">pos[cnt] = idx;</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> p = last , np = newnode(pos[last] + <span class="number">1</span>);</span><br><span class="line">last = np, len[np] = len[p] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(; p &amp;&amp; !ch[p][c]; p = fa[p]) ch[p][c] = np;</span><br><span class="line"><span class="keyword">if</span>(!p) fa[np] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> q = ch[p][c];</span><br><span class="line"><span class="keyword">if</span>(len[p] + <span class="number">1</span> == len[q]) fa[np] = q;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> nq = newnode(pos[p] + <span class="number">1</span>);</span><br><span class="line">len[nq] = len[p] + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(ch[nq], ch[q], <span class="keyword">sizeof</span> ch[q]);</span><br><span class="line">fa[nq] = fa[q], fa[q] = fa[np] = nq;</span><br><span class="line"><span class="keyword">for</span>(; ch[p][c] == q; p = fa[p]) ch[p][c] = nq;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        sz[np] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">suffixTree</span><span class="params">()</span> </span>&#123; <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= cnt; i ++) g[fa[i]].push_back(i); &#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(sz[u]) <span class="keyword">return</span> l;</span><br><span class="line">    <span class="keyword">double</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v : g[u]) res += <span class="number">1.0</span> / dfs(v, len[v] - len[u]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1.0</span> / res + l;</span><br><span class="line">&#125;</span><br><span class="line">&#125;sam;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;_);</span><br><span class="line">    <span class="keyword">while</span>(_ --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">        sam.init();</span><br><span class="line">        <span class="keyword">int</span> n = <span class="built_in">strlen</span>(s);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i --) sam.ins(s[i] - <span class="string">'a'</span>);</span><br><span class="line">        sam.suffixTree();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.10f\n"</span>, sam.dfs(<span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> String </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博弈 </tag>
            
            <tag> 后缀自动机 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「UOJ-171」【WC2016】挑战NPC(一般图匹配带花树)</title>
      <link href="/2019/10/15/UOJ-171/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://uoj.ac/problem/171" target="_blank" rel="noopener">「UOJ-171」【WC2016】挑战NPC</a></p></blockquote><a id="more"></a><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>有$n$个球和$m$个筐，每个球可以放入与其连边的某个筐，每个筐最多放三个球。将所有球放入筐中，筐中不超过一个球时称为「半满」，需要使半满的框数最多，并输出其中一种方案数。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>把一个筐拆成三个点，三个点之间两两连边。将可以放入某个框中的球向框的三个点连边，跑一遍带花树，$n-maxmatch$即为最大值。</p><p>因为对于某一个筐的三个点来说：球数为0时最大匹配为1，球数为1时最大匹配为2，球数为2和3时最大匹配为2。</p><p>那么对于这个筐，它对答案的贡献即为（最大匹配数-球数），输出方案即可。</p><p>注意求解时要先匹配球，否则会先匹配同一个筐与筐之间的连边，这样求出的方案就不对了orz。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; edge[maxn];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, pre[maxn], type[maxn], link[maxn], nex[maxn], vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[u].push_back(v);</span><br><span class="line">    edge[v].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x == pre[x] ? x : pre[x] = Find(pre[x]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">combine</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> lca)</span>    <span class="comment">//如果找到奇环，对当前点x和找到的</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (x != lca)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = link[x], v = nex[u];</span><br><span class="line">        <span class="keyword">if</span> (Find(v) != lca) nex[v] = u;</span><br><span class="line">        <span class="keyword">if</span> (type[u] == <span class="number">1</span>) type[u] = <span class="number">2</span>, que.push(u);</span><br><span class="line">        pre[Find(x)] = Find(u);</span><br><span class="line">        pre[Find(u)] = Find(v);</span><br><span class="line">        x = v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">contrack</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lca = x;</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = x; i; i = nex[link[i]])</span><br><span class="line">    &#123;</span><br><span class="line">        i = Find(i);</span><br><span class="line">        vis[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = y; i; i = nex[link[i]])</span><br><span class="line">    &#123;</span><br><span class="line">        i = Find(i);</span><br><span class="line">        <span class="keyword">if</span> (vis[i])</span><br><span class="line">        &#123;</span><br><span class="line">            lca = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (lca != Find(x)) nex[x] = y;</span><br><span class="line">    <span class="keyword">if</span> (lca != Find(y)) nex[y] = x;</span><br><span class="line">    combine(x, lca);</span><br><span class="line">    combine(y, lca);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(type, <span class="number">0</span>, <span class="keyword">sizeof</span>(type));</span><br><span class="line">    <span class="built_in">memset</span>(nex, <span class="number">0</span>, <span class="keyword">sizeof</span>(nex));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) pre[i] = i;</span><br><span class="line">    <span class="keyword">while</span> (!que.empty()) que.pop();</span><br><span class="line">    que.push(s);</span><br><span class="line">    type[s] = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">while</span> (!que.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x = que.front();</span><br><span class="line">        que.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; edge[x].size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> y = edge[x][i];</span><br><span class="line">            <span class="keyword">if</span> (Find(x) == Find(y) || link[x] == y || type[y] == <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (type[y] == <span class="number">2</span>) contrack(x, y);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (link[y])</span><br><span class="line">            &#123;</span><br><span class="line">                nex[y] = x;</span><br><span class="line">                type[y] = <span class="number">1</span>;</span><br><span class="line">                type[link[y]] = <span class="number">2</span>;</span><br><span class="line">                que.push(link[y]);</span><br><span class="line">            &#125; <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                nex[y] = x;</span><br><span class="line">                <span class="keyword">int</span> pos = y, u = nex[pos], v = link[u];</span><br><span class="line">                <span class="keyword">while</span> (pos)</span><br><span class="line">                &#123;</span><br><span class="line">                    link[pos] = u;</span><br><span class="line">                    link[u] = pos;</span><br><span class="line">                    pos = v;</span><br><span class="line">                    u = nex[pos];</span><br><span class="line">                    v = link[u];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxmatch</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i --) <span class="keyword">if</span> (!link[i]) bfs(i);</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i --) <span class="keyword">if</span> (link[i]) ans++;</span><br><span class="line">    <span class="keyword">return</span> ans / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) edge[i].clear();</span><br><span class="line">    <span class="built_in">memset</span>(link, <span class="number">0</span>, <span class="keyword">sizeof</span>(link));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;_);</span><br><span class="line">    <span class="keyword">while</span>(_ --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> N, m, e;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;N, &amp;m, &amp;e);</span><br><span class="line">        n = <span class="number">3</span> * m + N;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span> * m; i += <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            add(i, i + <span class="number">1</span>);</span><br><span class="line">            add(i, i + <span class="number">2</span>);</span><br><span class="line">            add(i + <span class="number">1</span>, i + <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="keyword">while</span>(e --)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">            add(u + <span class="number">3</span> * m, (v - <span class="number">1</span>) * <span class="number">3</span> + <span class="number">1</span>);</span><br><span class="line">            add(u + <span class="number">3</span> * m, (v - <span class="number">1</span>) * <span class="number">3</span> + <span class="number">2</span>);</span><br><span class="line">            add(u + <span class="number">3</span> * m, (v - <span class="number">1</span>) * <span class="number">3</span> + <span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, maxmatch() - N);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> + <span class="number">3</span> * m; i &lt;= n; i ++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, (link[i] - <span class="number">1</span>) / <span class="number">3</span> + <span class="number">1</span>, <span class="string">" \n"</span>[i == n]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Graph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 一般图匹配 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「CodeForces-919E」Congruence Equation(费马小定理)</title>
      <link href="/2019/08/29/Codeforces-919E/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="https://codeforces.com/contest/919/problem/E" target="_blank" rel="noopener">「CodeForces-919E」Congruence Equation</a></p><p>给定a,b,n,p，求关于n的方程n⋅a^n≡b(mod p)在[1,x]中整数解的数量</p></blockquote><a id="more"></a><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>对原式$k \cdot a^k \equiv b \quad (\textrm{mod}\;p)$，考虑消去指数。由费马小定理，对质数$p$，有$a^{(p-1)} \equiv 1 \quad (\textrm{mod}\;p)$。</p><p>令$k=x\cdot(p-1)+y$，则原式转化为</p><p>$$(x\cdot(p-1)+y)\cdot a^{x\cdot(p-1)+y} \equiv b \quad (\textrm{mod}\;p)$$</p><p>$$(x\cdot(p-1)+y)\cdot a^{y} \equiv b \quad (\textrm{mod}\;p)$$</p><p>$$x\cdot(p-1)+y \equiv b \cdot a^{-y}\quad (\textrm{mod}\ p)$$</p><p>$$x\equiv y-b \cdot a^{-y}\quad (\textrm{mod}\ p)$$</p><p>问题转化为求$x\equiv y-b \cdot a^{-y}\quad (\textrm{mod}\ p)$在$(x\cdot(p-1)+y)∈[1,n]$中解的个数。</p><p>枚举$y∈[0,p-2]$，计算$x$的个数，其中若$x,y$均为0时$n=0$，需要减去。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line">ll a, b, n, p;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">inv</span><span class="params">(ll a, ll n = p - <span class="number">2</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(; n; n &gt;&gt;= <span class="number">1</span>, (a *= a) %= p) <span class="keyword">if</span>(n &amp; <span class="number">1</span>) (res *= a) %= p;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; p &gt;&gt; n;</span><br><span class="line">    ll inva = inv(a), res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; p - <span class="number">1</span>; y ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// x = y - b * a ^ (-y) + k * p</span></span><br><span class="line">        ll x = (y - b + p) % p;</span><br><span class="line">        <span class="keyword">if</span>(y &lt;= n &amp;&amp; (n - y) / (p - <span class="number">1</span>) &gt;= x)</span><br><span class="line">        &#123;</span><br><span class="line">            res += ((n - y) / (p - <span class="number">1</span>) - x) / p + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(x == <span class="number">0</span> &amp;&amp; y == <span class="number">0</span>) res --;</span><br><span class="line">        &#125;</span><br><span class="line">        (b *= inva) %= p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 费马小定理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「UVALive-7264」Kejin Game(最小割)</title>
      <link href="/2019/08/22/UVALive-7264/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=5276" target="_blank" rel="noopener">「LA-7264」Kejin Game</a><br>最小割模型，到达给定点所需的最小花费</p></blockquote><a id="more"></a><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>游戏内有一个技能树（为DAG），每个技能有一些前置技能，必须先学习完前置技能才能学习当前技能。</p><p>你是一个氪金玩家。你可以选择氪金跳过所有前置技能直接学习某个技能；或者氪金切断A到B的边，使技能A不再是B的前置技能（也就意味着学习技能B不再需要先学技能A），并且在学习完所有仍然存在的前置技能（可能为0）后，花费正常的价格学习当前技能。</p><p>求习得某个技能$S$所需的最小花费。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>对于技能$i$，有两种方式习得该技能：</p><ol><li>直接氪金习得该技能</li><li>切断一些前置技能的边，习得剩下的前置技能(同样可以通过1,2两种方式)，并且花费正常价格学习当前技能</li></ol><p>考虑拆点，令点$i+n$为学习技能$i$的最小花费。</p><p>对$i$和$i+n$连边，容量为氪金学习该技能的花费；</p><p>对$S$和$i$连边，容量为正常价格学习该技能的花费；</p><p>对$j+n$和$i$连边，其中$j$为$i$的前置技能，容量为切断$j-i$的花费。</p><p>那么$S$到$i+n$的最小割即为”氪金直接学习当前技能“与”切断一部分前置技能，学习剩下的前置技能，正常学习当前技能“的花费当中的较小值。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_V = <span class="number">1000</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用于表示边的结构体（终点，流量，反向边）</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> to, cap, rev;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; G[MAX_V];<span class="comment">//图的邻接表表示</span></span><br><span class="line"><span class="keyword">int</span> level[MAX_V];<span class="comment">//顶点到源点的距离标号</span></span><br><span class="line"><span class="keyword">int</span> iter[MAX_V];<span class="comment">//当前弧</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to, <span class="keyword">int</span> cap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">G[from].push_back((edge)&#123;to, cap, G[to].size()&#125;);</span><br><span class="line">G[to].push_back((edge)&#123;from, <span class="number">0</span>, G[from].size() - <span class="number">1</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算从源点出发的距离标号</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(level, <span class="number">-1</span>, <span class="keyword">sizeof</span>(level));</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">level[s] = <span class="number">0</span>;</span><br><span class="line">que.push(s);</span><br><span class="line"><span class="keyword">while</span>(!que.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v = que.front(); que.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[v].size(); i++)</span><br><span class="line">&#123;</span><br><span class="line">edge &amp;e = G[v][i];</span><br><span class="line"><span class="keyword">if</span>(e.cap &gt; <span class="number">0</span> &amp;&amp; level[e.to] &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">level[e.to] = level[v] + <span class="number">1</span>;</span><br><span class="line">que.push(e.to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过DFS寻找增广路</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> t, <span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(v == t) <span class="keyword">return</span> f;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> &amp;i = iter[v]; i&lt;G[v].size(); i++)</span><br><span class="line">&#123;</span><br><span class="line">edge &amp;e = G[v][i];</span><br><span class="line"><span class="keyword">if</span>(e.cap &gt; <span class="number">0</span> &amp;&amp; level[v] &lt; level[e.to])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> d = dfs(e.to, t, min(f, e.cap));</span><br><span class="line"><span class="keyword">if</span>(d &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">e.cap -= d;</span><br><span class="line">G[e.to][e.rev].cap += d;</span><br><span class="line"><span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求解从s到t的最大流</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max_flow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> flow = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;;)</span><br><span class="line">&#123;</span><br><span class="line">bfs(s);</span><br><span class="line"><span class="keyword">if</span>(level[t] &lt; <span class="number">0</span>) <span class="keyword">return</span> flow;</span><br><span class="line"><span class="built_in">memset</span>(iter, <span class="number">0</span>, <span class="keyword">sizeof</span>(iter));</span><br><span class="line"><span class="keyword">int</span> f;</span><br><span class="line"><span class="keyword">while</span>((f = dfs(s,t,INF)) &gt; <span class="number">0</span>) flow += f;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _, n, m, p, a, b, c;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;_);</span><br><span class="line">    <span class="keyword">while</span>(_ --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;p);</span><br><span class="line">        <span class="keyword">int</span> S = <span class="number">0</span>, T = <span class="number">2</span> * n + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= T; i ++) G[i].clear();</span><br><span class="line">        <span class="keyword">while</span>(m --)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">            add(a + n, b, c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;c), add(S, i, c);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;c), add(i, i + n, c);</span><br><span class="line">        add(p + n, T, INF);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, max_flow(S, T));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Graph </category>
          
          <category> Network Flow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最小割 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「HDU-6661」Acesrc and String Theory (后缀数组)</title>
      <link href="/2019/08/21/HDU-6661/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6661" target="_blank" rel="noopener">「HDU-6661」Acesrc and String Theory</a><br>给定一个串，问由k个循环节组成的子串数量</p></blockquote><a id="more"></a><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>考虑找到一个由循环节构成的联通块。枚举循环节长度$i∈(1,n/2)$，找到区间$[L,R]$为某个循环节长度为$i$的极大循环节（向右能够扩展的长度小于$i$），求得$extR=lcp(s(L),s(R+1))$为该串可以向右扩展的最大长度，并翻转原串求出向左扩展的最大长度$extL=lcp(revs(n+1-R), revs(n+1-L+1))$，那么求出的块为$[l,r]$为$[L-extL,R+extR]$。当前块对答案的贡献为“长度为$r-l+1$的串中长度为$k×i$的子串个数”，即$(r-l+1)-k×i+1$。</p><p>当$k=1​$时需要特判。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SA</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> s[maxn];</span><br><span class="line">    <span class="keyword">int</span> sa[maxn], t[maxn], t2[maxn], c[maxn], n;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build_sa</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> *x = t, *y = t2;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) c[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) c[x[i] = s[i]]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) c[i] += c[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) sa[--c[x[i]]] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = n - k; i &lt; n; i++) y[p++] = i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">if</span>(sa[i] &gt;= k) y[p++] = sa[i] - k;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) c[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) c[x[y[i]]]++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) c[i] += c[i - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) sa[--c[x[y[i]]]] = y[i];</span><br><span class="line">            swap(x, y);</span><br><span class="line">            p = <span class="number">1</span>; x[sa[<span class="number">0</span>]] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">                x[sa[i]] = y[sa[i - <span class="number">1</span>]] == y[sa[i]] &amp;&amp; y[sa[i - <span class="number">1</span>] + k] == y[sa[i] + k] ? p - <span class="number">1</span> : p++;</span><br><span class="line">            <span class="keyword">if</span>(p &gt;= n) <span class="keyword">break</span>;</span><br><span class="line">            m = p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> rk[maxn], height[maxn];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">getHeight</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) rk[sa[i]] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, k = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(k) k--;</span><br><span class="line">            <span class="keyword">int</span> j = sa[rk[i] - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">while</span>(s[i + k] == s[j + k]) k++;</span><br><span class="line">            height[rk[i]] = k;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt; <span class="number">0</span>; i --) rk[i] = rk[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> dp[maxn][<span class="number">21</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">RMQ</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) dp[i][<span class="number">0</span>] = height[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; j) &lt; maxn; j ++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= n; i ++)</span><br><span class="line">                dp[i][j] = min(dp[i][j - <span class="number">1</span>], dp[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((<span class="number">1</span> &lt;&lt; (k + <span class="number">1</span>)) &lt;= r - l + <span class="number">1</span>) k ++;</span><br><span class="line">        <span class="keyword">return</span> min(dp[l][k], dp[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lcp</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x = rk[x], y = rk[y];</span><br><span class="line">        <span class="keyword">if</span>(x &gt; y) swap(x, y);</span><br><span class="line">        <span class="keyword">return</span> query(x + <span class="number">1</span>, y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;A, B;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">work</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> exR = A.lcp(l, r + <span class="number">1</span>), exL = B.lcp(n + <span class="number">1</span> - r, n + <span class="number">1</span> - l + <span class="number">1</span>);</span><br><span class="line">    l -= exL, r += exR;</span><br><span class="line">    <span class="keyword">return</span> max(<span class="number">0</span>, r - l + <span class="number">1</span> - p * k + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;_);</span><br><span class="line">    <span class="keyword">while</span>(_ --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%s"</span>, &amp;k, A.s);</span><br><span class="line">        n = <span class="built_in">strlen</span>(A.s);</span><br><span class="line">        <span class="keyword">if</span>(k == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, <span class="number">1l</span>l * n * (n + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        reverse_copy(A.s, A.s + n, B.s); A.n = B.n = n;</span><br><span class="line">        A.build_sa(n + <span class="number">1</span>, <span class="number">130</span>), B.build_sa(n + <span class="number">1</span>, <span class="number">130</span>);</span><br><span class="line">        A.getHeight(), B.getHeight();</span><br><span class="line">        A.RMQ(), B.RMQ();</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n / <span class="number">2</span>; i ++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> last = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j += i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(A.lcp(last, j) &gt;= i) <span class="keyword">continue</span>;</span><br><span class="line">                ans += work(last, j - <span class="number">1</span>, i);</span><br><span class="line">                <span class="keyword">if</span>(j + i - <span class="number">1</span> &lt;= n) last = j;</span><br><span class="line">                <span class="keyword">else</span> last = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(last) ans += work(last, n, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> String </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后缀数组 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「LightOJ-1428」Melody Comparison(后缀数组)</title>
      <link href="/2019/08/14/Lightoj-1428/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://lightoj.com/volume_showproblem.php?problem=1428" target="_blank" rel="noopener">「LightOJ-1428」Melody Comparison</a><br>给定串A和串B，求串A本质不同且不包含串B的子串个数。</p></blockquote><a id="more"></a><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>KMP预处理出串A的每个后缀向右延伸的最远的不包含串B的位置<code>rmax[i]</code>。那么对于后缀<code>sa[i]</code>，它的不包含串B的前缀个数为<code>rmax[sa[i]]</code>个。因为要求本质不同的子串个数，需要减去当前后缀和上一个后缀相同的前缀个数<code>height[i]</code>。答案即为$ans=\sum_{i=1}^nrmax[sa[i]]-min(height[i],rmax[i])$。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e4</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[maxn], b[maxn];</span><br><span class="line"><span class="keyword">int</span> sa[maxn], t[maxn], t2[maxn], c[maxn], n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_sa</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> *x = t, *y = t2;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) c[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) c[x[i] = s[i]]++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) c[i] += c[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) sa[--c[x[i]]] = i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n - k; i &lt; n; i++) y[p++] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">if</span>(sa[i] &gt;= k) y[p++] = sa[i] - k;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) c[i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) c[x[y[i]]]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) c[i] += c[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) sa[--c[x[y[i]]]] = y[i];</span><br><span class="line">        swap(x, y);</span><br><span class="line">        p = <span class="number">1</span>; x[sa[<span class="number">0</span>]] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">            x[sa[i]] = y[sa[i - <span class="number">1</span>]] == y[sa[i]] &amp;&amp; y[sa[i - <span class="number">1</span>] + k] == y[sa[i] + k] ? p - <span class="number">1</span> : p++;</span><br><span class="line">        <span class="keyword">if</span>(p &gt;= n) <span class="keyword">break</span>;</span><br><span class="line">        m = p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rk[maxn], height[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getHeight</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) rk[sa[i]] = i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, k = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(k) k--;</span><br><span class="line">        <span class="keyword">int</span> j = sa[rk[i] - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">while</span>(s[i + k] == s[j + k]) k++;</span><br><span class="line">        height[rk[i]] = k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--) ++sa[i], rk[i] = rk[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rmax[maxn], nex[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getNext</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">strlen</span>(b), i = <span class="number">0</span>, j = <span class="number">-1</span>;</span><br><span class="line">    nex[i] = j;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(j == <span class="number">-1</span> || b[i] == b[j]) nex[++ i] = ++ j;</span><br><span class="line">        <span class="keyword">else</span> j = nex[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KMP</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">strlen</span>(s), m = <span class="built_in">strlen</span>(b), i = <span class="number">0</span>, j = <span class="number">0</span>, pos = <span class="number">1</span>;</span><br><span class="line">    getNext();</span><br><span class="line">    <span class="keyword">while</span>(i &lt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(j == <span class="number">-1</span> || s[i] == b[j]) i ++, j ++;</span><br><span class="line">        <span class="keyword">else</span> j = nex[j];</span><br><span class="line">        <span class="keyword">if</span>(j == m)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> p = pos; p &lt;= i - m + <span class="number">1</span>; p ++) rmax[p] = i - p;</span><br><span class="line">            j = nex[j], pos = i - m + <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(pos &lt;= n) rmax[pos] = n - pos + <span class="number">1</span>, pos ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> _ = <span class="number">1</span>; _ &lt;= T; _ ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s%s"</span>, s, b);</span><br><span class="line">        n = <span class="built_in">strlen</span>(s);</span><br><span class="line">        KMP();</span><br><span class="line">        build_sa(n + <span class="number">1</span>, <span class="number">130</span>);</span><br><span class="line">        getHeight();</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) res += rmax[sa[i]] - min(rmax[sa[i]], height[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: %lld\n"</span>, _, res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> String </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KMP </tag>
            
            <tag> 后缀数组 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「BZOJ-3105」[cqoi2013]新Nim游戏(博弈+线性基)</title>
      <link href="/2019/08/03/BZOJ-3105/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3105" target="_blank" rel="noopener">BZOJ3105-[cqoi2013]新Nim游戏</a><br>有n堆火柴堆，先手和后手可以依次取走若干堆火柴堆（不能全部取走），然后进行Nim游戏，先手如何取才能保证必胜，并在保证胜利的情况下使他取的火柴总数最小。</p></blockquote><a id="more"></a><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><blockquote><p>标准的Nim游戏中，只要是所有火柴堆的火柴数目异或值为0，那么先手必败，否则先手必胜。</p></blockquote><p>在取完前两轮后这个游戏就是个标准的Nim博弈。那么在先手取完后，后手一定会取走若干个火柴堆，使剩下的异或和为0。</p><p>那么对于先手，应该取走若干个火柴堆，使剩下的火柴堆不存在异或和为0的子集，也就是使剩下的火柴堆成为一个线性极大无关组。</p><p>又因为要使先手所取的火柴总数最小，我们把火柴堆从大到小排序，依次插入线性基，不能插入线性基的元素就是先手要取的火柴堆。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> d[<span class="number">32</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">31</span>; i &gt;= <span class="number">0</span>; i --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((x &gt;&gt; i) &amp; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(d[i]) x ^= d[i];</span><br><span class="line">            <span class="keyword">else</span> &#123; d[i] = x; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, a[<span class="number">105</span>];</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    sort(a, a + n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i --) <span class="keyword">if</span>(!ins(a[i])) res += a[i];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, res);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性基 </tag>
            
            <tag> 博弈 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「BZOJ-3122」[Sdoi2013]随机数生成器(BSGS)</title>
      <link href="/2019/08/02/BZOJ-3122/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3122" target="_blank" rel="noopener">BZOJ3122-[Sdoi2013]随机数生成器</a><br>有递推式X(i+1)=(aX(i)+b) mod p， 求最小的i使X(i)=t</p></blockquote><a id="more"></a><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>$$X_i=aX_{i-1}+b$$</p><p>$$\ \quad=a^2X_{i-2}+ab+b​$$</p><p>$$=…$$</p><p>$$\ \quad=a^{i-1}X_{1}+a^{i-2}b+a^{i-1}b+…+ab+b​$$</p><p>$$\ \quad=a^{i-1}X_{1}+b{a^{i-1}-1 \over a-1}​$$</p><p>又$X_i=t$，有$$a^{i-1}X_1+b{a^{i-1}-1 \over a-1}≡t \ mod \ p$$</p><p>其中只有$a_{i-1}$为未知量，对其化简得</p><p>$$a^{i-1}≡{(a-1)t+b \over (a-1)x_1+b} \ mod \ p​$$</p><p>其中$i$为题目要我们求的答案。</p><p>首先特判几种情况：</p><p>①$a=0$时，原式为$X_i=b$，若$t=b$，则$i=1$；否则无解，输出-1；</p><p>②$a=1$时，若$b=0$，分式分母为0，无解，输出-1；否则原式为$X_i=X_1+(i-1)b$，对$i$化简有$i={t-x_1 \over b}+1$，逆元求解即可；</p><p>③$X_1=t$时，有$a^{i-1}=1$，此时易得$i=1​$；</p><p>如果不存在上述情况，对于式子</p><p>$$a^{i-1}≡{(a-1)t+b \over (a-1)x_1+b} \ mod \ p$$</p><p>两边同乘$a$，有式子$$a^i≡a{(a-1)t+b \over (a-1)x_1+b} \ mod \ p$$</p><p>BSGS即可求出$i$。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> n, <span class="keyword">int</span> mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">1</span>, base = a % mod;</span><br><span class="line">    <span class="keyword">while</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n &amp; <span class="number">1</span>) (ans *= base) %= mod;</span><br><span class="line">        (base *= base) %= mod;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> p)</span> </span>&#123; <span class="keyword">return</span> qp(a, p - <span class="number">2</span>, p); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BSGS</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; hash;</span><br><span class="line">    b %= p;</span><br><span class="line">    <span class="keyword">int</span> t = (<span class="keyword">int</span>)<span class="built_in">sqrt</span>(p) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">0</span>; j &lt; t; j ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> val = <span class="number">1l</span>l * b * qp(a, j, p) % p;</span><br><span class="line">        hash[val] = j;</span><br><span class="line">    &#125;</span><br><span class="line">    a = qp(a, t, p);</span><br><span class="line">    <span class="keyword">if</span>(a == <span class="number">0</span>) <span class="keyword">return</span> b == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= t; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> val = qp(a, i, p);</span><br><span class="line">        <span class="keyword">int</span> j = hash.find(val) == hash.end() ? <span class="number">-1</span> : hash[val];</span><br><span class="line">        <span class="keyword">if</span>(j &gt;= <span class="number">0</span> &amp;&amp; i * t - j &gt;= <span class="number">0</span>) <span class="keyword">return</span> i * t - j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> _, p, a, b, x, t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;_);</span><br><span class="line">    <span class="keyword">while</span>(_ --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld%lld%lld"</span>, &amp;p, &amp;a, &amp;b, &amp;x, &amp;t);</span><br><span class="line">        <span class="keyword">if</span>(x == t) &#123; <span class="built_in">puts</span>(<span class="string">"1"</span>); <span class="keyword">continue</span>; &#125;</span><br><span class="line">        <span class="keyword">if</span>(a == <span class="number">0</span>) &#123; <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, t == b ? <span class="number">2</span> : <span class="number">-1</span>); <span class="keyword">continue</span>; &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a == <span class="number">1</span>) &#123;<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, b ? ((((t - x) % p + p) % p) * inv(b, p) % p + <span class="number">1</span>) : <span class="number">-1</span>); <span class="keyword">continue</span>; &#125;</span><br><span class="line">        <span class="keyword">int</span> tmp = b * inv(a - <span class="number">1</span>, p) % p;</span><br><span class="line">        <span class="keyword">int</span> y = (t + tmp) % p * inv((x + tmp) % p, p) % p * a % p;</span><br><span class="line">        <span class="keyword">int</span> ans = BSGS(a, y, p);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BSGS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「BZOJ-4568」[Scoi2016]幸运数字(倍增+线性基)</title>
      <link href="/2019/08/02/BZOJ-4568/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4568" target="_blank" rel="noopener">BZOJ4568-[Scoi2016]幸运数字</a><br>在树上路径(u,v)之间选择一些点的权值，使异或和最大</p></blockquote><a id="more"></a><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>对于树上的每一个点，维护log(n)个线性基，L[u][i]表示从它自身到它上跳$2^i$倍祖先的线性基，在对LCA做预处理的时候预处理出单个节点的倍增线性基。查询LCA时每次上跳都对答案插入当前节点上跳$2^i$倍的线性基，最后要单独插入点$a[v]$的值。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e4</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; edge[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, dep[maxn], fa[maxn][<span class="number">20</span>]; ll a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinearBasis</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ll d[<span class="number">64</span>], tot;</span><br><span class="line"></span><br><span class="line">    LinearBasis()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="keyword">sizeof</span> d);</span><br><span class="line">        tot = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">63</span>; i &gt;= <span class="number">0</span>; i --) <span class="keyword">if</span>((x &gt;&gt; i) &amp; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(d[i]) x ^= d[i];</span><br><span class="line">            <span class="keyword">else</span> &#123; d[i] = x; tot ++; <span class="keyword">return</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">ll <span class="title">max_xor</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">63</span>; i &gt;= <span class="number">0</span>; i --) <span class="keyword">if</span>((ans ^ d[i]) &gt; ans) ans ^= d[i];</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(LinearBasis &amp;a)</span> </span>&#123; <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">63</span>; i &gt;= <span class="number">0</span>; i --) <span class="keyword">if</span>(a.d[i]) ins(a.d[i]); &#125;</span><br><span class="line">&#125;L[maxn][<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="function">LinearBasis <span class="title">merge</span><span class="params">(<span class="keyword">const</span> LinearBasis &amp;a, <span class="keyword">const</span> LinearBasis &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LinearBasis res = a;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">63</span>; i &gt;= <span class="number">0</span>; i --) <span class="keyword">if</span>(b.d[i]) res.ins(b.d[i]);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dep[u] = dep[pre] + <span class="number">1</span>, fa[u][<span class="number">0</span>] = pre;</span><br><span class="line">    L[u][<span class="number">0</span>].ins(a[pre]); L[u][<span class="number">0</span>].ins(a[u]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; i) &lt;= n; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        fa[u][i] = fa[fa[u][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">        L[u][i].Merge(L[u][i - <span class="number">1</span>]);</span><br><span class="line">        L[u][i].Merge(L[fa[u][i - <span class="number">1</span>]][i - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; edge[u].size(); i ++) &#123;<span class="keyword">int</span> v = edge[u][i]; <span class="keyword">if</span>(v != pre) dfs(v, u); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LinearBasis <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinearBasis res;</span><br><span class="line">    <span class="keyword">if</span>(dep[u] &lt; dep[v]) swap(u, v);</span><br><span class="line">    <span class="keyword">int</span> d = dep[u] - dep[v];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; (<span class="number">1</span> &lt;&lt; i) &lt;= d; i ++) <span class="keyword">if</span>((<span class="number">1</span> &lt;&lt; i) &amp; d) res.Merge(L[u][i]), u = fa[u][i];</span><br><span class="line">    <span class="keyword">if</span>(u == v) &#123; res.ins(a[v]); <span class="keyword">return</span> res; &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">19</span>; i &gt;= <span class="number">0</span>; i --) <span class="keyword">if</span>(fa[u][i] != fa[v][i]) res.Merge(L[u][i]), res.Merge(L[v][i]), u = fa[u][i], v = fa[v][i];</span><br><span class="line">    res.Merge(L[u][<span class="number">0</span>]), res.ins(a[v]);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q, u, v;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">        edge[u].push_back(v);</span><br><span class="line">        edge[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span>(q --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">        LinearBasis ans = LCA(u, v);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans.max_xor());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LCA </tag>
            
            <tag> 线性基 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「HDU-6579」Operation (线性基)</title>
      <link href="/2019/07/22/HDU-6579/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6579" target="_blank" rel="noopener">「HDU-6579」Operation</a><br>贪心+线性基，在LR区间内取任意个元素，求最大异或和</p></blockquote><a id="more"></a><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个长度为n的序列，有如下两种操作：</p><ol><li>求L,R区间内任意个元素的最大异或和；</li><li>在序列末尾插入一个元素；</li></ol><p>本题强制在线。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>考虑对每个点维护一个线性基，插入操作为继承上一个点的线性基并插入当前点的值。</p><p>维护每个基底组成的点g[i]，考虑贪心，尽可能使组成线性基的点更靠近R。</p><p>对于某一位的点g[i]，如果pos&gt;g[i]，则把pos与g[i]交换，使pos成为线性基的基底。</p><p>对于每个询问，查询第R个线性基所有pos大于L的基底能组成的最大值。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getpos</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> lasans)</span> </span>&#123; <span class="keyword">return</span> (x ^ lasans) % n + <span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinearBasis</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> f[<span class="number">30</span>], g[<span class="number">30</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">29</span>; ~i; i --)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>((x &gt;&gt; i) &amp; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(f[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(g[i] &lt;= pos) &#123; x ^= f[i]; f[i] ^= x; swap(g[i], pos); &#125;</span><br><span class="line">                    <span class="keyword">else</span> x ^= f[i];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123; f[i] = x; g[i] = pos; <span class="keyword">break</span>; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">29</span>; ~i; i --) <span class="keyword">if</span>(g[i] &gt;= l) res = max(res, res ^ f[i]);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;base[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, q, op, l, r, x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;q);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">            base[i] = base[i - <span class="number">1</span>];</span><br><span class="line">            base[i].ins(x, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(q --)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;op);</span><br><span class="line">            <span class="keyword">if</span>(op == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</span><br><span class="line">                l = getpos(l, ans), r = getpos(r, ans);</span><br><span class="line">                <span class="keyword">if</span>(l &gt; r) swap(l, r);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans = base[r].query(l));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x); n ++;</span><br><span class="line">                base[n] = base[n - <span class="number">1</span>], base[n].ins(x ^ ans, n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性基 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「BZOJ-2242」[SDOI2011]计算器 (BSGS)</title>
      <link href="/2019/07/19/BZOJ-2242/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2242" target="_blank" rel="noopener">BZOJ2242 - [SDOI2011]计算器</a></p></blockquote><a id="more"></a><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定三个数$y,z,p$，进行如下三种操作：</p><p>1.计算Y^Z Mod P 的值<br>2.计算满足xy≡ Z ( mod P )的最小非负整数<br>3.计算满足Y^x ≡ Z ( mod P)的最小非负整数</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>虽然我确实在找板题，但这种纯板题为什么会出现在OI省选……</p><p><em>op1：快速幂</em></p><p><em>op2：exgcd</em></p><p><em>op3：BSGS</em></p><p>都套板子就vansˊ_&gt;ˋ </p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> n, <span class="keyword">int</span> mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">1</span>, base = a;</span><br><span class="line"><span class="keyword">while</span>(n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n &amp; <span class="number">1</span>) (ans *= base) %= mod;</span><br><span class="line">(base *= base) %= mod;</span><br><span class="line">n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b == <span class="number">0</span>) &#123; x = <span class="number">1</span>; y = <span class="number">0</span>; <span class="keyword">return</span>; &#125;</span><br><span class="line">    exgcd(b, a % b, x, y);</span><br><span class="line">    <span class="keyword">int</span> t = x; x = y, y = t - a / b * y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BSGS</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; hash;</span><br><span class="line">b %= p;</span><br><span class="line"><span class="keyword">int</span> t = (<span class="keyword">int</span>)<span class="built_in">sqrt</span>(p) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">0</span>; j &lt; t; j ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> val = <span class="number">1l</span>l * b * qp(a, j, p) % p;</span><br><span class="line">hash[val] = j;</span><br><span class="line">&#125;</span><br><span class="line">a = qp(a, t, p);</span><br><span class="line"><span class="keyword">if</span>(a == <span class="number">0</span>) <span class="keyword">return</span> b == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= t; i ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> val = qp(a, i, p);</span><br><span class="line"><span class="keyword">int</span> j = hash.find(val) == hash.end() ? <span class="number">-1</span> : hash[val];</span><br><span class="line"><span class="keyword">if</span>(j &gt;= <span class="number">0</span> &amp;&amp; i * t - j &gt;= <span class="number">0</span>) <span class="keyword">return</span> i * t - j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, k, y, z, p;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;t, &amp;k);</span><br><span class="line">    <span class="keyword">while</span>(t --)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;y, &amp;z, &amp;p);</span><br><span class="line">        <span class="keyword">if</span>(k == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, qp(y, z, p));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(k == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x, xx;</span><br><span class="line">            exgcd(y, p, x, xx);</span><br><span class="line">            x = <span class="number">1l</span>l * x * z % p;</span><br><span class="line">            <span class="keyword">if</span>(x) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (x % p + p) % p);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Orz, I cannot find x!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(k == <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> ans = BSGS(y, z, p);</span><br><span class="line">            <span class="keyword">if</span>(~ans) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"Orz, I cannot find x!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 扩展欧几里得算法 </tag>
            
            <tag> BSGS </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019牛客暑期多校训练营（第一场） - H XOR（线性基）</title>
      <link href="/2019/07/19/Nowcoder-Multi-University-2019-Round1-H/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="https://ac.nowcoder.com/acm/contest/881/H" target="_blank" rel="noopener">H-XOR</a><br>给定一个集合，求它异或和为0的子集的大小总和</p></blockquote><a id="more"></a><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定$n$个数${a_i}$，求它异或和为0的子集的大小总和。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>考虑求集合中的每个元素对答案的贡献。</p><p>设$a$中不在线性基中的集合$S(|S|=n-|B|)$，它的任意一个子集的异或和一定可以表示为线性基中若干个数的异或和。对于某个不在线性基中的元素$a_i$，包含它的集合$S$的子集数量为$2^{n-|B|-1}$个。</p><p>对于线性基中的某个二进制位$x$，如果有一个不在线性基内的数$a_j$满足<code>(1&lt;&lt;x)&amp;a[j]==1</code>，则表示原本为这一位基底的$a_i$可以被$a_j$替换，并构成一个新的线性基$B’$,此时视$a_i$为在线性基外的元素，其对答案的贡献为$2^{n-|B|-1}$。</p><p>最后的答案为$$ans=(n-|B|+cnt)×2^{n-|B|-1}$$，其中$cnt$表示线性基中能被替换的向量个数。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qp</span><span class="params">(ll a, ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;n ; (a *= a) %= mod, n &gt;&gt;= <span class="number">1</span>) <span class="keyword">if</span>(n &amp; <span class="number">1</span>) (ans *= a) %= mod;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll v;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinearBasis</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ll d[<span class="number">63</span>], o[<span class="number">63</span>];   <span class="comment">//原矩阵，对角矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i ++) d[i] = o[i] = <span class="number">0</span>;</span><br><span class="line">v = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ins</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll tmp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">62</span>; i &gt;= <span class="number">0</span>; i --)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>((x &gt;&gt; i) &amp; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!d[i]) d[i] = x, o[i] = tmp | (<span class="number">1l</span>l &lt;&lt; i), flag = <span class="literal">true</span>;</span><br><span class="line">x ^= d[i]; tmp ^= o[i];</span><br><span class="line"><span class="keyword">if</span>(!x) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flag) v |= tmp;</span><br><span class="line"><span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line">&#125;L;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        L.init();</span><br><span class="line">        ll x, ans = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;x);</span><br><span class="line">            <span class="keyword">if</span>(!L.ins(x)) ans ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">63</span>; i ++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(L.d[i]) cnt ++;</span><br><span class="line">            <span class="keyword">if</span>((<span class="number">1l</span>l &lt;&lt; i) &amp; v) ans ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans * qp(<span class="number">2</span>, n - cnt - <span class="number">1</span>) % mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性基 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「CodeForces-1195F」Geometers Anonymous Club(闵可夫斯基和)</title>
      <link href="/2019/07/18/Codeforces-1195F/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="https://codeforces.com/contest/1195/problem/F" target="_blank" rel="noopener">「CodeForces-1195F」Geometers Anonymous Club</a></p><p>给定n个凸包，求第l个到第r个凸包的Minkowski和</p></blockquote><a id="more"></a><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>求凸包之间的闵可夫斯基和：取出两个凸包的每一条向量，按照极角序排序构成新凸包即可。（相同斜率的向量需要去重）<br>求多个凸包的闵可夫斯基和的时候可以直接取所有凸包的向量，不同向量的个数就是求和之后凸包的点数。</p><p>所以原问题转化为，在第l到r个凸包的向量中，有多少个互不相同的向量。</p><p>考虑对向量按凸包从左到右依次编号，标记当前向量上一次出现的位置（如果是第一次出现则pre[i]=0）。离线处理答案，按向量编号从小到大顺序扫描向量集，对向量<code>i</code>上一次出现的位置<code>pre[i]</code>的出现次数计数，用树状数组维护。对于某一个询问Q的L和R，如果存在<code>L&lt;=i&lt;=r</code>且<code>L&lt;=pre[i]&lt;=r</code>，说明该向量在LR区间内重复出现。对于右端点为R的询问LR，它的答案为L到R的凸包的向量总数-LR区间内重复出现的向量个数。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span> + <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> x[maxn], y[maxn], tot = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> pre[maxn], pos[maxn], ans[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; query[maxn];</span><br><span class="line"><span class="keyword">int</span> data[maxn];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(i ++; i &lt; maxn; i += i &amp; -i) data[i] += y;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i ++; i; i -= i &amp; -i) res += data[i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="built_in">map</span>&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; , <span class="keyword">int</span>&gt; pre_idx;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        pos[i] = tot;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; j ++) <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x[j], &amp;y[j]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; j ++)</span><br><span class="line">        &#123;</span><br><span class="line">            pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; p(x[(j + <span class="number">1</span>) % k] - x[j], y[(j + <span class="number">1</span>) % k] - y[j]);</span><br><span class="line">            <span class="keyword">int</span> g = __gcd(<span class="built_in">abs</span>(p.first), <span class="built_in">abs</span>(p.second));</span><br><span class="line">            p.first /= g, p.second /= g;</span><br><span class="line">            pre[tot] = pre_idx[p];</span><br><span class="line">            pre_idx[p] = tot ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    pos[n] = tot ++;</span><br><span class="line">    <span class="keyword">int</span> q, l, r, x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;l, &amp;r);</span><br><span class="line">        ans[i] = pos[r] - pos[-- l];</span><br><span class="line">        query[pos[r]].push_back(&#123;pos[l], i&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> q : query[i])</span><br><span class="line">        &#123;</span><br><span class="line">            l = q.first, x = q.second;</span><br><span class="line">            ans[x] -= sum(i) - sum(l - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        add(pre[i], <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; q; i ++) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Geometry </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算几何 </tag>
            
            <tag> 闵可夫斯基和 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「HDU-6532」Chessboard (费用流)</title>
      <link href="/2019/05/29/HDU-6532/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6532" target="_blank" rel="noopener">「HDU-6532」Chessboard</a><br>离散化+二分图行列模型，求限制条件下放置棋子的最大总价值</p></blockquote><a id="more"></a><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个棋盘，可以在给定的位置放棋子，第i个棋子的价值为i。并给出若干个限制条件，要求在某列右侧/某行下方的棋子总数不超过$k_i$，求满足限制条件情况下放置棋子可以获得的最大价值。</p><p><em>XTU教练：这不就是个费用流吗.jpg(震声）</em></p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>二分图的行列模型，数据范围需要离散化。第0行为源点，第0列为汇点；第$i-1$行向第$i$行连边，流量为第$i$行的限制；第$i$列向第$i-1$列连边，流量为第$i$列的限制，并将每个点所在的行向其所在的列连边，流量为1，费用为$-i$，跑费用流即可。</p><p>需要注意建图的时候只离散化给定的点的行和列的点作为网络上的点，对于每一个限制条件lower_bound找到第一个大于等于它的点，并更新该点的限制，最后对于lim_R[i]和lim_C[i]建图。</p><p><del>其实我赛场上就嘴出解法了然后因为是嘴巴选手所以敲了1h没写出来</del></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span> <span class="keyword">int</span> from, to, cap, flow,cost; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Edge&gt; edges;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</span><br><span class="line">    <span class="keyword">bool</span> inq[maxn];</span><br><span class="line">    <span class="keyword">int</span> dis[maxn], path[maxn], a[maxn];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i ++) G[i].clear();</span><br><span class="line">        edges.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to, <span class="keyword">int</span> cap, <span class="keyword">int</span> cost)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        edges.push_back(Edge&#123;from, to, cap, <span class="number">0</span>, cost&#125;);</span><br><span class="line">        edges.push_back(Edge&#123;to, from, <span class="number">0</span>, <span class="number">0</span>, -cost&#125;);</span><br><span class="line">        m = edges.size();</span><br><span class="line">        G[from].push_back(m - <span class="number">2</span>);</span><br><span class="line">        G[to].push_back(m - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Bellman_Ford</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t, <span class="keyword">int</span> &amp;flow, <span class="keyword">int</span> &amp;cost)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i ++) dis[i] = inf;</span><br><span class="line">        <span class="built_in">memset</span>(inq, <span class="number">0</span>, <span class="keyword">sizeof</span> inq);</span><br><span class="line">        dis[s] = <span class="number">0</span>, inq[s] = <span class="literal">true</span>, path[s] = <span class="number">0</span>, a[s] = inf;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">        Q.push(s);</span><br><span class="line">        <span class="keyword">while</span>(!Q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u = Q.front(); Q.pop();</span><br><span class="line">            inq[u] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[u].size(); i ++)</span><br><span class="line">            &#123;</span><br><span class="line">                Edge&amp; e = edges[G[u][i]];</span><br><span class="line">                <span class="keyword">if</span>(e.cap &gt; e.flow &amp;&amp; dis[e.to] &gt; dis[u] + e.cost)</span><br><span class="line">                &#123;</span><br><span class="line">                    dis[e.to] = dis[u] + e.cost;</span><br><span class="line">                    path[e.to] = G[u][i];</span><br><span class="line">                    a[e.to] = min(a[u], e.cap - e.flow);</span><br><span class="line">                    <span class="keyword">if</span>(!inq[e.to])</span><br><span class="line">                    &#123;</span><br><span class="line">                        Q.push(e.to);</span><br><span class="line">                        inq[e.to] = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dis[t] == inf) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        flow += a[t];</span><br><span class="line">        cost += dis[t] * a[t];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> u = t; u != s; u = edges[path[u]].from)</span><br><span class="line">        &#123;</span><br><span class="line">            edges[path[u]].flow += a[t];</span><br><span class="line">            edges[path[u] ^ <span class="number">1</span>].flow -= a[t];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">mincostMaxFlow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cost = <span class="number">0</span>, flow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(Bellman_Ford(s, t, flow, cost));</span><br><span class="line">        <span class="keyword">return</span> cost;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> LR[maxn], LC[maxn];</span><br><span class="line"><span class="keyword">int</span> mp[<span class="number">510</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; posR, posC;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, pos, k;</span><br><span class="line">    <span class="keyword">char</span> op[<span class="number">5</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;mp[i][<span class="number">0</span>], &amp;mp[i][<span class="number">1</span>]);</span><br><span class="line">        posR.push_back(mp[i][<span class="number">0</span>]);</span><br><span class="line">        posC.push_back(mp[i][<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    posR.push_back(<span class="number">0</span>);</span><br><span class="line">    posC.push_back(<span class="number">0</span>);</span><br><span class="line">    sort(posR.begin(), posR.end());</span><br><span class="line">    sort(posC.begin(), posC.end());</span><br><span class="line">    posR.erase(unique(posR.begin(), posR.end()), posR.end());</span><br><span class="line">    posC.erase(unique(posC.begin(), posC.end()), posC.end());</span><br><span class="line">    <span class="built_in">memset</span>(LR, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> LR);</span><br><span class="line">    <span class="built_in">memset</span>(LC, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> LC);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s%d%d"</span>, op, &amp;pos, &amp;k);</span><br><span class="line">        <span class="keyword">if</span>(op[<span class="number">0</span>] == <span class="string">'R'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            pos = lower_bound(posR.begin(), posR.end(), pos) - posR.begin();</span><br><span class="line">            LR[pos] = min(LR[pos], k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op[<span class="number">0</span>] == <span class="string">'C'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            pos = lower_bound(posC.begin(), posC.end(), pos) - posC.begin();</span><br><span class="line">            LC[pos] = min(LC[pos], k);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> S = <span class="number">0</span>, T = posR.size();</span><br><span class="line">    ans.init(posR.size() + posC.size());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; posR.size(); i ++) ans.addEdge(i - <span class="number">1</span>, i, LR[i], <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; posC.size(); i ++) ans.addEdge(i + posR.size(), i + posR.size() - <span class="number">1</span>, LC[i], <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x = lower_bound(posR.begin(), posR.end(), mp[i][<span class="number">0</span>]) - posR.begin(),</span><br><span class="line">            y = lower_bound(posC.begin(), posC.end(), mp[i][<span class="number">1</span>]) - posC.begin() + posR.size();</span><br><span class="line">        ans.addEdge(x, y, <span class="number">1</span>, - i - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, -ans.mincostMaxFlow(S, T));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Graph </category>
          
          <category> Network Flow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 费用流 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「HDU-6285」Vertex Cover (计数)</title>
      <link href="/2019/05/09/HDU-6285/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6285" target="_blank" rel="noopener">「HDU-6285」Vertex Cover</a></p></blockquote><a id="more"></a><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个$n$个点的完全图，第$i$个点的点权为$2^{i-1}$。给定一个边集，对于一个点集，要求边集中的每一条边至少有一个端点在点集中，并保证点集的权值和最小。现在给一个点集，问有多少种满足条件的边集。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>我们令在点集中的点为关键点，不在点集中的点为非关键点，满足条件的边集中的<strong>关键点</strong>$u$连接情况满足以下条件：</p><p>​    在编号大于$u$的点中，至少有一个<strong>非关键点</strong>与$u$相连。</p><p>简单证明一下这个条件。</p><p>考虑反证法，假设与关键点$u$相连的点编号全部小于$u$，由于点权编码的性质，$10000&gt;01111$，此时即使将所有比它小的关键点选中，权值和仍然小于选择$u$的花费，所以这时$u$不可能是关键点。因此，必然至少有一个大于$u$的点$v$与$u$相连。</p><p>为什么点$v$至少需要有一个非关键点。同样考虑反证法，假设与$u$相连的点集$v$全为关键点，那么以$u$为端点的边已经全部被选取，为了使点权和最小化，这时候不需要选取$u$，因此这种情况下$u$不是关键点。</p><p>此时可以推出在编号大于$u$的点中，至少有一个<strong>非关键点</strong>与$u$相连。</p><p>满足这个条件的连边方式可以保证所给的点集是权值和最小的取点方案。在满足该条件后，关键点可以向其余点任意连边，因为从关键点出发的边已经被覆盖，且选取其它点的权值和必然大于选择该点。为了避免重复计数，对于关键点$u$，我们只向小于$u$的点统计连边方案。</p><p>因此对于每个关键点，连边满足以下条件：</p><ol><li>在编号大于$u$的点中，至少有一个<strong>非关键点</strong>与$u​$相连；</li><li>在满足条件1的情况下，对于编号小于$u​$的点，可以有任意个点与点$u​$相连；</li></ol><p>最后的式子为$$\prod_{i\in{set}}2^{i-1}·(2^{cnt({v&gt;i}\bigcap{v\notin{set}})}-1)​$$</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>嘴巴选手写什么代码我有空再补咕咕咕</p>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Counting </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计数原理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「HDU-6059」Kanade&#39;s trio (Trie树)</title>
      <link href="/2019/04/20/HDU-6059/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6059" target="_blank" rel="noopener">「HDU-6059」Kanade’s trio </a><br>给定一个序列，求序列中满足i&lt;j&lt;k且(A[i] xor A[j])&lt;(A[j] xor A[k])的三元组的数量</p></blockquote><a id="more"></a><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个长度为$n(∑n≤5∗10^5)$的序列，求序列中满足$i&lt;j&lt;k$且$(A[i]\ xor\ A[j])&lt;(A[j]\ xor\ A[k])$的三元组的数量，其中$0≤A[i]&lt;2^{30}$.</p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>对于每个数进行二进制拆分，依次插入字典树处理。</p><p>首先考虑两个数$A[i],A[k]$，其二进制位前若干位相等，第$p$位不同。此时若要选取满足条件的数$A[j]$，则$A[j]$的前$p-1$位取任意值都不影响结果，而对于第$p$位，要使$(A[i]\ xor\ A[j])&lt;(A[j]\ xor\ A[k])$，有如下两种情况：</p><ul><li>$A[i]_p=1, A[k]_p=0​$，此时$A[j]_p​$取值为$1​$</li><li>$A[i]_p=0, A[k]_p=1$，此时$A[j]_p$取值为$0$</li></ul><p>即$A[j]_p$的取值为$A[j]_p=A[i]_p$</p><p>具体到插入字典树的过程中，对于$A[k]$插入过程中的每一位，判断是否存在二进制位为$!A[k]_p$的字典树节点$pos=trie[now][!A[k]_p]$，如果有，在计数过程中考虑如下两种情况：</p><ol><li><p>$i,j$均为结点$pos$子树下的节点：</p><p>此时方案数为$C\binom{2}{sz[pos]} = sz[pos]×(sz[pos]-1)/2$，其中$sz[pos]$表示结点$pos$的子树大小，该选取方案可以保证$i,j$有序；</p></li><li><p>$i$为结点$pos$子树下的节点，$j$为不在结点$pos$下，且第$p$位二进制数与$i$相同的节点：</p><p>利用数组$cnt[p][2]​$统计第$p​$个二进制位上为0/1的数的数量，当前方案数即为$(cnt[p][!A[k]_p]-sz[pos])×sz[pos]​$，但注意这种计数方案没有保证$i&gt;j​$的方案数；</p><p>我们考虑一个数$A[i]$，在当前位$p$插入字典树时，有$cnt[p][A[i]_p]-sz[pos]$个数在选取时满足$j&lt;i$的情况，对该值求和即为在统计该节点$pos$时需要减去的方案数。</p><p>故第二种情况的方案数为$(cnt[p][!A[k]_p]-sz[pos])×sz[pos]-sum[pos]$，其中$sum$为$pos$位插入过程中$cnt[p][A[i]_p]-sz[pos]$的和；</p></li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">31</span> *(<span class="number">5e5</span> + <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> trie[maxn][<span class="number">2</span>], tot;</span><br><span class="line"><span class="keyword">int</span> sz[maxn], ext[maxn];</span><br><span class="line"><span class="keyword">int</span> cnt[<span class="number">31</span>][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">ll ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(trie, <span class="number">0</span>, <span class="keyword">sizeof</span> trie);</span><br><span class="line">    <span class="built_in">memset</span>(sz, <span class="number">0</span>, <span class="keyword">sizeof</span> sz);</span><br><span class="line">    <span class="built_in">memset</span>(ext, <span class="number">0</span>, <span class="keyword">sizeof</span> ext);</span><br><span class="line">    <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span> cnt);</span><br><span class="line">    ans = tot = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_ch</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> root = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">29</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> id = (x &gt;&gt; i) &amp; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(!trie[root][id]) trie[root][id] = ++tot;</span><br><span class="line">        cnt[i][id]++;</span><br><span class="line">        <span class="keyword">if</span>(trie[root][id ^ <span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> now = trie[root][id ^ <span class="number">1</span>];</span><br><span class="line">            ans += <span class="number">1l</span>l * sz[now] * (sz[now] - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">            ans += <span class="number">1l</span>l * (cnt[i][<span class="number">1</span> ^ id] - sz[now]) * sz[now] - ext[now];</span><br><span class="line">        &#125;</span><br><span class="line">        root = trie[root][id];</span><br><span class="line">        sz[root]++;</span><br><span class="line">        ext[root] += cnt[i][id] - sz[root];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, n, x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">            insert_ch(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> String </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Trie树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「BZOJ-4774」修路 (斯坦纳树)</title>
      <link href="/2019/04/17/BZOJ-4774/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=4774" target="_blank" rel="noopener">BZOJ4774-修路</a><br>在图上选中一些边，使给定的点对能通过选中的边连通，最小化选中的边的权值和</p></blockquote><a id="more"></a><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><h3 id="斯坦纳树"><a href="#斯坦纳树" class="headerlink" title="斯坦纳树"></a>斯坦纳树</h3><p>将指定点集合中的所有点连通，且边权总和最小的生成树称为最小斯坦纳树（Minimal Steiner Tree）。</p><p>斯坦纳树可以通过dp求解，转移方程有两种：</p><ol><li>枚举子树形态 $dp[S][i] = min(dp[s]+dp[S \ xor \  s])$</li><li>按照边进行松弛 $dp[S][i] = min(dp[S][j]+w[j][i])$</li></ol><p>其中$S$为选取的子集，$s$ 和$S\ xor\ s$为$S$的状态划分。第二类转移方程可以通过跑一次最短路进行松弛。</p><p>本题需要再做一次子集dp，因为不成对的点可能不连通。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[maxn], cnt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span><span class="keyword">int</span> nex, to, w; &#125;edge[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[cnt].nex = head[u];</span><br><span class="line">    edge[cnt].to = v;</span><br><span class="line">    edge[cnt].w = w;</span><br><span class="line">    head[u] = cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[<span class="number">1</span>&lt;&lt;<span class="number">10</span>][maxn], ans[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">bool</span> in[maxn];</span><br><span class="line"></span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!que.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = que.front(); que.pop();</span><br><span class="line">        in[u] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = head[u]; ~i; i = edge[i].nex)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">            <span class="keyword">if</span>(f[S][v] &gt; f[S][u] + edge[i].w)</span><br><span class="line">            &#123;</span><br><span class="line">                f[S][v] = f[S][u] + edge[i].w;</span><br><span class="line">                <span class="keyword">if</span>(!in[v]) que.push(v), in[v] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Steiner_Tree</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= d; i++)</span><br><span class="line">        f[<span class="number">1</span> &lt;&lt; (i - <span class="number">1</span>)][i] = f[<span class="number">1</span> &lt;&lt; (d + i - <span class="number">1</span>)][n - i + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> lim = <span class="number">1</span>&lt;&lt;(d&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">1</span>; S &lt; lim; S++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> s = (S - <span class="number">1</span>) &amp; S; s; s = (s - <span class="number">1</span>) &amp; S)</span><br><span class="line">                f[S][i] = min(f[S][i], f[s][i] + f[S ^ s][i]);</span><br><span class="line">            <span class="keyword">if</span>(f[S][i] != inf) que.push(i), in[i] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        spfa(S);</span><br><span class="line">    &#125;</span><br><span class="line">    lim = <span class="number">1</span>&lt;&lt;d;</span><br><span class="line">    <span class="built_in">memset</span>(ans, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> ans);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">1</span>; S &lt; lim; S++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            ans[S] = min(ans[S], f[S^(S&lt;&lt;d)][i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">1</span>; S &lt; lim; S++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> s = (S - <span class="number">1</span>) &amp; S; s; s = (s - <span class="number">1</span>) &amp; S)</span><br><span class="line">            ans[S] = min(ans[S], ans[s] + ans[S ^ s]);</span><br><span class="line">    <span class="keyword">return</span> ans[lim - <span class="number">1</span>] == inf ? <span class="number">-1</span> : ans[lim - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, d, u, v, w;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;d);</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">0xff</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;u, &amp;v, &amp;w);</span><br><span class="line">        add(u, v, w);</span><br><span class="line">        add(v, u, w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Steiner_Tree(n, d));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Graph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 斯坦纳树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「HDU-2121」Ice_cream’s world II(不定根最小树形图)</title>
      <link href="/2019/03/27/HDU-2121/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2121" target="_blank" rel="noopener">「HDU-2121」Ice_cream’s world II</a><br>朱刘算法，不定根最小树形图</p></blockquote><a id="more"></a><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个有向图，选择一个点使其能到达其他所有点，并使花费最小，输出最小花费。如果有多个这样的点，输出编号小的点。如果没有这样的点，输出impossible.</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>不定根最小生成树模板题。</p><p>设定一个虚根并向所有结点连边，边权为图上所有边的边权之和$sum+1$，以虚根为$root$跑一遍朱刘算法。</p><p>如果求出的边权之和$res&gt;=2*sum$，说明至少有两个结点是从虚根出发到达的点，即原图不连通。</p><p>原图连通的状态下，只有一个点是从虚根出发到达的点。在跑最小树形图时记录从虚根出发到达的点，即为原图的根。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF = <span class="number">1e17</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1000</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span> <span class="keyword">int</span> u, v; <span class="keyword">long</span> <span class="keyword">long</span> cost; &#125; edge[maxn * maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pre[maxn], vis[maxn], id[maxn], pos;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> in[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">zhuliu</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> u, v;</span><br><span class="line">    <span class="keyword">for</span> (;;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) in[i] = INF;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">            <span class="keyword">if</span> (edge[i].u != edge[i].v &amp;&amp; edge[i].cost &lt; in[edge[i].v])</span><br><span class="line">            &#123;</span><br><span class="line">                pre[edge[i].v] = edge[i].u;</span><br><span class="line">                in[edge[i].v] = edge[i].cost;</span><br><span class="line">                <span class="keyword">if</span> (edge[i].u == root) pos = i;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">if</span> (i != root &amp;&amp; in[i] == INF) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> tn = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(id, <span class="number">0xff</span>, <span class="keyword">sizeof</span> id);</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0xff</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">        in[root] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            res += in[i];</span><br><span class="line">            v = i;</span><br><span class="line">            <span class="keyword">while</span> (vis[v] != i &amp;&amp; id[v] == <span class="number">-1</span> &amp;&amp; v != root) vis[v] = i, v = pre[v];</span><br><span class="line">            <span class="keyword">if</span> (v != root &amp;&amp; id[v] == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> u = pre[v]; u != v; u = pre[u]) id[u] = tn;</span><br><span class="line">                id[v] = tn++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tn == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">if</span> (id[i] == <span class="number">-1</span>) id[i] = tn++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            v = edge[i].v;</span><br><span class="line">            edge[i].u = id[edge[i].u];</span><br><span class="line">            edge[i].v = id[edge[i].v];</span><br><span class="line">            edge[i].cost -= in[v];</span><br><span class="line">        &#125;</span><br><span class="line">        n = tn;</span><br><span class="line">        root = id[root];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m) != EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%lld"</span>, &amp;edge[i].u, &amp;edge[i].v, &amp;edge[i].cost);</span><br><span class="line">            edge[i].u++;</span><br><span class="line">            edge[i].v++;</span><br><span class="line">            sum += edge[i].cost;</span><br><span class="line">        &#125;</span><br><span class="line">        sum++;</span><br><span class="line">        <span class="keyword">int</span> root = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = m; i &lt; m + n; i++)</span><br><span class="line">            edge[i].u = root, edge[i].v = i - m + <span class="number">1</span>, edge[i].cost = sum;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> res = zhuliu(root, n + <span class="number">1</span>, m + n);</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="number">-1</span> || res - sum &gt;= sum) <span class="built_in">printf</span>(<span class="string">"impossible\n\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld %d\n\n"</span>, res - sum, pos - m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Graph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最小树形图 </tag>
            
            <tag> 朱刘算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「HDU-6141」I am your Father!(最小树形图)</title>
      <link href="/2019/03/27/HDU-6141/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6141" target="_blank" rel="noopener">「HDU-6141」I am your Father! </a><br>求最大树形图，并最小化点n​父亲结点的编号</p></blockquote><a id="more"></a><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个有向图，求出以1为根的最大树形图，如果有多个，则使$n$结点的父亲节点编号最小。输出边权和$W$和点$n$的父亲节点。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>对于$W$，可以直接对边权取负，跑一遍朱刘算法。</p><p>为使点$n$的父亲节点编号最小，需要对连向点$n$的边进行加权操作，并且需要保证加权后的权值不会影响原图。</p><p>对于原图上的边，对边权*1000，而加权操作加上的权值为起始点$u$的编号(不超过1000)，即可保证在不影响原结果的情况下，求出父节点编号最小的解。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm=<span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> u,v,cost; &#125; edge[maxm];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pre[maxn], id[maxn], vis[maxn], in[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">zhuliu</span><span class="params">(<span class="keyword">int</span> root, <span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>, u, v;</span><br><span class="line"><span class="keyword">for</span>(;;)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) in[i] = INF;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++) <span class="keyword">if</span>(edge[i].u != edge[i].v &amp;&amp; edge[i].cost &lt; in[edge[i].v])</span><br><span class="line">&#123;</span><br><span class="line">pre[edge[i].v] = edge[i].u;</span><br><span class="line">in[edge[i].v] = edge[i].cost;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) <span class="keyword">if</span>(i != root &amp;&amp; in[i] ==INF) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> tn=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(id, <span class="number">0xff</span>, <span class="keyword">sizeof</span> id);</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0xff</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">in[root] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">res += in[i];</span><br><span class="line">v = i;</span><br><span class="line"><span class="keyword">while</span>( vis[v] != i &amp;&amp; id[v] == <span class="number">-1</span> &amp;&amp; v!= root) vis[v] = i, v = pre[v];</span><br><span class="line"><span class="keyword">if</span>(v != root &amp;&amp; id[v] == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> u = pre[v]; u != v; u = pre[u]) id[u] = tn;</span><br><span class="line">id[v] = tn++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tn == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) <span class="keyword">if</span>(id[i] == <span class="number">-1</span>) id[i] = tn++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m;)</span><br><span class="line">&#123;</span><br><span class="line">v = edge[i].v;</span><br><span class="line">edge[i].u = id[edge[i].u];</span><br><span class="line">edge[i].v = id[edge[i].v];</span><br><span class="line"><span class="keyword">if</span>(edge[i].u != edge[i].v) edge[i++].cost -= in[v];</span><br><span class="line"><span class="keyword">else</span> swap(edge[i], edge[--m]);</span><br><span class="line">&#125;</span><br><span class="line">n = tn;</span><br><span class="line">root = id[root];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t, n, m, u, v, w;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n, &amp;m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;edge[i].u, &amp;edge[i].v, &amp;edge[i].cost);</span><br><span class="line">            edge[i].u--;</span><br><span class="line">            edge[i].v--;</span><br><span class="line">            edge[i].cost = -edge[i].cost * <span class="number">1000</span>;</span><br><span class="line">            <span class="keyword">if</span>(edge[i].v == n - <span class="number">1</span>) edge[i].cost += edge[i].u;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res = -zhuliu(<span class="number">0</span>, n, m);</span><br><span class="line">        <span class="keyword">int</span> ans = (res + <span class="number">999</span>) / <span class="number">1000</span>, pos = ans * <span class="number">1000</span> - res;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, ans, pos + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Graph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最小树形图 </tag>
            
            <tag> 朱刘算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「POJ-3417」Network (LCA+树上差分)</title>
      <link href="/2019/03/22/POJ-3417/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://poj.org/problem?id=3417" target="_blank" rel="noopener">「POJ-3417」Network </a><br>LCA+树上差分，给定一棵树和一些附加边，在其中各删一条使树不连通，求可行的方案数。</p></blockquote><a id="more"></a><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一棵树和一些附加边，要求在原始边和附加边中各选一条删除，从而使树被分割为至少两个联通块，求可行的方案数。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>对于每个给出的附加边求LCA，树上差分，标记其所在的环上的所有边的经过次数。</p><p>对于树上每条边的经过次数：</p><ol><li><p>$cnt[i]=0:$ 不属于任何环，此时只要删除该边和任意一条附加边即可，方案数$+m;$</p></li><li><p>$cnt[i]=1:$ 只属于一个环，删除该边和属于该环的附加边为可行解，方案数$+1;$</p></li><li><p>$cnt[i]&gt;1:$该边属于多个环，需要删除该边和所在所有边上的附加环才可分割该图，删该树边不存在可行解。</p></li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span><span class="keyword">int</span> nex,to; &#125;edge[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,head[maxn],dep[maxn],fa[maxn][<span class="number">30</span>],cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[++cnt].nex=head[u];</span><br><span class="line">    edge[cnt].to=v;</span><br><span class="line">    head[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dep[u]=dep[pre]+<span class="number">1</span>;</span><br><span class="line">    fa[u][<span class="number">0</span>]=pre;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;i)&lt;=n;i++) fa[u][i]=fa[fa[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=edge[i].nex) <span class="keyword">if</span>(edge[i].to!=pre) dfs(edge[i].to,u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dep[u]&lt;dep[v]) swap(u,v);</span><br><span class="line">    <span class="keyword">int</span> d=dep[u]-dep[v];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;(<span class="number">1</span>&lt;&lt;i)&lt;=d;i++) <span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;i)&amp;d) u=fa[u][i];</span><br><span class="line">    <span class="keyword">if</span>(u==v) <span class="keyword">return</span> u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">20</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(fa[u][i]!=fa[v][i])</span><br><span class="line">        &#123;</span><br><span class="line">            u=fa[u][i];</span><br><span class="line">            v=fa[v][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sta[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=edge[i].nex) <span class="keyword">if</span>(edge[i].to!=pre) sta[u]+=dfs1(edge[i].to,u);</span><br><span class="line">    <span class="keyword">return</span> sta[u];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,u,v;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">        add(u,v); add(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">        <span class="keyword">int</span> root=LCA(u,v);</span><br><span class="line">        sta[u]++; sta[v]++;</span><br><span class="line">        sta[root]-=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs1(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(sta[i]==<span class="number">0</span>) ans+=m;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(sta[i]==<span class="number">1</span>) ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LCA </tag>
            
            <tag> 树上差分 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「BZOJ-3940&amp;3942」Censoring (字符串)</title>
      <link href="/2019/03/20/BZOJ-3940-3942/"/>
      <content type="html"><![CDATA[<blockquote><p>给定一个字符串S，给定一个模式串/n个模式串，从前往后寻找，一旦找到模式串，删除该模式串并继续从头寻找。重复这一过程，直到S中不存在模式串，输出最后的S。</p></blockquote><a id="more"></a><p>好了这是Usaco月赛里面题意和做法都非常相似的两个题，分别是KMP和AC自动机的应用。</p><h1 id="Sliver"><a href="#Sliver" class="headerlink" title="Sliver"></a>Sliver</h1><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3942" target="_blank" rel="noopener">BZOJ3942 - [Usaco2015 Feb]Censoring</a></p><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给出两个字符串 $S$ 和 $T$，每次从前往后找到$S$ 的一个子串 $A=T$并将其删除，空缺位依次向前补齐，重复上述操作多次，直到串$S$中不含 $T$串。输出最终的$S$串。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>用栈维护给定的$S$串，对$s$依次入栈并求当前位的$next$数组，如果匹配到$T$，将长度为$len(T)$的字符出栈。对于每个入栈元素，取当前栈顶元素即可求出当前元素的$next$数组指向位置，直到$S$全部入栈。输出栈内元素即为答案。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> a[maxn], b[maxn], st[maxn];</span><br><span class="line"><span class="keyword">int</span> nex[maxn], p[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(b), i = <span class="number">0</span>, j = <span class="number">-1</span>;</span><br><span class="line">    nex[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j != <span class="number">-1</span> &amp;&amp; b[i] != b[j + <span class="number">1</span>]) j = nex[j];</span><br><span class="line">        <span class="keyword">if</span> (b[i] == b[j + <span class="number">1</span>])</span><br><span class="line">            j++;</span><br><span class="line">        nex[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KMP</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="built_in">strlen</span>(a), m = <span class="built_in">strlen</span>(b);</span><br><span class="line">    getNext();</span><br><span class="line">    <span class="keyword">int</span> top = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> j = p[top];</span><br><span class="line">        st[++top] = a[i];</span><br><span class="line">        <span class="keyword">while</span> (j != <span class="number">-1</span> &amp;&amp; b[j + <span class="number">1</span>] != st[top]) j = nex[j];</span><br><span class="line">        <span class="keyword">if</span> (b[j + <span class="number">1</span>] == st[top])</span><br><span class="line">            j++;</span><br><span class="line">        p[top] = j;</span><br><span class="line">        <span class="keyword">if</span> (p[top] + <span class="number">1</span> == m)</span><br><span class="line">            top -= m;</span><br><span class="line">    &#125;</span><br><span class="line">    st[top + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">puts</span>(st + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s%s"</span>, a, b);</span><br><span class="line">    KMP();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Gold"><a href="#Gold" class="headerlink" title="Gold"></a>Gold</h1><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3940" target="_blank" rel="noopener">BZOJ3940 - [Usaco2015 Feb]Censoring</a></p><h2 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h2><p>给定一个串$S$和$n$个屏蔽词$T_n$，对于串$S$，每次从前往后检查并删除最先出现的屏蔽词，重复该操作直到$S$中没有列表内的单词为止。完成这些操作并输出最后的$S$。</p><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>同样由栈维护母串$S$，并记录栈中每个字符在Trie树上的位置，如果遇到关键串，将该串推出栈中，每次入栈前取当前栈顶字符在Trie树上的位置即可求出当前串的位置。</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[maxn], t[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ACAutomation</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> trie[maxn][<span class="number">26</span>], cnt;</span><br><span class="line">    <span class="keyword">int</span> tag[maxn];</span><br><span class="line">    <span class="keyword">int</span> fail[maxn];</span><br><span class="line">    <span class="keyword">int</span> st[maxn], pos[maxn], cur;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> *s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> root = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; s[i]; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> id = s[i] - <span class="string">'a'</span>;</span><br><span class="line">            <span class="keyword">if</span> (!trie[root][id])</span><br><span class="line">                trie[root][id] = ++cnt;</span><br><span class="line">            root = trie[root][id];</span><br><span class="line">        &#125;</span><br><span class="line">        tag[root] = <span class="built_in">strlen</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">            <span class="keyword">if</span> (trie[<span class="number">0</span>][i])</span><br><span class="line">                que.push(trie[<span class="number">0</span>][i]);</span><br><span class="line">        <span class="keyword">while</span> (!que.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> k = que.front();</span><br><span class="line">            que.pop();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (trie[k][i]) &#123;</span><br><span class="line">                    fail[trie[k][i]] = trie[fail[k]][i];</span><br><span class="line">                    que.push(trie[k][i]);</span><br><span class="line">                &#125; <span class="keyword">else</span></span><br><span class="line">                    trie[k][i] = trie[fail[k]][i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> root = <span class="number">0</span>;</span><br><span class="line">        pos[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; t[i]; i++) &#123;</span><br><span class="line">            root = trie[pos[cur]][t[i] - <span class="string">'a'</span>];</span><br><span class="line">            st[++cur] = t[i] - <span class="string">'a'</span>;</span><br><span class="line">            pos[cur] = root;</span><br><span class="line">            <span class="keyword">if</span> (tag[root]) &#123;</span><br><span class="line">                cur -= tag[root];</span><br><span class="line">                root = pos[cur];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cur; i++) <span class="built_in">printf</span>(<span class="string">"%c"</span>, st[i] + <span class="string">'a'</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; AC;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, t);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">        AC.insert(s);</span><br><span class="line">    &#125;</span><br><span class="line">    AC.build();</span><br><span class="line">    AC.query();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> String </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KMP </tag>
            
            <tag> AC自动机 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「BZOJ-2115」[Wc2011] Xor (线性基)</title>
      <link href="/2019/01/18/BZOJ-2115/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=2115" target="_blank" rel="noopener">BZOJ3732-[Wc2011] Xor</a><br>给定一个无向图，求节点1到结点N的XOR和最大路径，一条边可以重复经过多次。</p></blockquote><a id="more"></a><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>由于路径可以重复经过，对于图上的任意一个环，可以选择取或不取该环的值，而对于点1-n的路径异或和最大值，可以视为某一条1-n的路径，异或上若干个环的路径长度的最大值。</p><p>预处理求出图上所有环的异或和，并任取一条1-n的路径异或和，对这些值求线性基，即可求出最大值。</p><p>为什么1-n的路径可以任取：假设1-n有大于一条路径，其中另一条路径与所有环异或能取得更优解，那么此时可视为有一个经过1和n的环，故直接将该环与原所取路径异或即可取得最大值。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[maxn],cnt=<span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span><span class="keyword">int</span> nex,to; ll w; &#125;edge[<span class="number">20</span>*maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,ll w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[cnt].nex=head[u];</span><br><span class="line">    edge[cnt].to=v;</span><br><span class="line">    edge[cnt].w=w;</span><br><span class="line">    head[u]=cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,ll w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    add_edge(u,v,w);</span><br><span class="line">    add_edge(v,u,w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll _xor[maxn],a[<span class="number">5</span>*maxn],tot=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];~i;i=edge[i].nex)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=edge[i].to;</span><br><span class="line">        <span class="keyword">if</span>(!vis[v])</span><br><span class="line">        &#123;</span><br><span class="line">            _xor[v]=_xor[u]^edge[i].w;</span><br><span class="line">            vis[v]=<span class="literal">true</span>;</span><br><span class="line">            dfs(v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            a[tot++]=_xor[u]^_xor[v]^edge[i].w;</span><br><span class="line">            <span class="keyword">if</span>(!a[tot<span class="number">-1</span>]) tot--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll b[<span class="number">70</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(b,<span class="number">0</span>,<span class="keyword">sizeof</span> b);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tot;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">63</span>;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&gt;&gt;j&amp;<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(b[j]) a[i]^=b[j];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    b[j]=a[i];</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k=j<span class="number">-1</span>;k&gt;=<span class="number">0</span>;k--) <span class="keyword">if</span>(b[k]&amp;&amp;(b[j]&gt;&gt;k&amp;<span class="number">1</span>)) b[j]^=b[k];</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k=j+<span class="number">1</span>;k&lt;=<span class="number">63</span>;k++) <span class="keyword">if</span>(b[k]&gt;&gt;j&amp;<span class="number">1</span>) b[k]^=b[j];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,u,v;</span><br><span class="line">    ll w;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="built_in">memset</span>(head,<span class="number">0xff</span>,<span class="keyword">sizeof</span> head);</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%lld"</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">        add(u,v,w);</span><br><span class="line">    &#125;</span><br><span class="line">    _xor[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    cal();</span><br><span class="line">    ll ans=_xor[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">63</span>;i&gt;=<span class="number">0</span>;i--) <span class="keyword">if</span>(ans&lt;(ans^b[i])) ans^=b[i];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性基 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Codeforces Round 525 (Div. 2)</title>
      <link href="/2018/12/26/Codeforces%20Round%20525%20(Div.%202)/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://codeforces.com/contest/1088" target="_blank" rel="noopener">Codeforces Round #525 (Div. 2) </a></p></blockquote><a id="more"></a><h1 id="A-Ehab-and-another-construction-problem"><a href="#A-Ehab-and-another-construction-problem" class="headerlink" title="A. Ehab and another construction problem"></a>A. Ehab and another construction problem</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,x,x);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-Ehab-and-subtraction"><a href="#B-Ehab-and-subtraction" class="headerlink" title="B. Ehab and subtraction"></a>B. Ehab and subtraction</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    sort(a,a+n);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> tmp=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;n&amp;&amp;cnt&lt;k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a[i]-tmp);</span><br><span class="line">        tmp=a[i];</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="keyword">while</span>(i&lt;n&amp;&amp;a[i]==tmp) i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(cnt&lt;k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line">        cnt++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Ehab-and-a-2-operation-task"><a href="#C-Ehab-and-a-2-operation-task" class="headerlink" title="C. Ehab and a 2-operation task"></a>C. Ehab and a 2-operation task</h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个长度为$n$的序列，有如下两种操作：</p><ul><li><p>将序列中的前$i$个数加上$x$</p></li><li><p>将序列中的前$i$个数模$x$</p></li></ul><p>要求使用不多于$n+1$次操作，使该序列变为<strong>严格递增</strong>。</p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>构造一个模$n+1$答案为1,2,3……n的序列即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e4</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> a[maxn];</span><br><span class="line">    <span class="keyword">int</span> x[maxn];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp=(a[i]+sum)%(n+<span class="number">1</span>);</span><br><span class="line">        x[i]=i-tmp;</span><br><span class="line">        <span class="keyword">if</span>(x[i]&lt;<span class="number">0</span>) x[i]+=n+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(x[i]) cnt++;</span><br><span class="line">        sum+=x[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cnt+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        <span class="keyword">if</span>(x[i]) <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>,<span class="number">1</span>,i+<span class="number">1</span>,x[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"2 %d %d\n"</span>,n,n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Ehab-and-another-another-xor-problem"><a href="#D-Ehab-and-another-another-xor-problem" class="headerlink" title="D. Ehab and another another xor problem"></a>D. Ehab and another another xor problem</h1><h2 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h2><p>交互题。</p><p>有两个数$a,b$，对于每次询问<code>? c d</code>，返回<code>cmp(a^c,b^d)</code>的值，要求在62次询问之内求出$a,b$的值，其中$0≤a,b&lt;2^{30}$.</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>考虑二进制分解，从最高位向下求解。</p><p>假设前k位已经确定，对于第k位的值，询问<code>(1,0)</code>,<code>(0,1)</code>,有如下情况：</p><ul><li><p>如果$a[k],b[k]$均为0，则<code>ask(1,0)=1</code>,<code>ask(0,1)=-1</code></p></li><li><p>如果$a[k],b[k]$均为1，则<code>ask(1,0)=-1</code>,<code>ask(0,1)=1</code></p></li><li><p>如果$a[k]≠b[k]$，则两次返回的值相同，且所得值为后k+1位的比较结果；</p><p>对于这种情况，需要在开始时<code>ask(0,0)</code>比较$a,b$后k位的大小，并根据比较的返回值更新该值。</p></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"? %d %d\n"</span>,a,b);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">0</span>,b=<span class="number">0</span>,x,y;</span><br><span class="line">    <span class="keyword">int</span> big=query(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">29</span>;~i;--i)</span><br><span class="line">    &#123;</span><br><span class="line">        x=query(a^(<span class="number">1</span>&lt;&lt;i),b);</span><br><span class="line">        y=query(a,b^(<span class="number">1</span>&lt;&lt;i));</span><br><span class="line">        <span class="keyword">if</span>(x==y)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(big==<span class="number">1</span>) a^=(<span class="number">1</span>&lt;&lt;i);</span><br><span class="line">            <span class="keyword">else</span> b^=(<span class="number">1</span>&lt;&lt;i);</span><br><span class="line">            big=x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(x==<span class="number">-1</span>) a^=(<span class="number">1</span>&lt;&lt;i),b^=(<span class="number">1</span>&lt;&lt;i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"! %d %d\n"</span>,a,b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="E-Ehab-and-a-component-choosing-problem"><a href="#E-Ehab-and-a-component-choosing-problem" class="headerlink" title="E. Ehab and a component choosing problem"></a>E. Ehab and a component choosing problem</h1><h2 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h2><p>给定一个有$n$个结点的树，每个节点的点权为$a_u$.选定k个不相交的联通块，使$\frac{\sum\limits_{u \in s} a_u}{k}$的值最大，如果有多个解，最大化k的值。</p><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>如果不需要最大化k的值，显然取k=1，最大联通块的值$w$即为所求解。</p><p>对于k&gt;1的情况，只要求出值等于$w$的联通块数量即可求解。</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> val[maxn],head[maxn],cnt=<span class="number">0</span>;</span><br><span class="line">ll mx=<span class="number">-0x3f3f3f3f</span>,tot=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span> <span class="keyword">int</span> nex,to; &#125;edge[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[cnt].nex=head[u];</span><br><span class="line">    edge[cnt].to=v;</span><br><span class="line">    head[u]=cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans=val[u];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];~i;i=edge[i].nex)</span><br><span class="line">        <span class="keyword">if</span>(edge[i].to!=pre) ans+=max(dfs(edge[i].to,u),<span class="number">0l</span>l);</span><br><span class="line">    mx=max(ans,mx);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans=val[u];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];~i;i=edge[i].nex)</span><br><span class="line">        <span class="keyword">if</span>(edge[i].to!=pre) ans+=max(dfs2(edge[i].to,u),<span class="number">0l</span>l);</span><br><span class="line">    <span class="keyword">if</span>(mx==ans) &#123;</span><br><span class="line">        tot++;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,u,v;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;val[i]);</span><br><span class="line">    <span class="built_in">memset</span>(head,<span class="number">0xff</span>,<span class="keyword">sizeof</span> head);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">        add(u,v);</span><br><span class="line">        add(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    dfs2(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>,mx*tot,tot);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="F-Ehab-and-a-weird-weight-formula"><a href="#F-Ehab-and-a-weird-weight-formula" class="headerlink" title="F. Ehab and a weird weight formula"></a>F. Ehab and a weird weight formula</h1><h2 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h2><p>给定一个$n$个节点的树，每个节点有点权$a_u$，该树满足条件：对于树上的每个点（除权值最小的点），必有相邻的点$v$，使$a_v&lt;a_u$。要求构建一棵树，使树的权重最小。生成树的权重计算如下：</p><ul><li>对于每个点$u$,$w+=deg_u \cdot a_u$($deg_u$为生成树中节点$u$的度)</li><li>对于树上每条边${u,v}$,$w+=\lceil log_2(dist(u,v)) \rceil \cdot min(a_u,a_v)$，$dist(u,v)$为生成树上点$u,v$间的距离</li></ul><h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><p>对于所给的树，有如下性质：对于节点$u$的所有子节点$v$，有$a_v&gt;a_u$.即随着深度的增加，节点点权增加。</p><p>那么对于节点$u$，向上求第$1-2^k$倍的祖先节点$v$，用ST表求$\lceil log_2(dist(u,v)) \rceil \cdot min(a_u,a_v)+a[v]$的最小值，即可求出生成树的总权重。</p><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[maxn],root=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">25</span>][maxn];</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; edge[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dp[<span class="number">0</span>][u]=pre;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">20</span>;i++)</span><br><span class="line">        <span class="keyword">if</span>(dp[i<span class="number">-1</span>][u]!=<span class="number">-1</span>) dp[i][u]=dp[i<span class="number">-1</span>][dp[i<span class="number">-1</span>][u]];</span><br><span class="line">    <span class="keyword">int</span> d;</span><br><span class="line">    ll tmp=<span class="number">0xffffffff</span>;</span><br><span class="line">    <span class="keyword">for</span>(d=<span class="number">0</span>;d&lt;<span class="number">20</span>&amp;&amp;dp[d][u]!=<span class="number">-1</span>;d++)</span><br><span class="line">        tmp=min(tmp,<span class="number">1l</span>l*(d+<span class="number">1</span>)*a[dp[d][u]]+a[u]);</span><br><span class="line">    tmp=min(tmp,<span class="number">1l</span>l*(d+<span class="number">1</span>)*a[root]+a[u]);</span><br><span class="line">    <span class="keyword">if</span>(~pre) ans+=tmp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;edge[u].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=edge[u][i];</span><br><span class="line">        <span class="keyword">if</span>(v!=pre) dfs(v,u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,u,v;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">        <span class="keyword">if</span>(a[i]&lt;a[root]) root=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">        edge[u].push_back(v);</span><br><span class="line">        edge[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(dp,<span class="number">0xff</span>,<span class="keyword">sizeof</span> dp);</span><br><span class="line">    dfs(root,<span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Codeforces Round </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「2018 ACM-ICPC Nanjing - Onsite」M - Mediocre String Problem (字符串)</title>
      <link href="/2018/11/19/ACM-ICPC-2018-Nanjing-Onsite-M/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://codeforces.com/gym/101981/attachments" target="_blank" rel="noopener">M-Mediocre String Problem</a><br>给定字符串S,T，求S的子串与T的前缀子串能够组成的回文串个数</p></blockquote><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定两个字符串$s ,t$，取$s$的子串$s’$和$t$的前缀子串$t’$，并使$|s’|&gt;|t’|$.拼接$s’,t’$得到$str=s’+t’$,求能使$str$为回文串的总方案数。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>由于$|s’|&gt;|t’|$，可令$s’=a+b,t’=c ，(|a|=|c|&gt;0,|b|&gt;0)$</p><p>因此$str=a+b+c$，由回文串性质可知，$b$为长度大于0的回文串，且$reverse(a)=c$</p><p>如，对于字符串$s=aabbcdedc,t=bbaa$，以$x=4$为例</p><p>$aabb|cdedc$</p><p>$aabb$</p><p>$\;\;abb$</p><p> $\;\;\;\;bb$</p><p>$\;\;\;\;\;b$</p><p>$a,c$有以上4种取法，$b=c或b=cdedc$，共有2×4=8种情况</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>对于$1≤i≤|s|$求出以$s$以第$i$位开头的回文串个数$CNT(i)$，可以采用Manacher，利用回文串性质差分求解；</p><p>翻转$s$,利用ex-KMP求解$reverse(s)$的后缀与$t$的最长公共前缀$LCP$；</p><p>对于原串$s$的第$x$位，能够组成的回文串个数为$LCP(x)·CNT(x+1)$，求和即为所求解.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[maxn],t[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> tmp[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> Len[maxn&lt;&lt;<span class="number">1</span>],cnt[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">init</span><span class="params">(<span class="keyword">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,len=<span class="built_in">strlen</span>(str);</span><br><span class="line">    tmp[<span class="number">0</span>]=<span class="string">'@'</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*len;i+=<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp[i]=<span class="string">'#'</span>;</span><br><span class="line">        tmp[i+<span class="number">1</span>]=str[i/<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    tmp[<span class="number">2</span>*len+<span class="number">1</span>]=<span class="string">'#'</span>;</span><br><span class="line">    tmp[<span class="number">2</span>*len+<span class="number">2</span>]=<span class="string">'$'</span>;</span><br><span class="line">    tmp[<span class="number">2</span>*len+<span class="number">3</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>*len+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">manacher</span><span class="params">(<span class="keyword">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mx=<span class="number">0</span>,ans=<span class="number">0</span>,pos=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> len=init(str);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(mx&gt;i) Len[i]=min(mx-i,Len[<span class="number">2</span>*pos-i]);</span><br><span class="line">        <span class="keyword">else</span> Len[i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(tmp[i-Len[i]]==tmp[i+Len[i]]) Len[i]++;</span><br><span class="line">        <span class="keyword">if</span>(Len[i]+i&gt;mx) mx=Len[i]+i,pos=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(tmp[i]==<span class="string">'#'</span>&amp;&amp;Len[i]==<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> x=i/<span class="number">2</span>-Len[i]/<span class="number">2</span>,y=(Len[i]<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>((Len[i]<span class="number">-1</span>)%<span class="number">2</span>==<span class="number">0</span>) y--;</span><br><span class="line">        cnt[x]++;</span><br><span class="line">        cnt[x+y+<span class="number">1</span>]--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> extend[maxn],nex[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getNext</span><span class="params">(<span class="keyword">char</span> *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len=<span class="built_in">strlen</span>(s);</span><br><span class="line">    nex[<span class="number">0</span>]=len;</span><br><span class="line">    <span class="keyword">int</span> pos=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(pos+<span class="number">1</span>&lt;len&amp;&amp;s[pos]==s[pos+<span class="number">1</span>]) pos++;</span><br><span class="line">    nex[<span class="number">1</span>]=pos;</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">1</span>,L;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;len;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pos=k+nex[k]<span class="number">-1</span>;</span><br><span class="line">        L=nex[i-k];</span><br><span class="line">        <span class="keyword">if</span>(i+L&lt;=pos) nex[i]=L;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> j=pos-i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(j&lt;<span class="number">0</span>) j=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(i+j&lt;len&amp;&amp;s[i+j]==s[j]) j++;</span><br><span class="line">            nex[i]=j;</span><br><span class="line">            k=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getExtend</span><span class="params">(<span class="keyword">char</span> *s,<span class="keyword">char</span> *t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lens=<span class="built_in">strlen</span>(s),lent=<span class="built_in">strlen</span>(t);</span><br><span class="line">    getNext(t);</span><br><span class="line">    <span class="keyword">int</span> pos=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(pos&lt;lens&amp;&amp;pos&lt;lent&amp;&amp;s[pos]==t[pos]) pos++;</span><br><span class="line">    extend[<span class="number">0</span>]=pos;</span><br><span class="line">    <span class="keyword">int</span> k=<span class="number">0</span>,L;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;lens;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pos=k+extend[k]<span class="number">-1</span>;</span><br><span class="line">        L=nex[i-k];</span><br><span class="line">        <span class="keyword">if</span>(i+L&lt;=pos) extend[i]=L;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> j=pos-i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(j&lt;<span class="number">0</span>) j=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(i+j&lt;lens&amp;&amp;j&lt;lent&amp;&amp;s[i+j]==t[j]) j++;</span><br><span class="line">            extend[i]=j;</span><br><span class="line">            k=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,s,t);</span><br><span class="line">    <span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span> cnt);</span><br><span class="line">    <span class="keyword">int</span> lens=<span class="built_in">strlen</span>(s),lent=<span class="built_in">strlen</span>(t);</span><br><span class="line">    manacher(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;lens;i++) cnt[i]+=cnt[i<span class="number">-1</span>];</span><br><span class="line">    reverse(s,s+lens);</span><br><span class="line">    getExtend(s,t);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;lens;i++)</span><br><span class="line">        ans+=<span class="number">1l</span>l*cnt[lens-i]*extend[i];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> String </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Manacher </tag>
            
            <tag> exKMP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「BZOJ-3732」Network (Kruskal重构树)</title>
      <link href="/2018/11/16/bzoj-3732/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="https://www.lydsy.com/JudgeOnline/problem.php?id=3732" target="_blank" rel="noopener">BZOJ3732-Network</a><br>给定一个无向图，求图中A点到B点的所有路径中，最长边的最小值</p></blockquote><a id="more"></a><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>可以直接求出最小生成树，答案即为a到b路径上的最小边权，用LCA 求解。</p><p>此处采用Kruskal重构树求解。</p><h4 id="Kruskal重构树"><a href="#Kruskal重构树" class="headerlink" title="Kruskal重构树"></a>Kruskal重构树</h4><p>在Kruskal算法中，当找到两个不属于同一集合的联通块（子树）时，我们直接用边将两联通块相连，从而构建出最小生成树。</p><p>在Kruskal重构树中，对于两个不属于同一集合的联通块，我们首先建立一个虚点，作为两个子树的父节点，让两个子树的根节点与虚点相连，即可构造Kruskal重构树。虚点的点权即为原边的边权。</p><p>通过这一性质，我们成功将最小生成树上的路径信息转化成了点权信息。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>Kruskal重构树的构建过程如下：</p><ol><li><p>将边对于边权从小到大进行排序；</p></li><li><p>遍历边集，用并查集维护两点的连通性，若祖先不相同，则建立一个权值为边权的节点，其左右儿子分别为两个点的祖先节点，并将当前点设为两联通块的根节点；<br><img src="https://images2018.cnblogs.com/blog/1101696/201807/1101696-20180722084252832-1224079802.png" alt="img"></p></li></ol><p>对于构建完成的Kruskal重构树，对u,v求其LCA的点权即为所求解。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> u,v,w;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt;(<span class="keyword">const</span> Edge e) <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> w&lt;e.w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;es[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,pre[maxn],val[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> x==pre[x]?x:pre[x]=Find(pre[x]); &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tree[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">tree[u].push_back(v);</span><br><span class="line">pre[v]=u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dep[maxn],fa[maxn][<span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> pre)</span><span class="comment">//预处理各节点深度+初始fa[u][0]</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dep[u]=dep[pre]+<span class="number">1</span>;</span><br><span class="line">fa[u][<span class="number">0</span>]=pre;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tree[u].size();i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=tree[u][i];</span><br><span class="line"><span class="keyword">if</span>(v!=pre) dfs(v,u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span><span class="comment">//预处理fa数组</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;i)&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>;u&lt;=n;u++)</span><br><span class="line">fa[u][i]=fa[fa[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**************求LCA(u,v)**************/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(dep[u]&lt;dep[v])</span><br><span class="line">swap(u,v);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> d=dep[u]-dep[v];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;(<span class="number">1</span>&lt;&lt;i)&lt;=d;i++)<span class="comment">//将u上调d个距离</span></span><br><span class="line"><span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;i)&amp;d) u=fa[u][i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(u==v) <span class="keyword">return</span> u;<span class="comment">//特判此时u,v是否在同一位置，如果是，u,v都在LCA上</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=(<span class="keyword">int</span>)<span class="built_in">log</span>(n);i&gt;=<span class="number">0</span>;i--)<span class="comment">//同时上调u,v</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(fa[u][i]!=fa[v][i])</span><br><span class="line">&#123;</span><br><span class="line">u=fa[u][i];</span><br><span class="line">v=fa[v][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fa[u][<span class="number">0</span>];<span class="comment">//最后会使u,v成为LCA的子节点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m,k,u,v,w;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>*n;i++) pre[i]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;es[i].u, &amp;es[i].v, &amp;es[i].w);</span><br><span class="line">sort(es,es+m);</span><br><span class="line"><span class="keyword">int</span> index=n,lim=n&lt;&lt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">&#123;</span><br><span class="line">u=es[i].u,v=es[i].v,w=es[i].w;</span><br><span class="line"><span class="keyword">int</span> fx=Find(u),fy=Find(v);</span><br><span class="line"><span class="keyword">if</span>(fx==fy) <span class="keyword">continue</span>;</span><br><span class="line">index++;</span><br><span class="line">add(index,fx);</span><br><span class="line">add(index,fy);</span><br><span class="line">val[index]=w;</span><br><span class="line"><span class="keyword">if</span>(index==lim<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">dep[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">n=index;</span><br><span class="line">dfs(index,<span class="number">0</span>);</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">while</span>(k--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,val[LCA(u,v)]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Graph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LCA </tag>
            
            <tag> Kruskal重构树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「ZOJ-3430」Detect the Virus (AC自动机)</title>
      <link href="/2018/11/08/ZOJ-3430/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemId=4114" target="_blank" rel="noopener">「ZOJ-3430」Detect the Virus</a><br>AC自动机，求每个匹配串能匹配的模式串种类数</p></blockquote><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定$n$个模式串和$m$个匹配串(均以<code>base64</code>加密)，求匹配串中出现模式串的种类个数。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>对于<code>base64</code>的解码，即将字符对应的6位二进制串转化为8位二进制数，可以通过位运算完成，如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取编码后字符串当前位的二进制串，置于后6位</span></span><br><span class="line">len+=<span class="number">6</span>,x=(x&lt;&lt;<span class="number">6</span>)|base64[encode[i]];</span><br><span class="line"><span class="keyword">if</span>(len&gt;=<span class="number">8</span>) &#123;</span><br><span class="line">    <span class="comment">//取x的前8位，即为解码后的字符</span></span><br><span class="line">decode[p++] = (x &gt;&gt; (len - <span class="number">8</span>)) &amp; <span class="number">0xff</span>;</span><br><span class="line">len -= <span class="number">8</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>理论上解码之后就可以当做AC自动机模板题做然而</del></p><ul><li><code>Segmentation Fault</code> ：解码之后的字符串范围在0-256，需要使用<code>unsigned char</code>，否则会导致数组下标小于零越界(其实<code>int</code>也可以）;</li><li><code>Wrong Answer</code>：解码后的字符串值包含0，不能直接使用<code>strlen(str)</code>求解字符串长度；</li><li><code>Wrong Answer</code>：求解的是字符串的<code>种类数</code></li></ul><p>好了我就这么被卡了5小时。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> b64[]=<span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">50000</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt; mp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> str[<span class="number">5000</span>+<span class="number">10</span>],enstr[<span class="number">5000</span>+<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">decode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len=<span class="number">0</span>,x=<span class="number">0</span>,p=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;enstr[i]&amp;&amp;enstr[i]!=<span class="string">'='</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        len+=<span class="number">6</span>,x=(x&lt;&lt;<span class="number">6</span>)|mp[enstr[i]];</span><br><span class="line">        <span class="keyword">if</span>(len&gt;=<span class="number">8</span>) &#123;</span><br><span class="line">            str[p++] = (x &gt;&gt; (len - <span class="number">8</span>)) &amp; <span class="number">0xff</span>;</span><br><span class="line">            len -= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ACAutomation</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> nex[maxn][<span class="number">256</span>],fail[maxn],en[maxn],vis[maxn];</span><br><span class="line">    <span class="keyword">int</span> root,L;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">newnode</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++)</span><br><span class="line">            nex[L][i]=<span class="number">-1</span>;</span><br><span class="line">        en[L++]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> L<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        L=<span class="number">0</span>;</span><br><span class="line">        root=newnode();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> buf[],<span class="keyword">int</span> len,<span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> now=root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nex[now][buf[i]]==<span class="number">-1</span>)</span><br><span class="line">                nex[now][buf[i]]=newnode();</span><br><span class="line">            now=nex[now][buf[i]];</span><br><span class="line">        &#125;</span><br><span class="line">        en[now]=key;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">        fail[root]=root;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++)</span><br><span class="line">            <span class="keyword">if</span>(nex[root][i]==<span class="number">-1</span>)</span><br><span class="line">                nex[root][i]=root;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                fail[nex[root][i]]=root;</span><br><span class="line">                Q.push(nex[root][i]);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">while</span>(!Q.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> now=Q.front();</span><br><span class="line">            Q.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++)</span><br><span class="line">                <span class="keyword">if</span>(nex[now][i]==<span class="number">-1</span>)</span><br><span class="line">                    nex[now][i]=nex[fail[now]][i];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    fail[nex[now][i]]=nex[fail[now]][i];</span><br><span class="line">                    Q.push(nex[now][i]);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> buf[],<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> now=root;</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            now=nex[now][buf[i]];</span><br><span class="line">            <span class="keyword">int</span> tmp=now;</span><br><span class="line">            <span class="keyword">while</span>(tmp!=root)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(en[tmp]) vis[en[tmp]]=<span class="literal">true</span>;</span><br><span class="line">                tmp=fail[tmp];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span>(vis[i]) res++;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;AC;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">64</span>;i++) mp[b64[i]]=i;</span><br><span class="line">    <span class="keyword">int</span> m,len;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        AC.init();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,enstr);</span><br><span class="line">            len=decode();</span><br><span class="line">            AC.insert(str,len,i);</span><br><span class="line">        &#125;</span><br><span class="line">        AC.build();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">        <span class="keyword">while</span>(m--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,enstr);</span><br><span class="line">            len=decode();</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,AC.query(str,len));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> String </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AC自动机 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「LA-3942」Remember the Word (Trie树+DP)</title>
      <link href="/2018/10/27/UVALive-3942/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="https://icpcarchive.ecs.baylor.edu/index.php?option=com_onlinejudge&amp;Itemid=8&amp;page=show_problem&amp;problem=1943" target="_blank" rel="noopener">「LA-3942」Remember the Word</a><br>Trie+DP，求解若干个模式串组合构成目标串的方案数</p></blockquote><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个由小写字母组成的长字符串$S(1≤|S|≤300000)$和$N(1≤N≤4000)$条短字符串$C_i(1≤|C_i|≤100)$，求用短字符串构成长字符串的方案数，结果对$20071027$取模。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>对于目标串$S$，构建数组$dp[i]$，表示位于$i$时，字符串的后缀$S’$的组成方案数。</p><p>对于模式串$C_i$，若其能与$S’$长度为$len$的前缀子串匹配，则有状态转移方程$dp[i]+=dp[i+len+1]$，由于$|C_i|≤100$，则最多只需枚举长度为$100$的前缀子串。</p><p>考虑对模式串$C_i$建立Trie树，枚举后缀子串$S’$即可求解。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">3e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">20071027</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> dp[maxn],len;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> trie[maxn][<span class="number">30</span>],tot;</span><br><span class="line"><span class="keyword">bool</span> val[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_ch</span><span class="params">(<span class="keyword">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(str);</span><br><span class="line"><span class="keyword">int</span> root=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> id=str[i]-<span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">if</span>(!trie[root][id]) trie[root][id]=++tot;</span><br><span class="line">root=trie[root][id];</span><br><span class="line">&#125;</span><br><span class="line">val[root]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find_ch</span><span class="params">(<span class="keyword">char</span> *str,<span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> root=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=pos;i&lt;len&amp;&amp;i&lt;=pos+<span class="number">100</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> id=str[i]-<span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">if</span>(!trie[root][id]) <span class="keyword">return</span>;</span><br><span class="line">root=trie[root][id];</span><br><span class="line"><span class="keyword">if</span>(val[root]) (dp[pos]+=dp[i+<span class="number">1</span>])%=mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(trie,<span class="number">0</span>,<span class="keyword">sizeof</span> trie);</span><br><span class="line"><span class="built_in">memset</span>(val,<span class="number">0</span>,<span class="keyword">sizeof</span> val);</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span> dp);</span><br><span class="line">tot=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> t[<span class="number">105</span>];</span><br><span class="line">    <span class="keyword">int</span> n,cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%s"</span>,s)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,t);</span><br><span class="line">            insert_ch(t);</span><br><span class="line">        &#125;</span><br><span class="line">        len=<span class="built_in">strlen</span>(s);</span><br><span class="line">        dp[len]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--) find_ch(s,i);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: %d\n"</span>,++cnt,dp[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> String </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> Trie树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Codeforces Round 513 (rated, Div. 1 + Div. 2)</title>
      <link href="/2018/10/07/Codeforces%20Round%20513/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://codeforces.com/contest/1060" target="_blank" rel="noopener">Codeforces Round #513 by Barcelona Bootcamp (rated, Div. 1 + Div. 2)</a></p></blockquote><p>渡劫失败，菜得安详，自闭了。<br><a id="more"></a></p><h1 id="A-Phone-Numbers"><a href="#A-Phone-Numbers" class="headerlink" title="A.Phone Numbers"></a>A.Phone Numbers</h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一组数字，计算在每一组数字串均以<code>8</code>开头的前提下，能构成的长度为11的字符串的最大数量。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">105</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">if</span>(s[i]==<span class="string">'8'</span>) cnt++;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp=n-i;</span><br><span class="line">        <span class="keyword">if</span>(tmp&gt;=i*<span class="number">10</span>) ans=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-Maximum-Sum-of-Digits"><a href="#B-Maximum-Sum-of-Digits" class="headerlink" title="B.Maximum Sum of Digits"></a>B.Maximum Sum of Digits</h1><h2 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h2><p>$S(x)$表示数字$x$各位相加的值。给定一个数$x$，令$a+b=x$，求$S(a)+S(b)$的最大值。</p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>贪心。使a中包含尽可能多的9，即为所求解。</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">10</span>) <span class="keyword">return</span> <span class="number">0</span>*<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,n);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> tmp=<span class="number">1</span>,i=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(tmp&lt;=n) tmp*=<span class="number">10</span>,i++;</span><br><span class="line">    tmp/=<span class="number">10</span>;</span><br><span class="line">    tmp--;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">    ans=i*<span class="number">9</span>;</span><br><span class="line">    tmp=n-tmp;</span><br><span class="line">    <span class="keyword">while</span>(tmp)</span><br><span class="line">    &#123;</span><br><span class="line">        ans+=tmp%<span class="number">10</span>;</span><br><span class="line">        tmp/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Maximum-Subrectangle"><a href="#C-Maximum-Subrectangle" class="headerlink" title="C.Maximum Subrectangle"></a>C.Maximum Subrectangle</h1><h2 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h2><p>给定数组$a,b$,建立矩阵$c$，令矩阵$c[i][j]=a[i]·b[j]$，求不超过$x$的最大子矩阵和。</p><h2 id="解法-1"><a href="#解法-1" class="headerlink" title="解法"></a>解法</h2><p>可以得知子矩阵和为$(a[i]+a[i+1]+…+a[j])*(b[i]+b[i+1]+…+b[j])$.</p><p>对数组$a,b$求前缀和，分别计算出$a,b$区间长度为$[1,n]$时所能达到的最大值，遍历求解即可。</p><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x,a[<span class="number">2005</span>],b[<span class="number">2005</span>],ma[<span class="number">2005</span>],mb[<span class="number">2005</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    a[<span class="number">0</span>]=b[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">        a[i]+=a[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;b[i]);</span><br><span class="line">        b[i]+=b[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;x);</span><br><span class="line">    <span class="built_in">memset</span>(ma,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> ma);</span><br><span class="line">    <span class="built_in">memset</span>(mb,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> mb);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=n;j++)</span><br><span class="line">            ma[j-i+<span class="number">1</span>]=min(ma[j-i+<span class="number">1</span>],a[j]-a[i<span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=m;j++)</span><br><span class="line">            mb[j-i+<span class="number">1</span>]=min(mb[j-i+<span class="number">1</span>],b[j]-b[i<span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            <span class="keyword">if</span>(ma[i]*mb[j]&lt;=x) ans=max(ans,i*j);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Social-Circles"><a href="#D-Social-Circles" class="headerlink" title="D.Social Circles"></a>D.Social Circles</h1><h2 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h2><p>使用若干个圆桌，给$n$个人排座位。每个人左边需要有$L[i]$个空凳子，右边需要有$R[i]$个空凳子，求最少需要的凳子数。</p><h2 id="解法-2"><a href="#解法-2" class="headerlink" title="解法"></a>解法</h2><p>贪心。</p><p>每次加入一个人，这个人可能与他人相邻或与自己成环。与他人相连时，所需的值为$max(L_{i},R_{j})+1$；与自己成环时，所需的值为$max(L_i,R_i)+1$.要使总贡献最小，只需要使当前所取得的$max(L,R)$最小。</p><h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> l[maxn],r[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l[i],&amp;r[i]);</span><br><span class="line">    sort(l,l+n);</span><br><span class="line">    sort(r,r+n);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        ans+=max(l[i],r[i])+<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Codeforces Round </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「CodeForces-498C」Array and Operations(数论+网络流)</title>
      <link href="/2018/10/03/CodeForces-498C/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://codeforces.com/problemset/problem/498/C" target="_blank" rel="noopener">「CodeForces-498C」Array and Operations</a><br>给定n个点和m个边集，每次操作可以将相连边的两个点值同时除以一个公约数，问最大操作次数</p></blockquote><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个长为$n$的数组，以及$m$对下标为$(a,b)$的点对，且满足下标a+b为奇数（即奇数点只与偶数点匹配），每次操作可以将同一组的两个数同时除以一个公约数，问最多能进行多少次操作。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>显然题目所给的是一个二分图。</p><p>对于每个质因数分开考虑。对于奇数点，向源点连接一个容量为该因子个数的边；对于偶数点，则向汇点建立一个容量为因子数的边；对于有边相连的点对，建立容量为$inf$的边。</p><p>对于题给的数组$a[i]$，通过分解质因数的方式计算每个质因数所建图的最大流，求和即为所求解。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_V=<span class="number">200</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用于表示边的结构体（终点，流量，反向边）</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> to,cap,rev;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; G[MAX_V];<span class="comment">//图的邻接表表示</span></span><br><span class="line"><span class="keyword">int</span> level[MAX_V];<span class="comment">//顶点到源点的距离标号</span></span><br><span class="line"><span class="keyword">int</span> iter[MAX_V];<span class="comment">//当前弧</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> to,<span class="keyword">int</span> cap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">G[from].push_back((edge)&#123;to,cap,G[to].size()&#125;);</span><br><span class="line">G[to].push_back((edge)&#123;from,<span class="number">0</span>,G[from].size()<span class="number">-1</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算从源点出发的距离标号</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(level,<span class="number">-1</span>,<span class="keyword">sizeof</span>(level));</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">level[s]=<span class="number">0</span>;</span><br><span class="line">que.push(s);</span><br><span class="line"><span class="keyword">while</span>(!que.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=que.front();que.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G[v].size();i++)</span><br><span class="line">&#123;</span><br><span class="line">edge &amp;e=G[v][i];</span><br><span class="line"><span class="keyword">if</span>(e.cap&gt;<span class="number">0</span>&amp;&amp;level[e.to]&lt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">level[e.to]=level[v]+<span class="number">1</span>;</span><br><span class="line">que.push(e.to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过DFS寻找增广路</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> t,<span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(v==t) <span class="keyword">return</span> f;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> &amp;i=iter[v];i&lt;G[v].size();i++)</span><br><span class="line">&#123;</span><br><span class="line">edge &amp;e=G[v][i];</span><br><span class="line"><span class="keyword">if</span>(e.cap&gt;<span class="number">0</span> &amp;&amp; level[v]&lt;level[e.to])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> d=dfs(e.to,t,min(f,e.cap));</span><br><span class="line"><span class="keyword">if</span>(d&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">e.cap-=d;</span><br><span class="line">G[e.to][e.rev].cap+=d;</span><br><span class="line"><span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求解从s到t的最大流</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max_flow</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> flow=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;;)</span><br><span class="line">&#123;</span><br><span class="line">bfs(s);</span><br><span class="line"><span class="keyword">if</span>(level[t]&lt;<span class="number">0</span>) <span class="keyword">return</span> flow;</span><br><span class="line"><span class="built_in">memset</span>(iter,<span class="number">0</span>,<span class="keyword">sizeof</span>(iter));</span><br><span class="line"><span class="keyword">int</span> f;</span><br><span class="line"><span class="keyword">while</span>((f=dfs(s,t,INF))&gt;<span class="number">0</span>) flow+=f;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,a[<span class="number">105</span>],u[<span class="number">105</span>],v[<span class="number">105</span>],s,t,ans=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;MAX_V;i++) G[i].clear();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tot=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(a[i]%x==<span class="number">0</span>) a[i]/=x,tot++;</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">2</span>) add(s,i,tot);</span><br><span class="line">        <span class="keyword">else</span> add(i,t,tot);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++) add(u[i],v[i],INF);</span><br><span class="line">    ans+=max_flow(s,t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u[i],&amp;v[i]);</span><br><span class="line">        <span class="keyword">if</span>(v[i]&amp;<span class="number">1</span>) swap(u[i],v[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    s=<span class="number">0</span>,t=n+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>;j*j&lt;=a[i];j++)</span><br><span class="line">            <span class="keyword">if</span>(a[i]%j==<span class="number">0</span>) solve(j);</span><br><span class="line">        <span class="keyword">if</span>(a[i]&gt;<span class="number">1</span>) solve(a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Graph </category>
          
          <category> Network Flow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「SPOJ-P104」Highways(生成树计数)</title>
      <link href="/2018/10/02/SPOJ-P104/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="https://www.spoj.com/problems/HIGH/" target="_blank" rel="noopener">「SPOJ-P104」Highways</a><br>Matrix-Tree定理，求生成树的个数</p></blockquote><a id="more"></a><hr><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>一个有n座城市的组成国家，城市1至n编号，其中一些城市之间可以修建高速公路，需要有选择的修建一些高速公路，从而组成一个交通网络。计算有多少种方案，使得任意两座城市之间恰好只有一条路径。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>1、图G的度数矩阵$D[G]$，满足当$i≠j$ 时,$d_{ij}=0$；当$i=j$时，$d_{ij}$ 等于$vi$ 的度数。</p><p>2、图G的邻接矩阵$A[G]$</p><p>定义图G的基尔霍夫矩阵$C[G]=D[G]-A[G]$有如下性质：</p><p>①对于任意一个图,他的基尔霍夫矩阵C的行列式的值为0. </p><p>②如果图G不连通,其基尔霍夫矩阵的任意主子式行列式值为0.</p><p>③若图G是一棵树,则C[G]的任意一个n-1阶主子式的行列式的值为1. </p><h4 id="Matrix-Tree定理"><a href="#Matrix-Tree定理" class="headerlink" title="Matrix-Tree定理"></a>Matrix-Tree定理</h4><p>定义$G $的所有不同的生成树的个数等于其Kirchhoff矩阵$C[G]$任何一个$n-1 $阶主子式的行列式的绝对值。所谓$n-1$ 阶主子式，就是对于$r(1≤r≤n)$，将$C[G]$的第$r$ 行、第$r $列同时去掉后得到的新矩阵，用$Cr[G]$表示。</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><blockquote><p><a href="https://en.wikipedia.org/wiki/Kirchhoff%27s_theorem" target="_blank" rel="noopener">Kirchhoff’s theorem</a><br><a href="https://wenku.baidu.com/view/872eb02de2bd960590c677c6.html" target="_blank" rel="noopener">2007年国家集训队论文  周冬《生成树的计数及其应用》</a></p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> C[<span class="number">15</span>][<span class="number">15</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">det</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ret=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="keyword">while</span>(C[j][i])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">long</span> <span class="keyword">long</span> t=C[i][i]/C[j][i];</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=i;k&lt;=n;k++)</span><br><span class="line">                    C[i][k]=(C[i][k]-C[j][k]*t);</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=i;k&lt;=n;k++)</span><br><span class="line">                    swap(C[i][k],C[j][k]);</span><br><span class="line">                ret=-ret;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span>(!C[i][i])</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        ret=ret*C[i][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret&gt;<span class="number">0</span>?ret:-ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t,n,m,u,v;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="built_in">memset</span>(C,<span class="number">0</span>,<span class="keyword">sizeof</span> C);</span><br><span class="line">        <span class="keyword">while</span>(m--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">            C[u][u]++;C[v][v]++;</span><br><span class="line">            C[u][v]--;C[v][u]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,det(n));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Graph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matrix-Tree定理 </tag>
            
            <tag> 基尔霍夫矩阵 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「HDU-4821」String(字符串hash)</title>
      <link href="/2018/09/27/HDU-4821/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4821" target="_blank" rel="noopener">「HDU-4821」String</a><br>字符串hash，求长度为m*l子串中m个小子串两两互不完全相同的子串个数</p></blockquote><a id="more"></a><p>*假的字符串选手发现自己甚至不会hash，学习一个。</p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个字符串，求将长度为m*l的子串分割为每段长度为l的m段后，m段两两互不完全相同的子串个数。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>对字符串求hash值，map计数去重，判断当前不同字符串数是否等于m.</p><p>对于每个中间区间相同的区间，利用滑动窗口求解降低复杂度，即：删除左侧子串哈希值，将右边区间哈希值加入集合。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> seed=<span class="number">31</span>;</span><br><span class="line"></span><br><span class="line">ull base[maxn],h[maxn];</span><br><span class="line"><span class="built_in">map</span> &lt;ull,<span class="keyword">int</span>&gt; hashmap;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function">ull <span class="title">gethash</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;<span class="keyword">return</span> h[r]-h[l<span class="number">-1</span>]*base[r-l+<span class="number">1</span>]; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,l,len;</span><br><span class="line">    base[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;maxn;i++)</span><br><span class="line">        base[i]=base[i<span class="number">-1</span>]*seed;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;m,&amp;l)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">        len=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=len;i++)</span><br><span class="line">            h[i]=h[i<span class="number">-1</span>]*seed+s[i]-<span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=l&amp;&amp;i+m*l&lt;=len;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            hashmap.clear();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;i+m*l;j+=l)</span><br><span class="line">                hashmap[gethash(j,j+l<span class="number">-1</span>)]++;</span><br><span class="line">            <span class="keyword">if</span>(hashmap.size()==m) cnt++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=len-m*l-l+<span class="number">1</span>;j+=l)</span><br><span class="line">            &#123;</span><br><span class="line">                ull tmp=gethash(j,j+l<span class="number">-1</span>);</span><br><span class="line">                hashmap[tmp]--;</span><br><span class="line">                <span class="keyword">if</span>(!hashmap[tmp]) hashmap.erase(tmp);</span><br><span class="line">                hashmap[gethash(j+m*l,j+m*l+l<span class="number">-1</span>)]++;</span><br><span class="line">                <span class="keyword">if</span>(hashmap.size()==m) cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,cnt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> String </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hash </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「2018 ACM-ICPC Xuzhou - Online」J - Maze Designer(最大生成树+LCA)</title>
      <link href="/2018/09/25/ACM-ICPC-2018-Xuzhou-Online-J/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="https://nanti.jisuanke.com/t/31462" target="_blank" rel="noopener">J-Maze Designer</a><br>建立最大生成树，求树上任意两点之间的距离</p></blockquote><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个$n×m$的网格，在两个相邻点之间建立一堵墙会有一定的花费。建立一个迷宫，使任意两点之间只有一条路径可达，求在最低建造成本下，给定任意两点之间的路径。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>考虑在所有墙都建立的情况下，移除若干堵墙，使所有点连通，让所有点连通的最大花费即为题目所求的建造方案。建立最大生成树后求两点间的LCA，即可求解。</p><p>*我也不知道我比赛时候写的离线LCA有啥问题</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">250000</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,v;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> cost;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> edge &amp;e) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cost&gt;e.cost;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;es[<span class="number">2</span>*maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pre[maxn],cnt,E,V;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tree[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> pre[x]==x?x:pre[x]=Find(pre[x]); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kruskal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=V;i++) pre[i]=i;</span><br><span class="line">    sort(es,es+E);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;E;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        edge e=es[i];</span><br><span class="line">        <span class="keyword">int</span> fx=Find(e.u),fy=Find(e.v);</span><br><span class="line">        <span class="keyword">if</span>(fx!=fy)</span><br><span class="line">        &#123;</span><br><span class="line">            pre[fx]=fy;</span><br><span class="line">            tree[e.v].push_back(e.u);</span><br><span class="line">            tree[e.u].push_back(e.v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dep[maxn],fa[maxn+<span class="number">1</span>][<span class="number">30</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/**************预处理过程**************/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> pre)</span><span class="comment">//预处理各节点深度+初始fa[u][0]</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">dep[u]=dep[pre]+<span class="number">1</span>;</span><br><span class="line">fa[u][<span class="number">0</span>]=pre;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tree[u].size();i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=tree[u][i];</span><br><span class="line"><span class="keyword">if</span>(v!=pre) dfs(v,u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span><span class="comment">//预处理fa数组</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;i)&lt;=V;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>;u&lt;=V;u++)</span><br><span class="line">fa[u][i]=fa[fa[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**************求LCA(u,v)**************/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[u]&lt;dep[v])</span><br><span class="line">swap(u,v);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> d=dep[u]-dep[v];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;(<span class="number">1</span>&lt;&lt;i)&lt;=d;i++)<span class="comment">//将u上调d个距离</span></span><br><span class="line"><span class="keyword">if</span>((<span class="number">1</span>&lt;&lt;i)&amp;d) u=fa[u][i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(u==v) <span class="keyword">return</span> u;<span class="comment">//特判此时u,v是否在同一位置，如果是，u,v都在LCA上</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=(<span class="keyword">int</span>)<span class="built_in">log</span>(V);i&gt;=<span class="number">0</span>;i--)<span class="comment">//同时上调u,v</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(fa[u][i]!=fa[v][i])</span><br><span class="line">&#123;</span><br><span class="line">u=fa[u][i];</span><br><span class="line">v=fa[v][i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fa[u][<span class="number">0</span>];<span class="comment">//最后会使u,v成为LCA的子节点</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,q,x1,x2,y1,y2,u,v;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> w1,w2;</span><br><span class="line">    <span class="keyword">char</span> s1[<span class="number">5</span>],s2[<span class="number">5</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    cnt=<span class="number">0</span>;</span><br><span class="line">    V=n*m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s%lld%s%lld"</span>,s1,&amp;w1,s2,&amp;w2);</span><br><span class="line">            <span class="keyword">if</span>(s1[<span class="number">0</span>]==<span class="string">'D'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                es[cnt].u=(i<span class="number">-1</span>)*n+j;</span><br><span class="line">                es[cnt].v=i*n+j;</span><br><span class="line">                es[cnt++].cost=w1;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s1[<span class="number">0</span>]==<span class="string">'R'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                es[cnt].u=(i<span class="number">-1</span>)*n+j;</span><br><span class="line">                es[cnt].v=(i<span class="number">-1</span>)*n+j+<span class="number">1</span>;</span><br><span class="line">                es[cnt++].cost=w1;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(s2[<span class="number">0</span>]==<span class="string">'D'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                es[cnt].u=(i<span class="number">-1</span>)*n+j;</span><br><span class="line">                es[cnt].v=i*n+j;</span><br><span class="line">                es[cnt++].cost=w2;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(s2[<span class="number">0</span>]==<span class="string">'R'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                es[cnt].u=(i<span class="number">-1</span>)*n+j;</span><br><span class="line">                es[cnt].v=(i<span class="number">-1</span>)*n+j+<span class="number">1</span>;</span><br><span class="line">                es[cnt++].cost=w2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    E=cnt;</span><br><span class="line">    kruskal();</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    init();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line">    <span class="keyword">while</span>(q--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2);</span><br><span class="line">        u=(x1<span class="number">-1</span>)*n+y1;</span><br><span class="line">        v=(x2<span class="number">-1</span>)*n+y2;</span><br><span class="line">        <span class="keyword">int</span> root=LCA(u,v);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,<span class="number">-2</span>*dep[root]+dep[u]+dep[v]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Graph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最小生成树 </tag>
            
            <tag> LCA </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「POJ-2778」DNA Sequence (AC自动机+矩阵快速幂)</title>
      <link href="/2018/09/24/POJ-2778/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://poj.org/problem?id=2778" target="_blank" rel="noopener">「POJ-2778」DNA Sequence</a><br>AC自动机+矩阵快速幂，求长度为n且不包含任一不合法子序列的序列数量</p></blockquote><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定m个不合法序列，求所有长度为n，且不包含任何不合法子序列的序列数量(序列中只含A,T,C,G四个字符)。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>对于给定的m个序列，构建trie树。对于trie树上每一点的单步可达关系建立邻接矩阵，对矩阵求其n次幂，$\sum_{i=1}^n{matrix[0][i]}$即为所求解。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">100</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">100000</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Matrix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> row,column;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> data[maxn][maxn];</span><br><span class="line">    <span class="function">Matrix <span class="title">mul</span><span class="params">(Matrix a,Matrix b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Matrix ans;</span><br><span class="line">        ans.row=ans.column=a.row;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.row;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>,k;j&lt;b.column;j++)</span><br><span class="line">                <span class="keyword">for</span>(ans.data[i][j]=k=<span class="number">0</span>;k&lt;a.row;k++)</span><br><span class="line">                    (ans.data[i][j]+=a.data[i][k]*b.data[k][j])%=mod;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Matrix <span class="title">pow</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Matrix ans,base=*<span class="keyword">this</span>;</span><br><span class="line">        ans.row=ans.column=row;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;row;i++)</span><br><span class="line">            ans.data[i][i]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(n&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(n%<span class="number">2</span>)</span><br><span class="line">                ans=mul(ans,base);</span><br><span class="line">            base=mul(base,base);</span><br><span class="line">            n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;matrix;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">(<span class="keyword">char</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="string">'A'</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="string">'C'</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="string">'T'</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="string">'G'</span>) <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ACAutomation</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> trie[maxn][<span class="number">4</span>],fail[maxn];</span><br><span class="line"><span class="keyword">int</span> tag[maxn];</span><br><span class="line"><span class="keyword">int</span> root,L;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">newnode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">trie[L][i]=<span class="number">-1</span>;</span><br><span class="line">L++;</span><br><span class="line"><span class="keyword">return</span> L<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">L=<span class="number">0</span>;</span><br><span class="line">root=newnode();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入模式串，构造单词树(Keyword tree)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> buf[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len=<span class="built_in">strlen</span>(buf);</span><br><span class="line"><span class="keyword">int</span> now=root;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(trie[now][id(buf[i])]==<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">trie[now][id(buf[i])]=newnode();</span><br><span class="line">tag[L<span class="number">-1</span>]=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">now=trie[now][id(buf[i])];</span><br><span class="line">&#125;</span><br><span class="line">tag[now]=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用BFS计算每个节点的fail指针，构造trie树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">fail[root]=root;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line"><span class="keyword">if</span>(trie[root][i]==<span class="number">-1</span>)</span><br><span class="line">trie[root][i]=root;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">fail[trie[root][i]]=root;</span><br><span class="line">Q.push(trie[root][i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!Q.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> now=Q.front();</span><br><span class="line">Q.pop();</span><br><span class="line"><span class="keyword">if</span>(tag[fail[now]]) tag[now]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line"><span class="keyword">if</span>(trie[now][i]==<span class="number">-1</span>)</span><br><span class="line">trie[now][i]=trie[fail[now]][i];</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">fail[trie[now][i]]=trie[fail[now]][i];</span><br><span class="line">Q.push(trie[now][i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buildMatrix</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    matrix.row=matrix.column=L;</span><br><span class="line">    <span class="built_in">memset</span>(matrix.data,<span class="number">0</span>,<span class="keyword">sizeof</span> matrix.data);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;L;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)</span><br><span class="line">                <span class="keyword">if</span>(!tag[i]&amp;&amp;!tag[trie[i][j]])</span><br><span class="line">                    matrix.data[i][trie[i][j]]++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;AC;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,n;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">20</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;m,&amp;n);</span><br><span class="line">    AC.init();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">        AC.insert(s);</span><br><span class="line">    &#125;</span><br><span class="line">    AC.build();</span><br><span class="line">    AC.buildMatrix();</span><br><span class="line">    matrix=matrix.<span class="built_in">pow</span>(n);</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;AC.L;i++)</span><br><span class="line">        (ans+=matrix.data[<span class="number">0</span>][i])%=mod;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> String </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AC自动机 </tag>
            
            <tag> 矩阵快速幂 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「POJ-2449」Remmarguts&#39; Date(k短路)</title>
      <link href="/2018/09/10/POJ-2449/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://poj.org/problem?id=2449" target="_blank" rel="noopener">「POJ2499」Remmarguts’ Date</a><br>A*算法，k短路问题</p></blockquote><a id="more"></a><hr><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一张有向图，求s到t的第k短路。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><h4 id="A-算法"><a href="#A-算法" class="headerlink" title="A*算法"></a>A*算法</h4><p><a href="https://zh.wikipedia.org/wiki/A*%E6%90%9C%E5%B0%8B%E6%BC%94%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">A*算法</a>是一种启发式搜索算法。用于在图形平面上，对于有多个节点的路径，求出最低通过成本。</p><p>启发式搜索:在当前搜索节点往下一步节点时，可以通过启发函数来进行选择，选择代价最小的节点作为下一步节点而跳转其上。</p><p>A*算法的估值函数：</p><p>$$f(n)=g(n)+h(n)$$</p><p>其中：</p><p>$g(n)​$是指从初始状态到当前状态n的<strong>实际花费</strong>。</p><p>$h(n)$是指从当前状态n到最终状态的<strong>估计费用</strong>。</p><p>$f(n)$是指初始状态经过目标n到达最终状态的<strong>估计花费</strong>。</p><h4 id="k短路问题"><a href="#k短路问题" class="headerlink" title="k短路问题"></a>k短路问题</h4><p>在k短路问题中，$g(n)$表示当前已经走过的距离，$h(n)$为当前点到终点t的最短路；</p><p>对于估值函数，定义结构体：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> f,g,h;<span class="comment">//f(n),g(n),h(n)函数</span></span><br><span class="line">    <span class="keyword">int</span> id;<span class="comment">//当前点的编号</span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> A a)<span class="keyword">const</span>&#123;<span class="comment">//定义比较函数</span></span><br><span class="line">        <span class="keyword">if</span>(a.f==f) <span class="keyword">return</span> a.g&lt;g;</span><br><span class="line">        <span class="keyword">return</span> a.f&lt;f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用优先队列维护$f(n)$，使每次取到的最小的$f(n)$即为当前状态到目标点的最小花费；我们可以据此确定选取的顺序，并保证每一次更新的距离一定是当前所有情况能转移到的最小情况。</p><p>为了确定目标点被走过的次数，我们通常用$cnt$表示终点被经过的次数当$cnt=k$时，终止循环。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm=<span class="number">100000</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,k,cnt,head[maxn],revhead[maxn],dis[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v,w,nex;</span><br><span class="line">&#125;edge[maxm],revedge[maxm];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(head,<span class="number">0xff</span>,<span class="keyword">sizeof</span> head);</span><br><span class="line">    <span class="built_in">memset</span>(revhead,<span class="number">0xff</span>,<span class="keyword">sizeof</span> revhead);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[cnt].v=v,revedge[cnt].v=u;</span><br><span class="line">    edge[cnt].w=revedge[cnt].w=w;</span><br><span class="line">    edge[cnt].nex=head[u];</span><br><span class="line">    revedge[cnt].nex=revhead[v];</span><br><span class="line">    head[u]=revhead[v]=cnt;</span><br><span class="line">    cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> src)</span>      <span class="comment">//建立反向图，求图中所有点到终点的最短路径</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) dis[i]=inf;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line">    vis[src]=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">    que.push(src);</span><br><span class="line">    dis[src]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!que.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=que.front();</span><br><span class="line">        que.pop();</span><br><span class="line">        vis[u]=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=revhead[u];~i;i=revedge[i].nex)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v=revedge[i].v,w=revedge[i].w;</span><br><span class="line">            <span class="keyword">if</span>(dis[v]&gt;dis[u]+w)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[v]=dis[u]+w;</span><br><span class="line">                <span class="keyword">if</span>(!vis[v])</span><br><span class="line">                &#123;</span><br><span class="line">                    que.push(v);</span><br><span class="line">                    vis[v]=<span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> f,g,h;<span class="comment">//f(n),g(n),h(n)函数</span></span><br><span class="line">    <span class="keyword">int</span> id;<span class="comment">//当前点的编号</span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> A a)<span class="keyword">const</span>&#123;<span class="comment">//定义比较函数</span></span><br><span class="line">        <span class="keyword">if</span>(a.f==f) <span class="keyword">return</span> a.g&lt;g;</span><br><span class="line">        <span class="keyword">return</span> a.f&lt;f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Astar</span><span class="params">(<span class="keyword">int</span> src,<span class="keyword">int</span> des)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    priority_queue&lt;A&gt; Q;</span><br><span class="line">    <span class="keyword">if</span>(src==des) k++;   <span class="comment">//如果起点即为终点</span></span><br><span class="line">    <span class="keyword">if</span>(dis[src]==inf) <span class="keyword">return</span> <span class="number">-1</span>;      <span class="comment">//如果起点不能到达终点</span></span><br><span class="line">    A st,now,tmp;</span><br><span class="line">    st.id=src,st.g=<span class="number">0</span>,st.f=st.g+dis[src];    <span class="comment">//定义起始节点</span></span><br><span class="line">    Q.push(st);</span><br><span class="line">    <span class="keyword">while</span>(!Q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        now=Q.top();Q.pop();</span><br><span class="line">        <span class="keyword">if</span>(now.id==des)     <span class="comment">//如果当前节点为终点</span></span><br><span class="line">        &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">if</span>(cnt==k) <span class="keyword">return</span> now.g;    <span class="comment">//找到第k短路</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[now.id];~i;i=edge[i].nex)</span><br><span class="line">        &#123;</span><br><span class="line">            tmp.id=edge[i].v;</span><br><span class="line">            tmp.g=now.g+edge[i].w;     <span class="comment">//到该点的实际花费</span></span><br><span class="line">            tmp.f=tmp.g+dis[tmp.id];   <span class="comment">//到最终状态的估计花费</span></span><br><span class="line">            Q.push(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">//路径总数小于k</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,s,t,u,v,w;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">while</span>(m--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">            add(u,v,w);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;s,&amp;t,&amp;k);</span><br><span class="line">        spfa(t);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,Astar(s,t));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> A*算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「2018 ACM-ICPC Shenyang - Online」F - Fantastic Graph (网络流)</title>
      <link href="/2018/09/08/ACM-ICPC-2018-Shenyang-Online-F/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="https://nanti.jisuanke.com/t/31447" target="_blank" rel="noopener">F-Fantastic Graph</a><br>网络流建模，无源汇有上下界可行流问题</p></blockquote><a id="more"></a><hr><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个二分图和一系列匹配边，求解是否存在匹配边的选择组合，使二分图中的每个点度数$d$满足$l≤d≤r$。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>对于原二分图建立网络流模型。添加源汇点$s,t$,将其视为有上下界可行流问题求解。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>对于二分图中的每一条边，在网络流中边的流量为上界-下界。为了保证流量平衡，对于每一个出度为$d_i$的 左侧结点$X_i$,从源点建立一条容量为$d_i$的边；同样的，对于每一个出度为$d_i$的右侧结点$Y_i$,建立一条从$Y_i$到汇点的容量为$d_i$的边。建模完成后，从$s$到$t$跑一次最大流即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,k,high,low;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_V=<span class="number">6000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> g[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="comment">//用于表示边的结构体（终点，流量，反向边）</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> to,cap,rev;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; G[MAX_V];<span class="comment">//图的邻接表表示</span></span><br><span class="line"><span class="keyword">int</span> level[MAX_V];<span class="comment">//顶点到源点的距离标号</span></span><br><span class="line"><span class="keyword">int</span> iter[MAX_V];<span class="comment">//当前弧</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> from,<span class="keyword">int</span> to,<span class="keyword">int</span> cap)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">G[from].push_back((edge)&#123;to,cap,G[to].size()&#125;);</span><br><span class="line">G[to].push_back((edge)&#123;from,<span class="number">0</span>,G[from].size()<span class="number">-1</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//计算从源点出发的距离标号</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(level,<span class="number">-1</span>,<span class="keyword">sizeof</span>(level));</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line">level[s]=<span class="number">0</span>;</span><br><span class="line">que.push(s);</span><br><span class="line"><span class="keyword">while</span>(!que.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=que.front();que.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G[v].size();i++)</span><br><span class="line">&#123;</span><br><span class="line">edge &amp;e=G[v][i];</span><br><span class="line"><span class="keyword">if</span>(e.cap&gt;<span class="number">0</span>&amp;&amp;level[e.to]&lt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">level[e.to]=level[v]+<span class="number">1</span>;</span><br><span class="line">que.push(e.to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过DFS寻找增广路</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v,<span class="keyword">int</span> t,<span class="keyword">int</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(v==t) <span class="keyword">return</span> f;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> &amp;i=iter[v];i&lt;G[v].size();i++)</span><br><span class="line">&#123;</span><br><span class="line">edge &amp;e=G[v][i];</span><br><span class="line"><span class="keyword">if</span>(e.cap&gt;<span class="number">0</span> &amp;&amp; level[v]&lt;level[e.to])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> d=dfs(e.to,t,min(f,e.cap));</span><br><span class="line"><span class="keyword">if</span>(d&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">e.cap-=d;</span><br><span class="line">G[e.to][e.rev].cap+=d;</span><br><span class="line"><span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求解从s到t的最大流</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max_flow</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> flow=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;;)</span><br><span class="line">&#123;</span><br><span class="line">bfs(s);</span><br><span class="line"><span class="keyword">if</span>(level[t]&lt;<span class="number">0</span>) <span class="keyword">return</span> flow;</span><br><span class="line"><span class="built_in">memset</span>(iter,<span class="number">0</span>,<span class="keyword">sizeof</span>(iter));</span><br><span class="line"><span class="keyword">int</span> f;</span><br><span class="line"><span class="keyword">while</span>((f=dfs(s,t,INF))&gt;<span class="number">0</span>) flow+=f;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u,v,deu[maxn],dev[maxn],cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;k)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;MAX_V;i++) G[i].clear();</span><br><span class="line">        <span class="built_in">memset</span>(g,<span class="number">0</span>,<span class="keyword">sizeof</span> g);</span><br><span class="line">        <span class="built_in">memset</span>(deu,<span class="number">0</span>,<span class="keyword">sizeof</span> deu);</span><br><span class="line">        <span class="built_in">memset</span>(dev,<span class="number">0</span>,<span class="keyword">sizeof</span> dev);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;low,&amp;high);</span><br><span class="line">        <span class="built_in">memset</span>(G,<span class="number">0</span>,<span class="keyword">sizeof</span> G);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">            g[u][v]++;</span><br><span class="line">            deu[u]++;</span><br><span class="line">            dev[v]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="keyword">if</span>(deu[i]&lt;low) flag=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) <span class="keyword">if</span>(dev[i]&lt;low) flag=<span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//如果某点最大可达到的流量小于low，输出no</span></span><br><span class="line">        <span class="keyword">if</span>(!flag)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Case %d: %s\n"</span>,++cnt,flag?<span class="string">"Yes"</span>:<span class="string">"No"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> s=n+m+<span class="number">1</span>,e=s+<span class="number">1</span>,sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(!g[i][j]) <span class="keyword">continue</span>;</span><br><span class="line">                add(i,j,high-low);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) add(s,i,deu[i]),sum+=deu[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++) add(i,e,dev[i]);</span><br><span class="line">        <span class="keyword">int</span> ans=max_flow(s,e);</span><br><span class="line">        <span class="keyword">if</span>(ans!=sum) flag=<span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d: %s\n"</span>,++cnt,flag?<span class="string">"Yes"</span>:<span class="string">"No"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Graph </category>
          
          <category> Network Flow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「POJ-2289」Jamie&#39;s Contact Groups (二分图多重匹配+二分)</title>
      <link href="/2018/08/30/POJ-2289/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://poj.org/problem?id=2289" target="_blank" rel="noopener">「POJ-2289」amie’s Contact Groups</a><br>二分图最大多重匹配，求最大分组的最小值</p></blockquote><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一系列联系人和其可分到的组，对联系人分组，在所有联系人都有分组的情况下，使最大分组的值最小。求最大分组的最小值。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>匈牙利算法，求解可容纳量$limit$内的二分图多重匹配。二分答案，求出最小的满足左侧点全部匹配的$limit$值即为所求解。也可用网络流求解。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000</span>+<span class="number">5</span>;<span class="comment">//左边最大点数</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm=<span class="number">500</span>+<span class="number">5</span>;<span class="comment">//右边最大点数</span></span><br><span class="line"><span class="keyword">int</span> graph[maxn][maxm],vis[maxm];<span class="comment">//图G和增广路访问标记</span></span><br><span class="line"><span class="keyword">int</span> match[maxm][maxn];<span class="comment">//左边元素与右边元素第n次匹配</span></span><br><span class="line"><span class="keyword">int</span> nx,ny,m;<span class="comment">//左边点数，右边点数,边数</span></span><br><span class="line"><span class="keyword">int</span> limit;</span><br><span class="line"><span class="keyword">int</span> cnt[maxm];<span class="comment">//右边点已匹配值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">find_path</span><span class="params">(<span class="keyword">int</span> u)</span><span class="comment">//找增广路</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;ny; i++)<span class="comment">//注意，这里节点是从0开始编号，题目有时是从1开始编号</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(graph[u][i] &amp;&amp; !vis[i])<span class="comment">//不在增广路</span></span><br><span class="line">        &#123;</span><br><span class="line">            vis[i]=<span class="number">1</span>;<span class="comment">//放进增广路</span></span><br><span class="line">            <span class="keyword">if</span>(cnt[i]&lt;limit)<span class="comment">//如果当前已匹配数量小于可容纳量，则直接匹配</span></span><br><span class="line">            &#123;</span><br><span class="line">                match[i][cnt[i]++]=u;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;cnt[i]; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(find_path(match[i][j]))<span class="comment">//如果先前已匹配右边的点能另外找到增广路，则此点仍可匹配</span></span><br><span class="line">                &#123;</span><br><span class="line">                    match[i][j]=u;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max_match</span><span class="params">()</span><span class="comment">//计算多重匹配的最大匹配数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(match,<span class="number">-1</span>,<span class="keyword">sizeof</span>(match));</span><br><span class="line">    <span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span>(cnt));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nx; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">if</span>(find_path(i)) res++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">all_match</span><span class="params">()</span><span class="comment">//判断左边的点是否都与右边的点匹配了</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(cnt,<span class="number">0</span>,<span class="keyword">sizeof</span>(cnt));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nx; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="keyword">if</span>(!find_path(i)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> s[<span class="number">20</span>],c;</span><br><span class="line">    <span class="keyword">int</span> u;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;nx,&amp;ny)!=EOF&amp;&amp;(nx||ny))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(graph,<span class="number">0</span>,<span class="keyword">sizeof</span> graph);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nx;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">            <span class="keyword">for</span>(;;)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d%c"</span>,&amp;u,&amp;c);</span><br><span class="line">                graph[i][u]=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(c==<span class="string">'\n'</span>) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">1</span>,r=nx,ans=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">        <span class="keyword">while</span>(r&gt;l)</span><br><span class="line">        &#123;</span><br><span class="line">            limit=(l+r)/<span class="number">2</span>;</span><br><span class="line">            max_match();</span><br><span class="line">            <span class="keyword">if</span>(all_match()) r=limit;</span><br><span class="line">            <span class="keyword">else</span> l=limit+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Graph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分图匹配 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「HDU-3488」Tour (有向环覆盖问题)</title>
      <link href="/2018/08/29/HDU-3488/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3488" target="_blank" rel="noopener">「HDU-3488」Tour</a><br>二分图最大权匹配，有向环覆盖问题</p></blockquote><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个$n$个顶点、$m$条边的有向图，要求用一个或多个不相交的有向环覆盖所有的节点。问该有向环所有权值的总和最小为多少。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>因为路径由一个或多个不相交的有向环组成，对于匹配之后图中的每一点，其入度=出度=1，即拆点后二分图可以满足完备匹配，二分图中的边即为有向环中的边。</p><p>由于要求的答案为最小权匹配，初始化时需要将边的权值取负数，建立二分图，调用KM算法求其最佳匹配，取反即为所求解。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">200</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> lx[maxn],ly[maxn],edge[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> match[maxn],delta;</span><br><span class="line"><span class="keyword">bool</span> vx[maxn],vy[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vx[x]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> y=<span class="number">1</span>;y&lt;=n;y++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!vy[y])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> tmp=lx[x]+ly[y]-edge[x][y];</span><br><span class="line"><span class="keyword">if</span>(!tmp)</span><br><span class="line">&#123;</span><br><span class="line">vy[y]=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span>(!match[y]||dfs(match[y]))</span><br><span class="line">&#123;</span><br><span class="line">match[y]=x;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> delta=min(delta,tmp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">KM</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">lx[i]=-inf;</span><br><span class="line">ly[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">lx[i]=max(lx[i],edge[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(match,<span class="number">0</span>,<span class="keyword">sizeof</span>(match));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>;x&lt;=n;x++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(;;)</span><br><span class="line">&#123;</span><br><span class="line">delta=inf;</span><br><span class="line"><span class="built_in">memset</span>(vx,<span class="number">0</span>,<span class="keyword">sizeof</span>(vx));</span><br><span class="line"><span class="built_in">memset</span>(vy,<span class="number">0</span>,<span class="keyword">sizeof</span>(vy));</span><br><span class="line"><span class="keyword">if</span>(dfs(x)) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(vx[i]) lx[i]-=delta;</span><br><span class="line"><span class="keyword">if</span>(vy[i]) ly[i]+=delta;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(match[i]) ans-=edge[match[i]][i];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t,m,u,v,w;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="built_in">memset</span>(edge,-inf,<span class="keyword">sizeof</span> edge);</span><br><span class="line">        <span class="keyword">while</span>(m--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">            edge[u][v]=max(edge[u][v],-w);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,KM());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Graph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分图匹配 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「HDU-3829」Cat VS Dog (最大团)</title>
      <link href="/2018/08/28/HDU-3829/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=3829" target="_blank" rel="noopener">「HDU3829」Cat VS Dog</a><br>二分图匹配，最大团问题</p></blockquote><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>对于p个儿童，每个儿童有其喜欢的动物和讨厌的动物，如果一个儿童喜欢的动物没有被移除，并且讨厌的动物被移除，他/她将会很快乐。求能达到的最大快乐儿童数量。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>对于每个儿童，如果儿童a喜欢的动物是b讨厌的动物，或者a讨厌的动物是b喜欢的动物，那么a,b存在冲突，即不能同时选择a,b；</p><p>对不存在冲突的a,b连边，那么对于n个儿童，如果他们之间两两相连（即都不存在冲突），则可以同时选择这些儿童。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><blockquote><h4 id="二分图的最大独立集"><a href="#二分图的最大独立集" class="headerlink" title="二分图的最大独立集"></a>二分图的最大独立集</h4><p>定义：选出一些顶点使得这些顶点两两不相邻，则这些点构成的集合称为独立集。找出一个包含顶点数最多的独立集称为最大独立集。<br>方法：最大独立集=所有顶点数-最小顶点覆盖</p><h4 id="二分图的最大团"><a href="#二分图的最大团" class="headerlink" title="二分图的最大团"></a>二分图的最大团</h4><p>定义：对于一个二分图，我们在左边找到一个顶点子集X，在右边找到一个顶点子集Y，使得X中每个顶点和Y中每个顶点之间都有边。<br>方法：二分图的最大团=补图的最大独立集</p></blockquote><p>建立二分图，对不存在冲突的点连边，求解最大团即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">500</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p;</span><br><span class="line"><span class="keyword">int</span> edge[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> linker[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">path</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">1</span>;v&lt;=p;v++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(edge[u][v]&amp;&amp;!vis[v])</span><br><span class="line">        &#123;</span><br><span class="line">            vis[v]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(linker[v]==<span class="number">-1</span>||path(linker[v]))</span><br><span class="line">            &#123;</span><br><span class="line">                linker[v]=u;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hungary</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(linker,<span class="number">0xff</span>,<span class="keyword">sizeof</span>(linker));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=p;i++)</span><br><span class="line">    &#123;</span><br><span class="line">            <span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">            res+=path(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="keyword">char</span> like[<span class="number">510</span>][<span class="number">20</span>],hate[<span class="number">510</span>][<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;p)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=p;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%s%s"</span>,like[i],hate[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(edge,<span class="number">1</span>,<span class="keyword">sizeof</span>(edge));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=p;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=p;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">strcmp</span>(like[i],hate[j])!=<span class="number">0</span>&amp;&amp;<span class="built_in">strcmp</span>(like[j],hate[i])!=<span class="number">0</span>) </span><br><span class="line">                    edge[i][j]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,(<span class="number">2</span>*p-hungary())/<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Graph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分图匹配 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「HDU-6446」Tree and Permutation (树形DP)</title>
      <link href="/2018/08/26/HDU-6446/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6446" target="_blank" rel="noopener">「HDU-6446」Tree and Permutation</a><br>推论+树形dp，求解树上所有点对的距离之和</p></blockquote><a id="more"></a><hr><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一棵树，给出树上结点1-n的全排列，求所有排列所经过的路径长度总和。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>对于树上的某一点对$uv$,在全排列$1-n$中相邻的情况为：</p><p>当$uv$左侧有$m$个点，右侧有$n-2-m$个点时，排列数为(注意$uv$,$vu$为两种情况)</p><p>$$2×{C}{m \choose n-2}×{A}{m \choose m}×{A}{n-2 \choose n-2}=2×(n-2)!$$ </p><p>而这样的排列共有$n-1$种，即对于每一个点对，排列的总数为$2×(n-1)!$种。</p><p>此时只需要求出树上<strong>所有点对的距离之和</strong>即可，可用树形dp求解。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><h4 id="求解树上所有点对的距离之和"><a href="#求解树上所有点对的距离之和" class="headerlink" title="求解树上所有点对的距离之和"></a>求解树上所有点对的距离之和</h4><p>要求解所有点对的距离之和，我们可以求：<strong>对于每条边，所有可能路径经过此条边的次数</strong>。</p><p>设这两条边的两边的点数分别为$s和n-s$,则这条边共经过$s×(n-s)$次,那么当前边对距离总和的贡献为$s×(n-s)×len(u,v)$,对所有边的贡献求和，即为所求解。</p><p>在一棵树中，若需要求其中任意边两端的点数，可以用一次$dfs$求解。取一点为根，记录每个节点的子节点（包含自身）个数，若子节点个数为$a[u]$,父亲一侧节点个数即为$n-a[u]$,时间复杂度为$O(n)$.</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[maxn],cnt,n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> son[maxn],dp[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nex,to,w;</span><br><span class="line">&#125;edge[<span class="number">20</span>*maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[cnt].nex=head[u];</span><br><span class="line">    edge[cnt].to=v;</span><br><span class="line">    edge[cnt].w=w;</span><br><span class="line">    head[u]=cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    son[u]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];~i;i=edge[i].nex)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=edge[i].to,w=edge[i].w;</span><br><span class="line">        <span class="keyword">if</span>(fa==v) <span class="keyword">continue</span>;</span><br><span class="line">        dfs(v,u);</span><br><span class="line">        son[u]+=son[v];</span><br><span class="line">        (dp[u]+=(dp[v]+(n-son[v])*son[v]%mod*w%mod)%mod)%=mod;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u,v,w;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(head,<span class="number">0xff</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line">        cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;w);</span><br><span class="line">            add(u,v,w);</span><br><span class="line">            add(v,u,w);</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> res=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++) (res*=i)%=mod;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,(res*dp[<span class="number">1</span>])%mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Dynamic Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树形DP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Codeforces Round 506 (Div. 3)</title>
      <link href="/2018/08/25/Codeforces%20Round%20506%20(Div.3)/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://codeforces.com/contest/1029" target="_blank" rel="noopener">Codeforces Round #506 (Div. 3)</a></p></blockquote><a id="more"></a><h3 id="A-Many-Equal-Substrings"><a href="#A-Many-Equal-Substrings" class="headerlink" title="A. Many Equal Substrings"></a>A. Many Equal Substrings</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>给定一个长度为$n$的字符串$s$，构造一个字符串$t$，使其满足子串$s$出现$k$次，且使$t$长度最短。</p><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><p>调用KMP的next数组求解公共前后缀的长度，输出k次即可。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nex[<span class="number">55</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getNext</span><span class="params">(<span class="keyword">char</span> *a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">-1</span>;</span><br><span class="line">    nex[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;<span class="built_in">strlen</span>(a))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">-1</span>||a[i]==a[j]) nex[++i]=++j;</span><br><span class="line">        <span class="keyword">else</span> j=nex[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">55</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,a);</span><br><span class="line">    getNext(a);</span><br><span class="line">    <span class="keyword">int</span> q=nex[n];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>,a);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;k;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=q;j&lt;n;j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c"</span>,a[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="B-Creating-the-Contest"><a href="#B-Creating-the-Contest" class="headerlink" title="B. Creating the Contest"></a>B. Creating the Contest</h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>给定$n$个数，如果满足$a[i]*2≥a[i+1]$，则两数可以同时选择，求最大可选的连续串长度。</p><h4 id="解法-1"><a href="#解法-1" class="headerlink" title="解法"></a>解法</h4><p>对于每个数，判断其能否与下一个数同时选择，标记后遍历求最大值即可。</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="keyword">bool</span> up[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp=a[i]*<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> pos=upper_bound(a,a+n,tmp)-a;</span><br><span class="line">        up[i]=(pos&gt;i+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(up[i]==<span class="number">0</span>) cnt=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            ans=max(ans,cnt);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans=max(ans,cnt);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-Maximal-Intersection"><a href="#C-Maximal-Intersection" class="headerlink" title="C. Maximal Intersection"></a>C. Maximal Intersection</h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><p>给定n个区间，求删除一个区间后可能达到的最大区间交集大小。</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,a[<span class="number">3</span>]=&#123;<span class="number">-1</span>&#125;,b[<span class="number">3</span>]=&#123;<span class="number">-1</span>&#125;,x[<span class="number">2</span>],y[<span class="number">2</span>],l,r;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">0</span>]==<span class="number">-1</span>||l&gt;a[<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            a[<span class="number">1</span>]=a[<span class="number">0</span>];</span><br><span class="line">            a[<span class="number">0</span>]=l;</span><br><span class="line">            x[<span class="number">1</span>]=x[<span class="number">0</span>];</span><br><span class="line">            x[<span class="number">0</span>]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[<span class="number">1</span>]==<span class="number">-1</span>||l&gt;a[<span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            a[<span class="number">1</span>]=l;</span><br><span class="line">            x[<span class="number">1</span>]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(b[<span class="number">0</span>]==<span class="number">-1</span>||r&lt;b[<span class="number">0</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            b[<span class="number">1</span>]=b[<span class="number">0</span>];</span><br><span class="line">            b[<span class="number">0</span>]=r;</span><br><span class="line">            y[<span class="number">1</span>]=y[<span class="number">0</span>];</span><br><span class="line">            y[<span class="number">0</span>]=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(b[<span class="number">1</span>]==<span class="number">-1</span>||r&lt;b[<span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            b[<span class="number">1</span>]=r;</span><br><span class="line">            y[<span class="number">1</span>]=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(x[<span class="number">0</span>]==y[<span class="number">0</span>]) ans=max(b[<span class="number">1</span>]-a[<span class="number">1</span>],<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ans=max(b[<span class="number">0</span>]-a[<span class="number">1</span>],ans);</span><br><span class="line">        ans=max(b[<span class="number">1</span>]-a[<span class="number">0</span>],ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="D-Concatenated-Multiples"><a href="#D-Concatenated-Multiples" class="headerlink" title="D. Concatenated Multiples"></a>D. Concatenated Multiples</h3><h4 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h4><p>给定一个数组$a$，求其中的$a[i]$,$a[j]$拼接后能被$k$整除的$(i,j)$组数(其中$i≠j$)</p><h4 id="解法-2"><a href="#解法-2" class="headerlink" title="解法"></a>解法</h4><p>$x,y$拼接后能被$k$整除，等价于$(x·10^{n} \ mod\ k+y \mod k) \ mod \ k=0$ 其中$n$为$y$的位数。</p><p>对于每个数，枚举$a[i]·10^n(1≤n≤10)$，判断$len=n$且$a[i]·10^n +b[i]\ mod\ k+y \mod k) \ mod \ k=0$ 的数目即可。</p><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[maxn],b[maxn];</span><br><span class="line"><span class="keyword">int</span> len[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        n/=<span class="number">10</span>;</span><br><span class="line">        ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> s,tmp;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">    <span class="built_in">map</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>,<span class="keyword">long</span> <span class="keyword">long</span>&gt; mp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;s);</span><br><span class="line">        len[i]=cal(s);</span><br><span class="line">        a[i]=s%k;</span><br><span class="line">        b[i]=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">10</span>;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        mp.clear();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) (b[i]*=<span class="number">10</span>)%=k,mp[b[i]]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(j==len[i])</span><br><span class="line">            &#123;</span><br><span class="line">                tmp=k-a[i];</span><br><span class="line">                <span class="keyword">if</span>(tmp==k) tmp=<span class="number">0</span>;</span><br><span class="line">                ans+=mp[tmp];</span><br><span class="line">                <span class="keyword">if</span>(b[i]==tmp) ans--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Codeforces Round </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Codeforces </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「POJ-3041」Asteroids (最小点覆盖)</title>
      <link href="/2018/08/23/POJ-3041/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://poj.org/problem?id=3041" target="_blank" rel="noopener">「POJ-3041」Asteroids</a><br>二分图匹配问题，行列覆盖模型+最小点覆盖</p></blockquote><a id="more"></a><hr><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个n×n的矩阵，矩阵中的某些点为小行星，每次可以消除一行或一列的小行星，问消除全部小行星所需的最小次数。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>对于矩阵中某个存在障碍的点，若要消除该点，则需要让该点被所在的行/列攻击覆盖。若全部障碍点都被行/列攻击覆盖，则全部障碍都被消除。</p><p>根据障碍点坐标建立二分图。对于原矩阵，将每行x看做一个X节点，将每列y看做一个Y节点。此时，边$x→y$代表一个障碍点。</p><p>问题转化为：如果选择了一个节点，就相当于覆盖了以它为端点的所有边，如何选择最少的节点，使二分图中所有边都被覆盖。即<strong>二分图的最小点覆盖</strong>。</p><p>对于此问题，我们有结论：</p><blockquote><p>König定理：二分图中的最大匹配数等于这个图中的最小点覆盖数。</p></blockquote><p>套用匈牙利算法求解最大匹配数即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">500</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> edge[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> linker[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">path</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">1</span>;v&lt;=n;v++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(edge[u][v]&amp;&amp;!vis[v])</span><br><span class="line">        &#123;</span><br><span class="line">            vis[v]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(linker[v]==<span class="number">-1</span>||path(linker[v]))</span><br><span class="line">            &#123;</span><br><span class="line">                linker[v]=u;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hungary</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(linker,<span class="number">0xff</span>,<span class="keyword">sizeof</span>(linker));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">            <span class="built_in">memset</span>(vis,<span class="literal">false</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">            res+=path(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> k,u,v;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(edge,<span class="number">0</span>,<span class="keyword">sizeof</span>(edge));</span><br><span class="line">        <span class="keyword">while</span>(k--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">            edge[u][v]=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,hungary());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Graph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分图匹配 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018 Multi-University Nowcoder Round 8 - H Playing games（FWT,博弈）</title>
      <link href="/2018/08/15/Nowcoder-Summer-Round8-H/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="https://www.nowcoder.com/acm/contest/146/H" target="_blank" rel="noopener">H-Playing games</a><br>Nim博弈模型，在所给的n堆中选择使后手必胜的最大堆数</p></blockquote><a id="more"></a><hr><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>在$n$堆石子中选择最大数量的堆数，使得对于取出的$n$堆石子，在进行Nim游戏时后手必胜。</p><p><del>这样例膜得也太暴力了吧，苟利苟利苟利.jpg</del></p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>对于Nim游戏的局面，当且仅当$a_1⊕ a_2⊕ a_3…⊕ a_n=0$时，它是P-position（后手必胜），其中⊕ 表示异或(XOR)运算。</p><p>此题可以转化为，在$n$个数中寻找最多的数，使SUM_XOR=0.</p><p>我们再将题意转化为，在$n$个数中寻找最少的数，使SUM_XOR=C，其中，$C=a_1⊕ a_2⊕ ……⊕ a_n$</p><p>此处引入Fast Walsh-Hadamard Transform(FWT,快速沃尔什变换)求解。</p><h4 id="Fast-Walsh-Hadamard-Transform"><a href="#Fast-Walsh-Hadamard-Transform" class="headerlink" title="Fast Walsh-Hadamard Transform"></a>Fast Walsh-Hadamard Transform</h4><h5 id="FWT的详解参考："><a href="#FWT的详解参考：" class="headerlink" title="FWT的详解参考："></a>FWT的详解参考：</h5><blockquote><p><a href="https://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E6%B2%83%E7%88%BE%E4%BB%80%E8%BD%89%E6%8F%9B" target="_blank" rel="noopener">快速沃尔什转换 - 维基百科</a><br><a href="http://picks.logdown.com/posts/179290-fast-walsh-hadamard-transform" target="_blank" rel="noopener">Fast Walsh-Hadamard Transform</a><br><a href="https://www.cnblogs.com/cjyyb/p/9065615.html" target="_blank" rel="noopener">FWT快速沃尔什变换学习笔记</a></p></blockquote><p>FWT是用于解决<strong>多项式位运算卷积</strong>的一类方法，如下：</p><p>$$C_k=\sum_{i⊕j=k}A_i*B_j$$</p><p>对于数组A，我们设其在经过快速沃尔什变换后记作$FWT[A]$</p><p>我们需要一个新序列C，由序列A和序列B经过某运算规则得到，即$C=A⊕B$</p><p>我们先正向得到$FWT[A],FWT[B]$，然后根据$FWT[C]=FWT[A]*FWT[B]$求出$FWT[C]$，然后逆向运算得到原序列C，复杂度为$O(nlog(n))$</p><p>对于异或（XOR）卷积有：</p><p>$$tf(A)=(tf(A_0)+tf(A_1)),tf(A_0)-tf(A_1)) $$<br>$$utf(A)=(utf(\frac{A_0+A_1}{2}),utf(\frac{A_0-A_1}{2}))$$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FWT_xor</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> opt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> p=i&lt;&lt;<span class="number">1</span>,j=<span class="number">0</span>;j&lt;N;j+=p)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;i;++k)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> X=a[j+k],Y=a[i+j+k];</span><br><span class="line">                a[j+k]=(X+Y)%MOD;a[i+j+k]=(X+MOD-Y)%MOD;</span><br><span class="line">                <span class="keyword">if</span>(opt==<span class="number">-1</span>)a[j+k]=<span class="number">1l</span>l*a[j+k]*inv2%MOD,a[i+j+k]=<span class="number">1l</span>l*a[i+j+k]*inv2%MOD;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>对于本题，我们考虑将$a_i$的每一维拆开，看作一个$d$维向量，由于$a_i&lt;2^{19}$，取$d=19$</p><p>二分答案，取其在异或卷积意义下的$k$次幂，判断能否合成C即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1</span>&lt;&lt;<span class="number">19</span>,mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn],b[maxn];</span><br><span class="line"><span class="keyword">int</span> l,r,mid;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FWT</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> p=i&lt;&lt;<span class="number">1</span>,j=<span class="number">0</span>;j&lt;n;j+=p)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;i;k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> x=a[j+k],y=a[i+j+k];</span><br><span class="line">                a[j+k]=(x+y)%mod;a[i+j+k]=(x+mod-y)%mod;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,x,aim=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">        aim^=x;</span><br><span class="line">        a[x]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!aim) <span class="keyword">return</span> <span class="number">0</span>*<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n);</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">0</span>,r=<span class="number">19</span>,mid;</span><br><span class="line">    a[<span class="number">0</span>]++;</span><br><span class="line">    FWT(a,<span class="number">1</span>&lt;&lt;<span class="number">19</span>);</span><br><span class="line">    <span class="keyword">while</span>(r-l&gt;<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="number">1</span>&lt;&lt;<span class="number">19</span>);i++)</span><br><span class="line">        &#123;</span><br><span class="line">            b[i]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;mid;j++)</span><br><span class="line">                b[i]=<span class="number">1l</span>l*b[i]*a[i]%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        FWT(b,<span class="number">1</span>&lt;&lt;<span class="number">19</span>);</span><br><span class="line">        <span class="keyword">if</span>(b[aim]) r=mid; </span><br><span class="line">        <span class="keyword">else</span> l=mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,n-r);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博弈 </tag>
            
            <tag> FWT </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「CodeForces-191C」Fools and Roads(LCA+树上差分/树链剖分)</title>
      <link href="/2018/08/13/Codeforces-191C/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://codeforces.com/problemset/problem/191/C" target="_blank" rel="noopener">「CodeForces-191C」Fools and Roads</a><br>LCA+树上差分/树链剖分，求树边的染色次数</p></blockquote><a id="more"></a><hr><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个$N$节点的树，以及树上的$k$条简单路径（端点用$u$,$v$表示），求树上的各条边被$k$条简单路径经过的总次数。</p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><h3 id="LCA-树上差分"><a href="#LCA-树上差分" class="headerlink" title="LCA+树上差分"></a>LCA+树上差分</h3><p>对于树上的简单路径$path(u,v)$，如果对于每一次查询，都对路径$path(u_i,v_i)$上经过的每一条边的权值+1，时间复杂度为$O(k*n)=1e10$，显然我们需要优化时间复杂度。</p><p>我们引入<strong>树上差分</strong>（树的前缀和）来优化查询。</p><h4 id="树上差分"><a href="#树上差分" class="headerlink" title="树上差分"></a>树上差分</h4><p>对于树，有如下两个性质：</p><ol><li>任意两个节点之间有且只有一条路径；</li><li>根节点确定时，一个节点只有一个父亲节点。</li></ol><p>由此，在自根节点向下进行DFS时，对于$path(u,v)$的其中任意一点$u’≠r$，若$u’$被访问，则$u’$的父亲节点一定被访问。</p><p>基于这样的性质，我们将树上的路径$path(u,v)$分割为两条链，有$r=LCA(u,v)$，路径$path(u,v)$覆盖的边为$u→r$，$r→v$，对两条链分别进行差分。</p><p>关于边的差分中，$r=LCA(u,v)​$不包含在内。因此考虑链$u→r​$，有<code>cf[u]++</code>,<code>cf[r]​--</code>；同样的，对于链$r→v​$，有<code>cf[v]​++</code>,<code>cf[r]​--</code>，即</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">for</span> <span class="title">each</span><span class="params">(u,v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    r=LCA(u,v);</span><br><span class="line">    cf[r]-=<span class="number">2</span>;</span><br><span class="line">    cf[u]++;</span><br><span class="line">    cf[v]++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在完成所有$path$的查询后，自根节点进行$DFS$求树上每个点的前缀和，此时，对于树边$path(u,v)$，$cf[v]$即为此条边经过的总次数，即，对于树上的每条边$path(u,v)$，有</p><p>$$ans[path(u,v)]=cf[v]$$</p><p>时间复杂度为$O(n)$</p><p>如，对于样例1</p><p><img src="/2018/08/13/Codeforces-191C/pic1.png" alt="pic1"></p><p>对每一组查询$path$求LCA后有</p><p><img src="/2018/08/13/Codeforces-191C/pic3.png" alt="pic3"></p><p>DFS求前缀和，即为所求解</p><p><img src="/2018/08/13/Codeforces-191C/pic2.png" alt="pic2"></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[maxn],pre[maxn],ans[maxn],cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; query[maxn];</span><br><span class="line"><span class="keyword">int</span> cf[maxn]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nex,to,no;</span><br><span class="line">&#125;edge[<span class="number">2</span>*maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> no)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[cnt].nex=head[u];</span><br><span class="line">    edge[cnt].to=v;</span><br><span class="line">    edge[cnt].no=no;</span><br><span class="line">    head[u]=cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> x==pre[x]?x:pre[x]=Find(pre[x]); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=Find(x),b=Find(y);</span><br><span class="line">    <span class="keyword">if</span>(a!=b) pre[b]=a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];~i;i=edge[i].nex)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=edge[i].to;</span><br><span class="line">        <span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">        Tarjan(v,u);</span><br><span class="line">        Union(u,v);</span><br><span class="line">        vis[v]=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;query[u].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> e=query[u][i];</span><br><span class="line">        <span class="keyword">if</span>(vis[e])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> root=Find(e);</span><br><span class="line">            cf[root]-=<span class="number">2</span>;</span><br><span class="line">            cf[e]+=<span class="number">1</span>;</span><br><span class="line">            cf[u]+=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];~i;i=edge[i].nex)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v=edge[i].to;</span><br><span class="line">        <span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">        cf[u]+=dfs(v,u);</span><br><span class="line">        ans[edge[i].no]+=cf[v];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cf[u];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,u,v,k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="built_in">memset</span>(head,<span class="number">0xff</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        pre[i]=i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">        add(u,v,i);</span><br><span class="line">        add(v,u,i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);</span><br><span class="line">    <span class="keyword">while</span>(k--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">        query[u].push_back(v);</span><br><span class="line">        query[v].push_back(u);</span><br><span class="line">    &#125;</span><br><span class="line">    Tarjan(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="树链剖分"><a href="#树链剖分" class="headerlink" title="树链剖分"></a>树链剖分</h3><p>（待补）</p>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LCA </tag>
            
            <tag> 树上差分 </tag>
            
            <tag> 树链剖分 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「POJ-3494」Largest Submatrix of All 1’s(单调栈)</title>
      <link href="/2018/08/09/POJ-3494/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://poj.org/problem?id=3494" target="_blank" rel="noopener">「POJ-3494」Largest Submatrix of All 1’s </a><br>单调栈，寻找01矩阵中最大的元素全为1的子矩阵</p></blockquote><a id="more"></a><hr><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个$m×n$的$01$矩阵，求只包含元素$1$的最大子矩阵。</p><p>对于每一组输入，输出最大全$1$子矩阵的元素数目。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这题的暴力解法，即对于图中的每一个点$(i,j)$,枚举其右下方的每一个点，检测自$(i,j)$到$(x,y)$组成的子矩阵元素是否全为1.复杂度为$O(n^3m^3)$.</p><p>显然我们需要优化复杂度。</p><p>对于如下矩阵：</p><p>$$<br>\begin{vmatrix}<br>    0 &amp; 1 &amp; 0 &amp; 1 &amp; 0\<br>    0 &amp; 1 &amp;1 &amp; 0 &amp; 0\<br>    1 &amp; 1 &amp; 1 &amp; 0 &amp; 0\<br>    0 &amp; 0 &amp; 0 &amp; 0 &amp;1\<br>\end{vmatrix}<br>$$<br>枚举每行元素</p><p><img src="/2018/08/09/POJ-3494/1533815577042.png" alt="1533815577042"></p><p><img src="/2018/08/09/POJ-3494/1533815742193.png" alt="1533815742193"></p><p><img src="/2018/08/09/POJ-3494/1533815953866.png" alt="1533815953866"></p><p><img src="/2018/08/09/POJ-3494/1533816076001.png" alt="1533816076001"></p><p>即对于矩阵的每一行，枚举以每一行为底，柱状图所能形成的最大矩形面积，所有行中的最大值即为答案。</p><p>问题转化为</p><blockquote><p><a href="http://poj.org/problem?id=2559" target="_blank" rel="noopener">POJ2559 Largest Rectangle in a Histogram </a></p><p><img src="http://poj.org/images/2559_1.jpg" alt="img"> </p></blockquote><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>基于原矩阵，构造一个新矩阵<br>$$<br>\begin{matrix}<br>    0 &amp; 1 &amp; 0 &amp; 1 &amp; 0\<br>    0 &amp; 2  &amp; 1  &amp; 0 &amp; 0\<br>    1 &amp; 3 &amp; 2 &amp; 0 &amp; 0\<br>    0 &amp; 0 &amp; 0 &amp; 0 &amp;1\<br>\end{matrix}<br>$$<br>对于每一行，套用POJ2559的方法，使用单调栈求解当前行的最大值，再遍历求出总的最大值即可。</p><h4 id="POJ2559-最大矩形面积"><a href="#POJ2559-最大矩形面积" class="headerlink" title="POJ2559 最大矩形面积"></a>POJ2559 最大矩形面积</h4><p>对于最大矩形面积，我们需要找到每一个柱状块向左、右所能扩展的区间的最大长度。即，区间内的柱状块高度都不小于起始柱状块的高度。</p><p>使用单调栈维护一个从起点到当前点的单调递增序列，如果栈顶元素的高度大于当前点，弹出栈顶元素，直到栈为空，或栈顶元素小于当前点，以此来维护栈的递增性。</p><p>我们需要证明，之前弹出的元素对之后的点没有影响，即$i$之前大于$h[i]$的元素，必然不是$h[i+1]$的扩展边界：</p><ul><li><p>若$h[i]&lt;h[i+1]$，点$i+1$ 显然无法向左继续扩展，边界为$h[i]$</p></li><li><p>若$h[i]≥h[i+1]$，之前出栈的点一定大于$h[i]$，不影响$i+1$向左继续扩展</p></li></ul><p>以上结论具有递推性，可用数学归纳法证明。</p><p>由此我们可以线性求出每个元素向左、右扩展形成的最大矩形面积，即<code>s[i]=(l[i]+r[i]+1)*h[i]</code></p><blockquote><p><a href="https://github.com/V-Verly/ACM/blob/master/POJ/2559/15293982_AC_266ms_2812kB.cpp" target="_blank" rel="noopener">Code|Solution to POJ 2559</a></p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn][maxn],l[maxn],r[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,x;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">                <span class="keyword">if</span>(x) a[i][j]=a[i<span class="number">-1</span>][j]+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> a[i][j]=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span>(!st.empty()&amp;&amp;a[i][st.top()]&gt;=a[i][j]) st.pop();</span><br><span class="line">                <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span>(!st.empty()) res=st.top();</span><br><span class="line">                st.push(j);</span><br><span class="line">                l[j]=(j<span class="number">-1</span>-res)*a[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(!st.empty()) st.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=n;j&gt;<span class="number">0</span>;j--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span>(!st.empty()&amp;&amp;a[i][st.top()]&gt;=a[i][j]) st.pop();</span><br><span class="line">                <span class="keyword">int</span> res=n;</span><br><span class="line">                <span class="keyword">if</span>(!st.empty()) res=st.top()<span class="number">-1</span>;</span><br><span class="line">                st.push(j);</span><br><span class="line">                r[j]=(res-j)*a[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">                ans=max(ans,l[j]+r[j]+a[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单调栈 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「HDU-2196」Computer (树形DP)</title>
      <link href="/2018/07/21/HDU-2196/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=2196" target="_blank" rel="noopener">「HDU-2196」Computer</a><br>树形dp，树的最长路径（最远点对）</p></blockquote><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给出一棵$n$个结点的无根树，求出每个结点所能到达的最远点的距离。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>将无根树转成有根树，并进行两次DFS。</p><ol><li><p>第一次DFS求出每个结点在其子树中的<strong>正向最大距离</strong>和<strong>正向次大距离</strong>,记为<code>longest[i]</code>和<code>secondary[i]</code>，并标记最长距离所对应的子结点<code>mark[i]</code>；</p><p>此时可知对于每个结点$i$,最远点的距离只有两种可能：</p><ul><li>结点$i$的<strong>正向最大距离</strong></li><li>结点$i$链接其父结点所能到达的最大距离，即<strong>反向最大距离</strong></li></ul></li><li><p>第二次DFS求出反向最长距离<code>top[i]</code></p><ul><li><p>若其父节点的正向最大距离不经过$i$，反向最大距离为父节点的正向最大距离/反向最大距离+连接边</p><p>$$top[i]=max(top[fa],longest[fa])+edge[fa][i]$$</p></li><li><p>否则，反向最大距离为父节点的正向次大距离/反向最大距离+连接边</p><p>$$top[i]=max(top[fa],secondary[fa])+edge[fa][i]$$</p></li></ul></li></ol><p>最终所求每个点的最大距离$ans[i]=max(longest[i],top[i])$</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e4</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head[maxn],tot,longest[maxn],secondary[maxn],top[maxn],mark[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> to,nex,v;</span><br><span class="line">node()&#123;&#125;</span><br><span class="line">node(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c):to(a),nex(b),v(c)&#123;&#125;</span><br><span class="line">&#125;edge[<span class="number">2</span>*maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">edge[tot]=node(v,head[u],w);</span><br><span class="line">head[u]=tot++;</span><br><span class="line">edge[tot]=node(u,head[v],w);</span><br><span class="line">head[v]=tot++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">longest[u]=secondary[u]=<span class="number">0</span>;</span><br><span class="line">mark[u]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=head[u];k!=<span class="number">-1</span>;k=edge[k].nex)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=edge[k].to;</span><br><span class="line"><span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">dfs(v,u);</span><br><span class="line"><span class="keyword">if</span>(longest[u]&lt;=longest[v]+edge[k].v)</span><br><span class="line">&#123;</span><br><span class="line">secondary[u]=longest[u];</span><br><span class="line">longest[u]=longest[v]+edge[k].v;</span><br><span class="line">mark[u]=v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(secondary[u]&lt;=longest[v]+edge[k].v&amp;&amp;mark[u]!=v)</span><br><span class="line">secondary[u]=longest[v]+edge[k].v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=head[u];k!=<span class="number">-1</span>;k=edge[k].nex)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=edge[k].to;</span><br><span class="line"><span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(mark[u]!=v)</span><br><span class="line">top[v]=max(longest[u],top[u])+edge[k].v;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">top[v]=max(secondary[u],top[u])+edge[k].v;</span><br><span class="line">dfs1(v,u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v,w;</span><br><span class="line">tot=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">2</span>;u&lt;=N;u++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;v,&amp;w);</span><br><span class="line">add(u,v,w);</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">memset</span>(top,<span class="number">0</span>,<span class="keyword">sizeof</span>(top));</span><br><span class="line">dfs1(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">top[<span class="number">1</span>]=secondary[<span class="number">1</span>]; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,max(top[i],longest[i]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Dynamic Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 树形DP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「HDU-1520」Anniversary party (树形DP)</title>
      <link href="/2018/07/19/HDU-1520/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1520" target="_blank" rel="noopener">「HDU-1520」Anniversary party</a><br>树形DP，树的最大独立集问题</p></blockquote><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给一颗n个结点的无根树，选出一系列结点，使得在任何两个结点均不相邻的情况下，结点的权值和最大。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>树的最大独立集问题。</p><p>用$d(i)$表示以$i$为根节点的子树的最大独立集大小。对于结点$i$只有两种决策：选和不选。如果不选$i$,则问题转化成了求出$i$的所有儿子的$d$值再相加；如果选$i$,则它的儿子全部不能选，问题转化为了求出$i$的所有孙子的$d$之和。</p><p>状态转移方程为：</p><p>$$d(i)=max{\sum_{j∈s(i)}d(j),\sum_{j∈gs(i)}d(j)+val(i)}$$</p><p>其中$gs(i)$与$s(i)$分别为$i$的孙子集合与儿子集合。</p><p>实现方法：当计算出一个$d(i)$后，用它去更新$i$的父节点和祖父节点。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">6000</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tree[maxn];</span><br><span class="line"><span class="keyword">int</span> d[maxn],s[maxn],gs[maxn];</span><br><span class="line"><span class="keyword">int</span> N,val[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tree[u].size();i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=tree[u][i];</span><br><span class="line"><span class="keyword">if</span>(v!=fa) dfs(v,u);</span><br><span class="line">s[u]+=d[v];</span><br><span class="line"><span class="keyword">if</span>(fa) gs[fa]+=d[v];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> d[u]=max(s[u],gs[u]+val[u]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> u,v;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N)!=EOF)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;val[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">&#123;</span><br><span class="line">d[i]=s[i]=gs[i]=<span class="number">0</span>;</span><br><span class="line">tree[i].clear();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v)==<span class="number">2</span>&amp;&amp;(u||v))</span><br><span class="line">&#123;</span><br><span class="line">tree[u].push_back(v);</span><br><span class="line">tree[v].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dfs(<span class="number">1</span>,<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Dynamic Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 树形DP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「HDU-4616」Game (树形DP)</title>
      <link href="/2018/07/19/HDU-4616/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4616" target="_blank" rel="noopener">「HDU-4616」Game</a><br>树形DP，有限制的权值最大链问题</p></blockquote><a id="more"></a><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给一棵有$n$个节点的树，每个节点有其$val$值和$trap$值（1表示该点有陷阱，0为无陷阱），最多可掉进陷阱$c$次。经过树上某一点时将取得该点的$val$值，踩到第$c$个陷阱后马上停止，且不能走已经走过的点。求最大能获得的$val$值之和。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>树形dp。</p><p>每个节点的状态可用<code>dp[u][k][flag]</code>表示，<code>flag=1</code>时，表示在以$u$为根的子树上，从一个<strong>有陷阱的起点</strong>经过$k$个陷阱走到$u$的最大值；若<code>flag=0</code>，则表示起点没有陷阱。</p><p>考虑最优解共走过$k$个陷阱，如果<code>k!=c</code>,那么起点和终点都可以为没有陷阱的点，如果<code>k=c</code>,那么起点和终点至少有一点为有陷阱点。</p><h4 id="状态转移方程："><a href="#状态转移方程：" class="headerlink" title="状态转移方程："></a>状态转移方程：</h4><ol><li><p>当$u$点的起点<strong>有陷阱</strong>时，在$0&lt;k≤c$上，对$u$的子节点$v$有：</p><p>$$dp[u][k+1][1]=max(dp[u][k+1][1],dp[v][k+1][1]+val[u])$$</p></li><li><p>当$u$点起点<strong>没有陷阱</strong>时，在$0≤k≤c$上，对$u$的子节点$v$有：</p><p>$$dp[u][k][0]=max(dp[u][k][0],dp[v][k][0]+val[u])$$</p><p>对于情况1，由于不存在总陷阱数为0且起点为陷阱的情况，故<code>k！=0</code>.</p></li></ol><h5 id="以上两式可合写为："><a href="#以上两式可合写为：" class="headerlink" title="以上两式可合写为："></a>以上两式可合写为：</h5><p>$$dp[u][k+trap[u]][flag]=max(dp[u][k+trap[u]][flag],dp[v][k][flag]+val[u])$$</p><h4 id="对于最优解-ans"><a href="#对于最优解-ans" class="headerlink" title="对于最优解$ans$:"></a>对于最优解$ans$:</h4><p>最优解可以看成两条链拼在一起，枚举两条链的陷阱个数并求和更新最优解。</p><h5 id="更新最优解时需要注意："><a href="#更新最优解时需要注意：" class="headerlink" title="更新最优解时需要注意："></a>更新最优解时需要注意：</h5><ol><li>当两条链的陷阱总数<code>j+k=c</code>时，两条链的起点不可能同时为0；</li><li>不存在总陷阱数为0且起点陷阱值为1的情况；</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tree[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N,c;</span><br><span class="line"><span class="keyword">int</span> val[maxn],trap[maxn];</span><br><span class="line"><span class="keyword">int</span> dp[maxn][<span class="number">5</span>][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dp[u][trap[u]][trap[u]]=val[u];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tree[u].size();i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=tree[u][i];</span><br><span class="line"><span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">dfs(v,u);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=c;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;j+k&lt;=c;k++)</span><br><span class="line">&#123;</span><br><span class="line">ans=max(ans,dp[u][j][<span class="number">1</span>]+dp[v][k][<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">if</span>(j+k&lt;c) ans=max(ans,dp[u][j][<span class="number">0</span>]+dp[v][k][<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">if</span>(k) ans=max(ans,dp[u][j][<span class="number">0</span>]+dp[v][k][<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">if</span>(j) ans=max(ans,dp[u][j][<span class="number">1</span>]+dp[v][k][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k+trap[u]&lt;=c;k++)</span><br><span class="line">&#123;</span><br><span class="line">dp[u][k+trap[u]][<span class="number">0</span>]=max(dp[u][k+trap[u]][<span class="number">0</span>],dp[v][k][<span class="number">0</span>]+val[u]);</span><br><span class="line"><span class="keyword">if</span>(k) dp[u][k+trap[u]][<span class="number">1</span>]=max(dp[u][k+trap[u]][<span class="number">1</span>],dp[v][k][<span class="number">1</span>]+val[u]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t,u,v;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;c);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">tree[i].clear();</span><br><span class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;val[i],&amp;trap[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N<span class="number">-1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">tree[u].push_back(v);</span><br><span class="line">tree[v].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line">dfs(<span class="number">0</span>,<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Dynamic Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 树形DP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「HDU-1827」Summer Holiday (强联通分量)</title>
      <link href="/2018/07/18/HDU-1827/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1827" target="_blank" rel="noopener">「HDU-1827」Summer Holiday</a><br>Tarjan强联通分量+缩点，求最小联系费用</p></blockquote><a id="more"></a><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>强联通分量+缩点，判断每个强连通分量的入度是否为0，如果为0，则说明没有人能联系到这个分量中的任意一点。在同一强联通分量内，任意两点互相通达，所以只要其入度不为0，就代表整个强联通分量内的点都能被图中其它点通知信息。故Wiskey只要通知所有入度为0的强联通分量中的任意一点，就能通知到所有人。对于每一个入度为0的强联通分量，所需的联系费用即为其中花费最小的节点的费用（即点权最小的点的权值）。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1000</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; edge[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dfn[maxn],low[maxn],cost[maxn],belong[maxn],degree[maxn];</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">stack</span>[maxn],index,tot,scc;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfn[v]=low[v]=++tot;</span><br><span class="line">    <span class="built_in">stack</span>[++index]=v;</span><br><span class="line">    vis[v]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;edge[v].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u=edge[v][i];</span><br><span class="line">        <span class="keyword">if</span>(!dfn[u])</span><br><span class="line">        &#123;</span><br><span class="line">            Tarjan(u);</span><br><span class="line">            low[v]=min(low[v],low[u]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(vis[u])</span><br><span class="line">            low[v]=min(low[v],dfn[u]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(low[v]==dfn[v])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u;</span><br><span class="line">        belong[v]=++scc;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            u=<span class="built_in">stack</span>[index];</span><br><span class="line">            vis[u]=<span class="literal">false</span>;</span><br><span class="line">            belong[u]=scc;</span><br><span class="line">            index--;</span><br><span class="line">        &#125;<span class="keyword">while</span>(u!=v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,u,v;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;cost[i]);</span><br><span class="line">            edge[i].clear();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(m--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">            edge[u].push_back(v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(dfn,<span class="number">0</span>,<span class="keyword">sizeof</span>(dfn));</span><br><span class="line">        <span class="built_in">memset</span>(degree,<span class="number">0</span>,<span class="keyword">sizeof</span>(degree));</span><br><span class="line">        tot=index=scc=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">            <span class="keyword">if</span>(!dfn[i]) Tarjan(i);<span class="comment">//Tarjan求强联通分量+缩点</span></span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>,sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> v=<span class="number">1</span>;v&lt;=n;v++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;edge[v].size();j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> u=edge[v][j];</span><br><span class="line">                <span class="keyword">if</span>(belong[v]!=belong[u])<span class="comment">//不在同一个强连通分量内</span></span><br><span class="line">                    degree[belong[u]]++;<span class="comment">//入度+1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=scc;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!degree[i])<span class="comment">//该强联通分量的入度为0</span></span><br><span class="line">            &#123;</span><br><span class="line">                ans++;</span><br><span class="line">                <span class="keyword">int</span> mincost=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(belong[j]==i)<span class="comment">//该点在强连通分量内</span></span><br><span class="line">                        mincost=min(mincost,cost[j]);<span class="comment">//求该强联通分量内点权最小的点的权值</span></span><br><span class="line">                &#125;</span><br><span class="line">                sum+=mincost;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,ans,sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Graph </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 强连通分量 </tag>
            
            <tag> Tarjan </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>「POJ-1655」Balancing Act（树形DP）</title>
      <link href="/2018/05/29/POJ-1655-Balancing-Act/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://poj.org/problem?id=1655" target="_blank" rel="noopener">「POJ-1655」Balancing Act</a><br>树形DP，树的重心（质心）</p></blockquote><a id="more"></a><hr><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p><strong>树的重心（质心）</strong>。对于一棵n个节点的无根树，找到一个点，使得把树变成以该点为根的有根树时，最大子树的节点最小。</p><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><p>先任选一个节点作为根，把无根树变成有根树，然后设d(i)表示以i为根的子树的节点个数。不难发现$d(i)=\sum_{j∈s(i)}d(j)+1$ 。删除节点i后，节点i的子树中最大有max{d(j)}个节点，i的“上方子树”中有n-d(i)个节点。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> d[maxn],N,minNode,minBalance;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tree[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> node,<span class="keyword">int</span> father)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    d[node]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> maxSubTree=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;tree[node].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> son=tree[node][i];</span><br><span class="line">        <span class="keyword">if</span>(son!=father)</span><br><span class="line">        &#123;</span><br><span class="line">            dfs(son,node);</span><br><span class="line">            d[node]+=d[son];</span><br><span class="line">            maxSubTree=max(maxSubTree,d[son]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    maxSubTree=max(maxSubTree,N-d[node]);</span><br><span class="line">    <span class="keyword">if</span>(maxSubTree&lt;minBalance)</span><br><span class="line">    &#123;</span><br><span class="line">        minBalance=maxSubTree;</span><br><span class="line">        minNode=node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t,u,v;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++)</span><br><span class="line">            tree[i].clear();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;u,&amp;v);</span><br><span class="line">            tree[u].push_back(v);</span><br><span class="line">            tree[v].push_back(u);</span><br><span class="line">        &#125;</span><br><span class="line">        minNode=<span class="number">0</span>;</span><br><span class="line">        minBalance=inf;</span><br><span class="line">        dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>,minNode,minBalance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Dynamic Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 树形DP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Codeforces Round 483 (Div. 2)</title>
      <link href="/2018/05/17/Codeforces%20Round%20483%20(Div.%202)%20/"/>
      <content type="html"><![CDATA[<blockquote><p><a href="http://codeforces.com/contest/984" target="_blank" rel="noopener">Codeforces Round #483 (Div. 2) </a></p></blockquote><p><del>已经是条只会签到全靠补题的咸鱼了</del></p><a id="more"></a><hr><h3 id="A-Game"><a href="#A-Game" class="headerlink" title="A.Game"></a>A.Game</h3><h4 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h4><p>两方轮流删最大、最小的数，求最后剩下的值。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,a[<span class="number">1005</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    sort(a,a+n);</span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">2</span>) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a[n/<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a[n/<span class="number">2</span><span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="B-Minesweeper"><a href="#B-Minesweeper" class="headerlink" title="B. Minesweeper"></a>B. Minesweeper</h3><h4 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h4><p>给一张扫雷地图，判断标记数字有没有出现错误。</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m,n;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">105</span>][<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">8</span>]=&#123;<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">8</span>]=&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> fx=x+dx[i],fy=y+dy[i];</span><br><span class="line">        <span class="keyword">if</span>(fx&gt;=<span class="number">0</span>&amp;&amp;fx&lt;n&amp;&amp;fy&gt;=<span class="number">0</span>&amp;&amp;fy&lt;m&amp;&amp;a[fx][fy]==<span class="string">'*'</span>) ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,a[i]);</span><br><span class="line">    <span class="keyword">int</span> tmp;</span><br><span class="line">    <span class="keyword">bool</span> flag=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i][j]==<span class="string">'*'</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(a[i][j]==<span class="string">'.'</span>) tmp=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> tmp=a[i][j]-<span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">if</span>(tmp!=sum(i,j)) flag=<span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,flag?<span class="string">"YES"</span>:<span class="string">"NO"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="C-Finite-or-not"><a href="#C-Finite-or-not" class="headerlink" title="C. Finite or not?"></a>C. Finite or not?</h3><h4 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h4><p>给出三个整数p,q,b,判断p/q在b进制下是否是一个有限小数。</p><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><p>数论题。</p><p>首先在10进制下，一个分数在化为最简分数的情况下，如果它的分母只含有2和5两个质因数，这个分数就能化简为有限小数。</p><p>推广得在b进制下，如果化简后的p/q中的分母只含有b的质因数，那么该分数是一个有限小数。即q在与b的公因数的不断整除下，q能否被化简为1.</p><p>需要注意这里如果每步直接取<code>tmp=gcd(q,b)</code>则会导致tle，由$$gcd(\frac{p}{gcd(b,p)},b)=gcd(\frac{p}{gcd(b,p)},gcd(b,p))$$,则只需要取<code>tmp=gcd(q,tmp)</code>并不断整除q,tmp的公因数直到q=1（p/q为有限小数）或tmp=1（p≠1且不能继续化简，p/q为无限小数）即可</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">gcd</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a,<span class="keyword">long</span> <span class="keyword">long</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b==<span class="number">0</span>?a:gcd(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> p,q,b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;p,&amp;q,&amp;b);</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> tmp=gcd(p,q);</span><br><span class="line">        q/=tmp;</span><br><span class="line">        tmp=gcd(q,b);</span><br><span class="line">        <span class="keyword">while</span>(q&gt;<span class="number">1</span>&amp;&amp;tmp&gt;<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            tmp=gcd(q,tmp);</span><br><span class="line">            q/=tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,q==<span class="number">1</span>?<span class="string">"Finite"</span>:<span class="string">"Infinite"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="D-XOR-pyramid"><a href="#D-XOR-pyramid" class="headerlink" title="D. XOR-pyramid"></a>D. XOR-pyramid</h3><h4 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h4><p>对于长度为m的数组b，定义函数$$f$$如下</p><p>$$f(b) = \begin{cases} b[1] &amp; \quad \text{if } m = 1 \ f(b[1] \oplus b[2],b[2] \oplus b[3],\dots,b[m-1] \oplus b[m]) &amp; \quad \text{otherwise,} \end{cases}$$</p><p>其中⊕为异或运算，例：</p><p>$f(1,2,4,8)=f(1\oplus2,2\oplus4,4\oplus8)=f(3,6,12)=f(3\oplus6,6\oplus12)=f(5,10)=f(5\oplus10)=f(15)=15$</p><p>给定一个数组和一系列询问，求区间$$[l,r]$$内$$f$$的最大值。</p><h4 id="解法-1"><a href="#解法-1" class="headerlink" title="解法"></a>解法</h4><p>打表记录左右区间为$$[l,r]$$的$$f$$值dp[l][r]，i=l=r的值即为a[i]本身，通过<code>dp[l][r]=dp[l][r-1]^dp[l+1][r]</code>依次求出区间长度为1～n的f值（区间长度为k=r-l），再通过<code>dp[l][r]=max(dp[l+1][r],dp[l][r],dp[l][r-1])</code>逐步更新最大值。</p><p>其实就是个数塔形式的dp，计算过程中取左下方和右下方的值求异或和并记录，dp更新过程中取三者的最大值更新就可以了，如下</p><p>$f(1,2,4,8)=f(1\oplus2,2\oplus4,4\oplus8)=f(3,6,12)=f(3\oplus6,6\oplus12)=f(5,10)=f(5\oplus10)=f(15)=15$</p><p>$$15$$</p><p>$$5\qquad10$$</p><p>$$3\qquad6\qquad12$$</p><p>$$1\qquad2\qquad4\qquad8$$</p><p>与下方左右两数比较并更新后</p><p>$$15$$</p><p>$$[6]\qquad[12]$$</p><p>$$3\qquad6\qquad12$$</p><p>$$1\qquad2\qquad4\qquad8$$</p><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5000</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,l,r,t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;dp[i][i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;n;k++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i+k&lt;=n;i++)</span><br><span class="line">            dp[i][i+k]=dp[i][i+k<span class="number">-1</span>]^dp[i+<span class="number">1</span>][i+k];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i+k&lt;=n;i++)</span><br><span class="line">        dp[i][i+k]=max(max(dp[i+<span class="number">1</span>][i+k],dp[i][i+k]),dp[i][i+k<span class="number">-1</span>]);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;l,&amp;r);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[l][r]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="E-Elevator"><a href="#E-Elevator" class="headerlink" title="E. Elevator"></a>E. Elevator</h3><p><del><em>那我哪会</em></del></p>]]></content>
      
      <categories>
          
          <category> Algorithm </category>
          
          <category> Codeforces Round </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> Codeforces </tag>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
